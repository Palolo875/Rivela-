```index.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { App } from './App'
import './styles/globals.css'
const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

```
```App.tsx
import React from 'react'
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'
import { Layout } from './components/Layout'
import { QuestionScreen } from './components/QuestionScreen'
import { MappingScreen } from './components/MappingScreen'
import { RevealScreen } from './components/RevealScreen'
import { Dashboard } from './components/Dashboard'
import { AdvancedSimulation } from './components/AdvancedSimulation'
import { Settings } from './components/Settings'
import { Reports } from './components/Reports'
import { FinanceProvider } from './context/FinanceContext'
import { ThemeProvider } from './context/ThemeContext'
import { AnimatePresence } from 'framer-motion'
import { useFinanceStore } from './stores/financeStore'
import './styles/globals.css'
import { Profile } from './components/Profile'
import { Library } from './components/Library'
import { Lessons } from './components/Lessons'
import { Feedback } from './components/Feedback'
export function App() {
  const { hasCompletedOnboarding } = useFinanceStore()
  return (
    <BrowserRouter>
      <ThemeProvider>
        <FinanceProvider>
          <AnimatePresence mode="wait">
            <Layout>
              <Routes>
                <Route
                  path="/"
                  element={
                    hasCompletedOnboarding ? <Dashboard /> : <QuestionScreen />
                  }
                />
                <Route path="/question" element={<QuestionScreen />} />
                <Route path="/mapping" element={<MappingScreen />} />
                <Route path="/reveal" element={<RevealScreen />} />
                <Route path="/dashboard" element={<Dashboard />} />
                <Route path="/simulation" element={<AdvancedSimulation />} />
                <Route path="/reports" element={<Reports />} />
                <Route path="/settings" element={<Settings />} />
                <Route path="/profile" element={<Profile />} />
                <Route path="/library" element={<Library />} />
                <Route path="/lessons" element={<Lessons />} />
                <Route path="/feedback" element={<Feedback />} />
                <Route path="*" element={<Navigate to="/" replace />} />
              </Routes>
            </Layout>
          </AnimatePresence>
        </FinanceProvider>
      </ThemeProvider>
    </BrowserRouter>
  )
}

```
```tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```
```index.css
/* PLEASE NOTE: THESE TAILWIND IMPORTS SHOULD NEVER BE DELETED */
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
/* DO NOT DELETE THESE TAILWIND IMPORTS, OTHERWISE THE STYLING WILL NOT RENDER AT ALL */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
.animate-fadeIn {
  animation: fadeIn 0.5s ease-in-out;
}
/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}
::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
}
::-webkit-scrollbar-thumb {
  background: rgba(99, 102, 241, 0.5);
  border-radius: 10px;
}
::-webkit-scrollbar-thumb:hover {
  background: rgba(99, 102, 241, 0.7);
}
/* Line clamp utilities */
.line-clamp-1 {
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
/* Glassmorphism utilities */
.glass-effect {
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}
/* Custom animations */
@keyframes pulse-glow {
  0%, 100% { box-shadow: 0 0 5px rgba(99, 102, 241, 0.5); }
  50% { box-shadow: 0 0 20px rgba(99, 102, 241, 0.8); }
}
.animate-pulse-glow {
  animation: pulse-glow 2s infinite;
}
@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}
.animate-float {
  animation: float 4s ease-in-out infinite;
}
```
```components/Layout.tsx
import React from 'react'
export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
      <main className="container mx-auto px-4 py-8">{children}</main>
    </div>
  )
}

```
```components/ui/Logo.tsx
import React from 'react'
import { useTheme } from '../../context/ThemeContext'
import { Link } from 'react-router-dom'
import { SparklesIcon } from 'lucide-react'
export function Logo() {
  const { themeColors } = useTheme()
  return (
    <Link to="/" className="font-bold text-xl tracking-wider flex items-center">
      <SparklesIcon
        className={`mr-1 h-5 w-5 text-transparent bg-clip-text bg-gradient-to-r ${themeColors.primary}`}
      />
      <span
        className={`text-transparent bg-clip-text bg-gradient-to-r ${themeColors.primary}`}
      >
        Rivela
      </span>
      <span
        className={`ml-2 text-xs bg-gradient-to-r ${themeColors.primary} bg-opacity-20 px-2 py-0.5 rounded-full`}
      >
        Explorateur Financier
      </span>
    </Link>
  )
}

```
```components/ui/GlassCard.tsx
import React from 'react'
import { motion } from 'framer-motion'
interface GlassCardProps {
  children: React.ReactNode
  className?: string
  animate?: boolean
  hover?: boolean
}
export function GlassCard({
  children,
  className = '',
  animate = false,
  hover = false,
}: GlassCardProps) {
  const baseClasses = `glass ${className}`
  if (!animate) {
    return (
      <div
        className={`${baseClasses} ${hover ? 'transition-all duration-300 hover:bg-white/10 hover:shadow-lg' : ''}`}
      >
        {children}
      </div>
    )
  }
  return (
    <motion.div
      className={`${baseClasses} ${hover ? 'hover:bg-white/10 hover:shadow-lg' : ''}`}
      initial={{
        opacity: 0,
        y: 10,
      }}
      animate={{
        opacity: 1,
        y: 0,
      }}
      transition={{
        duration: 0.5,
      }}
      whileHover={
        hover
          ? {
              scale: 1.01,
              transition: {
                duration: 0.2,
              },
            }
          : undefined
      }
    >
      {children}
    </motion.div>
  )
}

```
```components/QuestionScreen.tsx
import React, { useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { useFinance } from '../context/FinanceContext'
import { useFinanceStore } from '../stores/financeStore'
import {
  SearchIcon,
  SendIcon,
  ArrowRightIcon,
  LightbulbIcon,
  HistoryIcon,
  TrendingUpIcon,
  PiggyBankIcon,
  BriefcaseIcon,
  HomeIcon,
  LineChartIcon,
  WalletIcon,
} from 'lucide-react'
export function QuestionScreen() {
  const navigate = useNavigate()
  const { themeColors } = useTheme()
  const { setUserQuestion } = useFinance()
  const { questionHistory, addQuestion, setHasCompletedOnboarding } =
    useFinanceStore()
  const [question, setQuestion] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  // Suggestions de questions
  const suggestions = [
    'Comment optimiser mon budget mensuel ?',
    'Comment réduire mes dépenses quotidiennes ?',
    "Comment créer un plan d'épargne efficace ?",
    'Comment gérer mes dettes efficacement ?',
    "Quelles sont les meilleures options d'investissement pour moi ?",
    'Comment planifier ma retraite dès maintenant ?',
  ]
  // Gérer la soumission de la question
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!question.trim()) return
    setIsSubmitting(true)
    // Enregistrer la question
    addQuestion(question)
    setUserQuestion(question)
    // Marquer l'onboarding comme terminé
    setHasCompletedOnboarding(true)
    // Simuler un traitement
    setTimeout(() => {
      setIsSubmitting(false)
      navigate('/mapping')
    }, 800)
  }
  // Utiliser une suggestion
  const useSuggestion = (suggestion: string) => {
    setQuestion(suggestion)
    // Focus sur l'input
    const input = document.getElementById('question-input')
    if (input) {
      input.focus()
    }
  }
  return (
    <div className="w-full max-w-2xl mx-auto">
      <motion.div
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <h1 className="text-4xl font-bold text-center mb-4">
          <span
            className={`text-transparent bg-clip-text bg-gradient-to-r ${themeColors.primary}`}
          >
            Posez
          </span>{' '}
          votre question
        </h1>
        <p className="text-center text-lg mb-8 text-gray-300">
          Que souhaitez-vous savoir sur votre situation financière ?
        </p>
        <GlassCard className="p-8 mb-8" animate>
          <form onSubmit={handleSubmit}>
            <div className="relative mb-6">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <SearchIcon className="h-5 w-5 text-gray-400" />
              </div>
              <input
                id="question-input"
                type="text"
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                className="w-full bg-black/20 border border-white/10 rounded-lg py-3 pl-10 pr-4 text-white text-lg focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                placeholder="Posez votre question financière..."
                autoFocus
              />
            </div>
            <button
              type="submit"
              disabled={!question.trim() || isSubmitting}
              className={`w-full py-3 rounded-lg bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white flex items-center justify-center transition-all duration-300 ${!question.trim() || isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin h-5 w-5 mr-2 border-2 border-white border-t-transparent rounded-full"></div>
                  Analyse en cours...
                </>
              ) : (
                <>
                  Analyser ma situation
                  <ArrowRightIcon className="ml-2 h-5 w-5" />
                </>
              )}
            </button>
          </form>
          {/* Suggestions de questions */}
          <div className="mt-8">
            <h3 className="flex items-center text-gray-300 mb-4">
              <LightbulbIcon className="h-5 w-5 mr-2 text-yellow-400" />
              Suggestions de questions
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {suggestions.map((suggestion, index) => (
                <button
                  key={index}
                  onClick={() => useSuggestion(suggestion)}
                  className="bg-black/20 hover:bg-black/30 p-3 rounded-lg text-left text-sm transition-all"
                >
                  {suggestion}
                </button>
              ))}
            </div>
          </div>
          {/* Historique des questions */}
          {questionHistory.length > 0 && (
            <div className="mt-8">
              <h3 className="flex items-center text-gray-300 mb-4">
                <HistoryIcon className="h-5 w-5 mr-2 text-blue-400" />
                Questions récentes
              </h3>
              <div className="space-y-2">
                {questionHistory.slice(0, 3).map((q, index) => (
                  <button
                    key={index}
                    onClick={() => useSuggestion(q)}
                    className="w-full bg-black/20 hover:bg-black/30 p-3 rounded-lg text-left text-sm flex items-center transition-all"
                  >
                    <span className="mr-2 bg-black/30 h-6 w-6 rounded-full flex items-center justify-center text-xs">
                      {index + 1}
                    </span>
                    {q}
                  </button>
                ))}
              </div>
            </div>
          )}
        </GlassCard>
        {/* Catégories de questions */}
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
          <GlassCard className="p-4 hover:bg-black/20 transition-all" hover>
            <div className="flex flex-col items-center text-center">
              <div className="p-3 rounded-full bg-green-500/20 mb-2">
                <TrendingUpIcon className="h-6 w-6 text-green-400" />
              </div>
              <h3 className="font-medium mb-1">Budget</h3>
              <p className="text-xs text-gray-400">Optimisez vos finances</p>
            </div>
          </GlassCard>
          <GlassCard className="p-4 hover:bg-black/20 transition-all" hover>
            <div className="flex flex-col items-center text-center">
              <div className="p-3 rounded-full bg-blue-500/20 mb-2">
                <PiggyBankIcon className="h-6 w-6 text-blue-400" />
              </div>
              <h3 className="font-medium mb-1">Épargne</h3>
              <p className="text-xs text-gray-400">Stratégies d'épargne</p>
            </div>
          </GlassCard>
          <GlassCard className="p-4 hover:bg-black/20 transition-all" hover>
            <div className="flex flex-col items-center text-center">
              <div className="p-3 rounded-full bg-purple-500/20 mb-2">
                <BriefcaseIcon className="h-6 w-6 text-purple-400" />
              </div>
              <h3 className="font-medium mb-1">Investissement</h3>
              <p className="text-xs text-gray-400">
                Faites fructifier votre argent
              </p>
            </div>
          </GlassCard>
          <GlassCard className="p-4 hover:bg-black/20 transition-all" hover>
            <div className="flex flex-col items-center text-center">
              <div className="p-3 rounded-full bg-orange-500/20 mb-2">
                <HomeIcon className="h-6 w-6 text-orange-400" />
              </div>
              <h3 className="font-medium mb-1">Immobilier</h3>
              <p className="text-xs text-gray-400">Projets immobiliers</p>
            </div>
          </GlassCard>
          <GlassCard className="p-4 hover:bg-black/20 transition-all" hover>
            <div className="flex flex-col items-center text-center">
              <div className="p-3 rounded-full bg-red-500/20 mb-2">
                <LineChartIcon className="h-6 w-6 text-red-400" />
              </div>
              <h3 className="font-medium mb-1">Retraite</h3>
              <p className="text-xs text-gray-400">Préparez votre avenir</p>
            </div>
          </GlassCard>
          <GlassCard className="p-4 hover:bg-black/20 transition-all" hover>
            <div className="flex flex-col items-center text-center">
              <div className="p-3 rounded-full bg-yellow-500/20 mb-2">
                <WalletIcon className="h-6 w-6 text-yellow-400" />
              </div>
              <h3 className="font-medium mb-1">Dettes</h3>
              <p className="text-xs text-gray-400">Gestion des dettes</p>
            </div>
          </GlassCard>
        </div>
      </motion.div>
    </div>
  )
}

```
```components/MappingScreen.tsx
import React, { useEffect, useState, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { useFinance } from '../context/FinanceContext'
import { GlassCard } from './ui/GlassCard'
import { RevealAnimation } from './ui/RevealAnimation'
import {
  ArrowLeftIcon,
  ArrowRightIcon,
  PlusIcon,
  TrashIcon,
  EditIcon,
  RefreshCwIcon,
  SaveIcon,
  CreditCardIcon,
  WalletIcon,
  BriefcaseIcon,
  CoinsIcon,
  BadgeEuroIcon,
  HomeIcon,
  ShoppingBagIcon,
  CarIcon,
  UtensilsIcon,
  HeartIcon,
  GraduationCapIcon,
  SmileIcon,
  CheckIcon,
  XIcon,
  PiggyBankIcon,
  TrendingUpIcon,
  BanknoteIcon,
  ReceiptIcon,
  AlertTriangle as AlertTriangleIcon,
  InfoIcon,
  MehIcon,
  FrownIcon,
  CheckCircleIcon,
} from 'lucide-react'
import { FinancialItem } from '../types/finance'
import { toast, Toaster } from 'react-hot-toast'
// Types pour améliorer la maintenabilité
type CategoryOption = {
  id: string
  name: string
  icon: React.ReactNode
  subcategories?: string[]
}
type EmotionOption = {
  value: number
  icon: React.ReactNode
  label: string
}
const categories = {
  income: [
    {
      id: 'salary',
      name: 'Salaire',
      icon: <BriefcaseIcon className="h-4 w-4" />,
    },
    {
      id: 'freelance',
      name: 'Freelance',
      icon: <BadgeEuroIcon className="h-4 w-4" />,
    },
    {
      id: 'investments',
      name: 'Investissements',
      icon: <TrendingUpIcon className="h-4 w-4" />,
    },
    {
      id: 'rental',
      name: 'Location',
      icon: <HomeIcon className="h-4 w-4" />,
    },
    {
      id: 'other_income',
      name: 'Autres',
      icon: <WalletIcon className="h-4 w-4" />,
    },
  ],
  expense: [
    {
      id: 'housing',
      name: 'Logement',
      icon: <HomeIcon className="h-4 w-4" />,
    },
    {
      id: 'food',
      name: 'Alimentation',
      icon: <UtensilsIcon className="h-4 w-4" />,
    },
    {
      id: 'transport',
      name: 'Transport',
      icon: <CarIcon className="h-4 w-4" />,
    },
    {
      id: 'utilities',
      name: 'Factures',
      icon: <div className="h-4 w-4" />,
    },
    {
      id: 'health',
      name: 'Santé',
      icon: <HeartIcon className="h-4 w-4" />,
    },
    {
      id: 'education',
      name: 'Éducation',
      icon: <GraduationCapIcon className="h-4 w-4" />,
    },
    {
      id: 'shopping',
      name: 'Shopping',
      icon: <ShoppingBagIcon className="h-4 w-4" />,
    },
    {
      id: 'leisure',
      name: 'Loisirs',
      icon: <SmileIcon className="h-4 w-4" />,
    },
    {
      id: 'other_expense',
      name: 'Autres',
      icon: <CreditCardIcon className="h-4 w-4" />,
    },
  ],
  saving: [
    {
      id: 'emergency',
      name: "Fonds d'urgence",
      icon: <AlertTriangleIcon className="h-4 w-4" />,
    },
    {
      id: 'savings',
      name: 'Épargne',
      icon: <PiggyBankIcon className="h-4 w-4" />,
    },
    {
      id: 'retirement',
      name: 'Retraite',
      icon: <CoinsIcon className="h-4 w-4" />,
    },
  ],
  debt: [
    {
      id: 'mortgage',
      name: 'Crédit immobilier',
      icon: <HomeIcon className="h-4 w-4" />,
    },
    {
      id: 'loan',
      name: 'Prêt',
      icon: <div className="h-4 w-4" />,
    },
    {
      id: 'credit_card',
      name: 'Carte de crédit',
      icon: <CreditCardIcon className="h-4 w-4" />,
    },
  ],
}
const frequencies = [
  {
    id: 'daily',
    name: 'Quotidien',
  },
  {
    id: 'weekly',
    name: 'Hebdomadaire',
  },
  {
    id: 'monthly',
    name: 'Mensuel',
  },
  {
    id: 'quarterly',
    name: 'Trimestriel',
  },
  {
    id: 'yearly',
    name: 'Annuel',
  },
  {
    id: 'once',
    name: 'Ponctuel',
  },
]
export function MappingScreen() {
  const navigate = useNavigate()
  const { theme, themeColors } = useTheme()
  const {
    financialData,
    setFinancialData,
    userQuestion,
    emotionalContext,
    setEmotionalContext,
  } = useFinance()
  // États pour la gestion de l'interface
  const [step, setStep] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [itemType, setItemType] = useState<
    'income' | 'expense' | 'saving' | 'debt'
  >('income')
  const [currentItem, setCurrentItem] = useState<FinancialItem>({
    category: '',
    subcategory: '',
    value: '',
    frequency: 'monthly',
    description: '',
    tags: [],
  })
  const [tagInput, setTagInput] = useState('')
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({})
  // Références pour l'accessibilité
  const valueInputRef = useRef<HTMLInputElement>(null)
  const categorySelectRef = useRef<HTMLSelectElement>(null)
  const emotionSliderRef = useRef<HTMLInputElement>(null)
  // Options pour les catégories
  const incomeCategories: CategoryOption[] = [
    {
      id: 'salary',
      name: 'Salaire',
      icon: <BanknoteIcon className="h-5 w-5" />,
    },
    {
      id: 'freelance',
      name: 'Freelance',
      icon: <TrendingUpIcon className="h-5 w-5" />,
    },
    {
      id: 'investments',
      name: 'Investissements',
      icon: <TrendingUpIcon className="h-5 w-5" />,
    },
    {
      id: 'rental',
      name: 'Revenus locatifs',
      icon: <HomeIcon className="h-5 w-5" />,
    },
    {
      id: 'other',
      name: 'Autres revenus',
      icon: <PiggyBankIcon className="h-5 w-5" />,
    },
  ]
  const expenseCategories: CategoryOption[] = [
    {
      id: 'housing',
      name: 'Logement',
      icon: <HomeIcon className="h-5 w-5" />,
      subcategories: [
        'Loyer',
        'Crédit immobilier',
        'Charges',
        'Électricité',
        'Eau',
        'Internet',
        'Autres',
      ],
    },
    {
      id: 'food',
      name: 'Alimentation',
      icon: <UtensilsIcon className="h-5 w-5" />,
      subcategories: ['Courses', 'Restaurants', 'Livraison', 'Autres'],
    },
    {
      id: 'transportation',
      name: 'Transport',
      icon: <CarIcon className="h-5 w-5" />,
      subcategories: [
        'Carburant',
        'Transports en commun',
        'Taxi/VTC',
        'Entretien véhicule',
        'Assurance véhicule',
        'Autres',
      ],
    },
    {
      id: 'shopping',
      name: 'Shopping',
      icon: <ShoppingBagIcon className="h-5 w-5" />,
      subcategories: ['Vêtements', 'Électronique', 'Décoration', 'Autres'],
    },
    {
      id: 'health',
      name: 'Santé',
      icon: <HeartIcon className="h-5 w-5" />,
      subcategories: [
        'Consultations',
        'Médicaments',
        'Assurance santé',
        'Autres',
      ],
    },
    {
      id: 'leisure',
      name: 'Loisirs',
      icon: <SmileIcon className="h-5 w-5" />,
      subcategories: ['Sorties', 'Abonnements', 'Voyages', 'Sports', 'Autres'],
    },
    {
      id: 'subscriptions',
      name: 'Abonnements',
      icon: <ReceiptIcon className="h-5 w-5" />,
      subcategories: [
        'Streaming',
        'Téléphonie',
        'Logiciels',
        'Magazines',
        'Autres',
      ],
    },
    {
      id: 'other',
      name: 'Autres dépenses',
      icon: <CreditCardIcon className="h-5 w-5" />,
      subcategories: ['Divers'],
    },
  ]
  // Options pour les émotions
  const emotionOptions: EmotionOption[] = [
    {
      value: 1,
      icon: <FrownIcon className="h-6 w-6" />,
      label: 'Très préoccupé(e)',
    },
    {
      value: 2,
      icon: <FrownIcon className="h-6 w-6" />,
      label: 'Préoccupé(e)',
    },
    {
      value: 3,
      icon: <MehIcon className="h-6 w-6" />,
      label: 'Neutre',
    },
    {
      value: 4,
      icon: <SmileIcon className="h-6 w-6" />,
      label: 'Confiant(e)',
    },
    {
      value: 5,
      icon: <SmileIcon className="h-6 w-6" />,
      label: 'Très confiant(e)',
    },
  ]
  // Tags financiers suggérés
  const suggestedTags = [
    'essentiel',
    'variable',
    'fixe',
    'récurrent',
    'exceptionnel',
    'économie',
    'investissement',
    'dette',
    'loisir',
    'santé',
  ]
  // Tags émotionnels suggérés
  const emotionalTags = [
    'stressé',
    'inquiet',
    'confiant',
    'optimiste',
    'déterminé',
    'confus',
    'curieux',
    'motivé',
    'dépassé',
    'serein',
  ]
  // Effet pour la mise en focus automatique
  useEffect(() => {
    if (step === 2 && valueInputRef.current) {
      valueInputRef.current.focus()
    } else if (step === 3 && categorySelectRef.current) {
      categorySelectRef.current.focus()
    } else if (step === 4 && emotionSliderRef.current) {
      emotionSliderRef.current.focus()
    }
  }, [step])
  // Gestion des erreurs de validation
  const validateField = (name: string, value: any): string => {
    switch (name) {
      case 'value':
        if (!value || value === '') return 'Le montant est requis'
        if (isNaN(Number(value))) return 'Le montant doit être un nombre'
        if (Number(value) <= 0) return 'Le montant doit être supérieur à 0'
        return ''
      case 'category':
        if (!value || value === '') return 'La catégorie est requise'
        return ''
      default:
        return ''
    }
  }
  // Ajout d'un élément financier
  const addFinancialItem = () => {
    // Validation
    const valueError = validateField('value', currentItem.value)
    const categoryError = validateField('category', currentItem.category)
    if (valueError || categoryError) {
      setValidationErrors({
        value: valueError,
        category: categoryError,
      })
      // Message d'erreur accessible
      if (valueError) {
        toast.error(valueError, {
          id: 'value-error',
          duration: 3000,
          position: 'bottom-center',
        })
      } else if (categoryError) {
        toast.error(categoryError, {
          id: 'category-error',
          duration: 3000,
          position: 'bottom-center',
        })
      }
      return
    }
    // Réinitialisation des erreurs
    setValidationErrors({})
    // Création d'un nouvel élément avec un ID unique
    const newItem: FinancialItem = {
      ...currentItem,
      id: `${itemType}-${Date.now()}`,
      value: Number(currentItem.value),
    }
    // Mise à jour des données financières
    setFinancialData({
      ...financialData,
      [itemType + 's']: [...(financialData[itemType + 's'] || []), newItem],
    })
    // Réinitialisation du formulaire
    setCurrentItem({
      category: '',
      subcategory: '',
      value: '',
      frequency: 'monthly',
      description: '',
      tags: [],
    })
    // Confirmation visuelle et sonore
    toast.success(
      `${itemType === 'income' ? 'Revenu' : itemType === 'expense' ? 'Dépense' : itemType === 'saving' ? 'Épargne' : 'Dette'} ajouté(e) avec succès`,
      {
        id: 'item-added',
        duration: 2000,
      },
    )
    // Retour à l'étape 2 pour ajouter plus d'éléments
    setStep(2)
  }
  // Gestion des tags
  const handleTagAdd = (tag: string) => {
    if (!tag.trim()) return
    if (currentItem.tags?.includes(tag)) return
    setCurrentItem({
      ...currentItem,
      tags: [...(currentItem.tags || []), tag],
    })
    setTagInput('')
  }
  const handleTagRemove = (tag: string) => {
    setCurrentItem({
      ...currentItem,
      tags: currentItem.tags?.filter((t) => t !== tag) || [],
    })
  }
  // Gestion des émotions
  const handleEmotionChange = (value: number) => {
    setEmotionalContext({
      ...emotionalContext,
      mood: value,
    })
  }
  const handleEmotionalTagToggle = (tag: string) => {
    const currentTags = emotionalContext.tags || []
    if (currentTags.includes(tag)) {
      setEmotionalContext({
        ...emotionalContext,
        tags: currentTags.filter((t) => t !== tag),
      })
    } else {
      setEmotionalContext({
        ...emotionalContext,
        tags: [...currentTags, tag],
      })
    }
  }
  // Navigation entre les étapes
  const goToNextStep = () => {
    if (step === 5) {
      handleContinue()
    } else {
      setStep(step + 1)
    }
  }
  const goToPreviousStep = () => {
    if (step === 1) {
      navigate('/question')
    } else {
      setStep(step - 1)
    }
  }
  // Continuation vers la page de résultats
  const handleContinue = () => {
    setIsLoading(true)
    // Simulation d'un chargement
    setTimeout(() => {
      setIsLoading(false)
      navigate('/reveal')
    }, 1000)
  }
  // Obtention des catégories en fonction du type d'élément
  const getCategoriesForItemType = () => {
    switch (itemType) {
      case 'income':
        return incomeCategories
      case 'expense':
        return expenseCategories
      case 'saving':
        return [
          {
            id: 'savings',
            name: 'Épargne',
            icon: <PiggyBankIcon className="h-5 w-5" />,
          },
        ]
      case 'debt':
        return [
          {
            id: 'debt',
            name: 'Dette',
            icon: <CreditCardIcon className="h-5 w-5" />,
          },
        ]
      default:
        return []
    }
  }
  // Obtention de l'icône pour une catégorie
  const getCategoryIcon = (categoryId: string) => {
    const categories = getCategoriesForItemType()
    const category = categories.find((cat) => cat.id === categoryId)
    return category?.icon || <InfoIcon className="h-5 w-5" />
  }
  // Rendu du résumé financier
  const renderFinancialSummary = () => {
    const totalIncome =
      financialData.incomes?.reduce(
        (sum, item) => sum + Number(item.value),
        0,
      ) || 0
    const totalExpenses =
      financialData.expenses?.reduce(
        (sum, item) => sum + Number(item.value),
        0,
      ) || 0
    const totalSavings =
      financialData.savings?.reduce(
        (sum, item) => sum + Number(item.value),
        0,
      ) || 0
    const totalDebts =
      financialData.debts?.reduce((sum, item) => sum + Number(item.value), 0) ||
      0
    const balance = totalIncome - totalExpenses
    const savingsRate = totalIncome > 0 ? (totalSavings / totalIncome) * 100 : 0
    return (
      <div className="space-y-4">
        <h3 className="text-lg font-medium mb-4">Résumé financier</h3>
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-black/20 p-4 rounded-lg">
            <div className="flex items-center mb-2">
              <BanknoteIcon className="h-5 w-5 text-green-400 mr-2" />
              <h4 className="font-medium">Revenus</h4>
            </div>
            <p className="text-xl font-bold">
              {totalIncome.toLocaleString('fr-FR')}€
            </p>
            <p className="text-xs text-gray-400 mt-1">
              {financialData.incomes?.length || 0} sources de revenus
            </p>
          </div>
          <div className="bg-black/20 p-4 rounded-lg">
            <div className="flex items-center mb-2">
              <CreditCardIcon className="h-5 w-5 text-red-400 mr-2" />
              <h4 className="font-medium">Dépenses</h4>
            </div>
            <p className="text-xl font-bold">
              {totalExpenses.toLocaleString('fr-FR')}€
            </p>
            <p className="text-xs text-gray-400 mt-1">
              {financialData.expenses?.length || 0} postes de dépenses
            </p>
          </div>
          <div className="bg-black/20 p-4 rounded-lg">
            <div className="flex items-center mb-2">
              <PiggyBankIcon className="h-5 w-5 text-blue-400 mr-2" />
              <h4 className="font-medium">Épargne</h4>
            </div>
            <p className="text-xl font-bold">
              {totalSavings.toLocaleString('fr-FR')}€
            </p>
            <p className="text-xs text-gray-400 mt-1">
              Taux d'épargne: {savingsRate.toFixed(1)}%
            </p>
          </div>
          <div className="bg-black/20 p-4 rounded-lg">
            <div className="flex items-center mb-2">
              <AlertTriangleIcon className="h-5 w-5 text-yellow-400 mr-2" />
              <h4 className="font-medium">Dettes</h4>
            </div>
            <p className="text-xl font-bold">
              {totalDebts.toLocaleString('fr-FR')}€
            </p>
            <p className="text-xs text-gray-400 mt-1">
              {financialData.debts?.length || 0} dettes en cours
            </p>
          </div>
        </div>
        <div
          className={`p-4 rounded-lg ${balance >= 0 ? 'bg-green-900/20 border border-green-500/30' : 'bg-red-900/20 border border-red-500/30'}`}
        >
          <div className="flex items-center justify-between mb-1">
            <h4 className="font-medium">Balance mensuelle</h4>
            <span className={balance >= 0 ? 'text-green-400' : 'text-red-400'}>
              {balance >= 0 ? '+' : ''}
              {balance.toLocaleString('fr-FR')}€
            </span>
          </div>
          <p className="text-sm text-gray-300">
            {balance >= 0
              ? 'Votre budget est équilibré. Bravo !'
              : 'Vos dépenses dépassent vos revenus. Attention.'}
          </p>
        </div>
      </div>
    )
  }
  // Rendu du résumé émotionnel
  const renderEmotionalSummary = () => {
    const getMoodDescription = () => {
      const mood = emotionalContext.mood || 3
      if (mood <= 2)
        return 'Vous semblez préoccupé(e) par votre situation financière.'
      if (mood === 3)
        return 'Vous avez une vision neutre de votre situation financière.'
      return 'Vous semblez confiant(e) concernant votre situation financière.'
    }
    return (
      <div className="space-y-4">
        <h3 className="text-lg font-medium mb-4">Résumé émotionnel</h3>
        <div className="bg-black/20 p-4 rounded-lg">
          <div className="flex items-center mb-2">
            {emotionOptions.find(
              (option) => option.value === emotionalContext.mood,
            )?.icon || <MehIcon className="h-5 w-5 text-yellow-400 mr-2" />}
            <h4 className="font-medium">Votre humeur financière</h4>
          </div>
          <p className="text-sm text-gray-300 mb-2">{getMoodDescription()}</p>
          <div className="flex flex-wrap gap-2 mt-3">
            {emotionalContext.tags?.map((tag) => (
              <span
                key={tag}
                className="bg-indigo-500/20 text-indigo-300 px-2 py-1 rounded-full text-xs"
              >
                {tag}
              </span>
            ))}
            {!emotionalContext.tags?.length && (
              <span className="text-sm text-gray-400">
                Aucun tag émotionnel sélectionné
              </span>
            )}
          </div>
        </div>
      </div>
    )
  }
  // Rendu de la question initiale
  const renderQuestion = () => {
    return (
      <div className="bg-black/20 p-4 rounded-lg mb-6">
        <h3 className="text-lg font-medium mb-2">Votre question</h3>
        <p className="text-xl">
          {userQuestion || 'Comment optimiser mon budget mensuel ?'}
        </p>
      </div>
    )
  }
  // Rendu conditionnel des étapes
  const renderStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div>
            <h2 className="text-xl font-medium mb-6">
              Quel type d'information souhaitez-vous ajouter ?
            </h2>
            <div className="grid grid-cols-2 gap-4">
              <button
                className={`p-6 rounded-lg flex flex-col items-center justify-center transition-all ${itemType === 'income' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'bg-black/20 hover:bg-black/30'}`}
                onClick={() => {
                  setItemType('income')
                  goToNextStep()
                }}
                aria-label="Ajouter un revenu"
              >
                <BanknoteIcon className="h-10 w-10 mb-3" />
                <span className="text-lg font-medium">Revenus</span>
                <span className="text-sm text-gray-300 mt-1">
                  Salaire, freelance, etc.
                </span>
              </button>
              <button
                className={`p-6 rounded-lg flex flex-col items-center justify-center transition-all ${itemType === 'expense' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'bg-black/20 hover:bg-black/30'}`}
                onClick={() => {
                  setItemType('expense')
                  goToNextStep()
                }}
                aria-label="Ajouter une dépense"
              >
                <CreditCardIcon className="h-10 w-10 mb-3" />
                <span className="text-lg font-medium">Dépenses</span>
                <span className="text-sm text-gray-300 mt-1">
                  Loyer, courses, etc.
                </span>
              </button>
              <button
                className={`p-6 rounded-lg flex flex-col items-center justify-center transition-all ${itemType === 'saving' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'bg-black/20 hover:bg-black/30'}`}
                onClick={() => {
                  setItemType('saving')
                  goToNextStep()
                }}
                aria-label="Ajouter une épargne"
              >
                <PiggyBankIcon className="h-10 w-10 mb-3" />
                <span className="text-lg font-medium">Épargne</span>
                <span className="text-sm text-gray-300 mt-1">
                  Économies, placements
                </span>
              </button>
              <button
                className={`p-6 rounded-lg flex flex-col items-center justify-center transition-all ${itemType === 'debt' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'bg-black/20 hover:bg-black/30'}`}
                onClick={() => {
                  setItemType('debt')
                  goToNextStep()
                }}
                aria-label="Ajouter une dette"
              >
                <AlertTriangleIcon className="h-10 w-10 mb-3" />
                <span className="text-lg font-medium">Dettes</span>
                <span className="text-sm text-gray-300 mt-1">
                  Crédits, emprunts
                </span>
              </button>
            </div>
          </div>
        )
      case 2:
        return (
          <div>
            <h2 className="text-xl font-medium mb-6">
              {itemType === 'income'
                ? 'Ajoutez vos revenus'
                : itemType === 'expense'
                  ? 'Ajoutez vos dépenses'
                  : itemType === 'saving'
                    ? 'Ajoutez votre épargne'
                    : 'Ajoutez vos dettes'}
            </h2>
            <div className="space-y-4">
              <div>
                <label htmlFor="amount" className="block text-sm mb-1">
                  Montant mensuel (€)
                </label>
                <input
                  id="amount"
                  ref={valueInputRef}
                  type="number"
                  value={currentItem.value}
                  onChange={(e) => {
                    setCurrentItem({
                      ...currentItem,
                      value: e.target.value,
                    })
                    if (validationErrors.value) {
                      setValidationErrors({
                        ...validationErrors,
                        value: '',
                      })
                    }
                  }}
                  className={`w-full bg-black/20 border ${validationErrors.value ? 'border-red-500' : 'border-white/10'} rounded-lg py-3 px-4 text-white text-lg focus:outline-none focus:ring-2 focus:ring-indigo-500/50`}
                  placeholder="0"
                  aria-invalid={!!validationErrors.value}
                  aria-describedby={
                    validationErrors.value ? 'amount-error' : undefined
                  }
                />
                {validationErrors.value && (
                  <p id="amount-error" className="text-sm text-red-500 mt-1">
                    {validationErrors.value}
                  </p>
                )}
              </div>
              <div>
                <label htmlFor="category" className="block text-sm mb-1">
                  Catégorie
                </label>
                <div className="relative">
                  <select
                    id="category"
                    ref={categorySelectRef}
                    value={currentItem.category}
                    onChange={(e) => {
                      setCurrentItem({
                        ...currentItem,
                        category: e.target.value,
                        subcategory: '',
                      })
                      if (validationErrors.category) {
                        setValidationErrors({
                          ...validationErrors,
                          category: '',
                        })
                      }
                    }}
                    className={`w-full bg-black/20 border ${validationErrors.category ? 'border-red-500' : 'border-white/10'} rounded-lg py-3 px-4 text-white appearance-none focus:outline-none focus:ring-2 focus:ring-indigo-500/50`}
                    aria-invalid={!!validationErrors.category}
                    aria-describedby={
                      validationErrors.category ? 'category-error' : undefined
                    }
                  >
                    <option value="">Sélectionner une catégorie</option>
                    {getCategoriesForItemType().map((category) => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                    <svg
                      className="fill-current h-4 w-4"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                    >
                      <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                    </svg>
                  </div>
                </div>
                {validationErrors.category && (
                  <p id="category-error" className="text-sm text-red-500 mt-1">
                    {validationErrors.category}
                  </p>
                )}
              </div>
              {currentItem.category &&
                (() => {
                  const selectedCategory = getCategoriesForItemType().find(
                    (cat) => cat.id === currentItem.category,
                  )
                  if (selectedCategory?.subcategories?.length) {
                    return (
                      <div>
                        <label
                          htmlFor="subcategory"
                          className="block text-sm mb-1"
                        >
                          Sous-catégorie
                        </label>
                        <div className="relative">
                          <select
                            id="subcategory"
                            value={currentItem.subcategory}
                            onChange={(e) =>
                              setCurrentItem({
                                ...currentItem,
                                subcategory: e.target.value,
                              })
                            }
                            className="w-full bg-black/20 border border-white/10 rounded-lg py-3 px-4 text-white appearance-none focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                          >
                            <option value="">
                              Sélectionner une sous-catégorie
                            </option>
                            {selectedCategory.subcategories.map((sub) => (
                              <option key={sub} value={sub}>
                                {sub}
                              </option>
                            ))}
                          </select>
                          <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                            <svg
                              className="fill-current h-4 w-4"
                              xmlns="http://www.w3.org/2000/svg"
                              viewBox="0 0 20 20"
                            >
                              <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                            </svg>
                          </div>
                        </div>
                      </div>
                    )
                  }
                  return null
                })()}
              <div>
                <label htmlFor="frequency" className="block text-sm mb-1">
                  Fréquence
                </label>
                <div className="relative">
                  <select
                    id="frequency"
                    value={currentItem.frequency}
                    onChange={(e) =>
                      setCurrentItem({
                        ...currentItem,
                        frequency: e.target.value as any,
                      })
                    }
                    className="w-full bg-black/20 border border-white/10 rounded-lg py-3 px-4 text-white appearance-none focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                  >
                    <option value="daily">Quotidien</option>
                    <option value="weekly">Hebdomadaire</option>
                    <option value="monthly">Mensuel</option>
                    <option value="quarterly">Trimestriel</option>
                    <option value="yearly">Annuel</option>
                    <option value="once">Ponctuel</option>
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                    <svg
                      className="fill-current h-4 w-4"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                    >
                      <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                    </svg>
                  </div>
                </div>
              </div>
              <div>
                <label htmlFor="description" className="block text-sm mb-1">
                  Description (optionnel)
                </label>
                <input
                  id="description"
                  type="text"
                  value={currentItem.description}
                  onChange={(e) =>
                    setCurrentItem({
                      ...currentItem,
                      description: e.target.value,
                    })
                  }
                  className="w-full bg-black/20 border border-white/10 rounded-lg py-3 px-4 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                  placeholder="Description de cet élément..."
                />
              </div>
              <div>
                <label htmlFor="tags" className="block text-sm mb-1">
                  Tags (optionnel)
                </label>
                <div className="flex space-x-2">
                  <input
                    id="tags"
                    type="text"
                    value={tagInput}
                    onChange={(e) => setTagInput(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && tagInput.trim()) {
                        e.preventDefault()
                        handleTagAdd(tagInput.trim())
                      }
                    }}
                    className="flex-1 bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500/50"
                    placeholder="Ajouter un tag..."
                  />
                  <button
                    type="button"
                    onClick={() => handleTagAdd(tagInput.trim())}
                    disabled={!tagInput.trim()}
                    className="py-2 px-4 bg-indigo-600 hover:bg-indigo-700 disabled:opacity-50 rounded-lg"
                  >
                    Ajouter
                  </button>
                </div>
                <div className="flex flex-wrap gap-2 mt-3">
                  {currentItem.tags?.map((tag) => (
                    <span
                      key={tag}
                      className="bg-indigo-500/20 text-indigo-300 px-2 py-1 rounded-full text-xs flex items-center"
                    >
                      {tag}
                      <button
                        type="button"
                        onClick={() => handleTagRemove(tag)}
                        className="ml-1 hover:text-white"
                        aria-label={`Supprimer le tag ${tag}`}
                      >
                        ×
                      </button>
                    </span>
                  ))}
                </div>
                <div className="mt-3">
                  <p className="text-xs text-gray-400 mb-1">Tags suggérés :</p>
                  <div className="flex flex-wrap gap-2">
                    {suggestedTags.map((tag) => (
                      <button
                        key={tag}
                        type="button"
                        onClick={() => handleTagAdd(tag)}
                        className="bg-black/30 hover:bg-black/40 px-2 py-1 rounded-full text-xs"
                      >
                        {tag}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
              <div className="pt-4 flex space-x-3">
                <button
                  type="button"
                  onClick={addFinancialItem}
                  className={`flex-1 py-3 rounded-lg bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white flex items-center justify-center`}
                >
                  <CheckCircleIcon className="h-5 w-5 mr-2" />
                  Ajouter cet élément
                </button>
                <button
                  type="button"
                  onClick={goToNextStep}
                  className="py-3 px-4 bg-black/30 hover:bg-black/40 rounded-lg flex items-center justify-center"
                >
                  Passer
                </button>
              </div>
            </div>
          </div>
        )
      case 3:
        return (
          <div>
            <h2 className="text-xl font-medium mb-6">
              Données financières ajoutées
            </h2>
            <div className="space-y-6">
              {/* Affichage des données par catégorie */}
              {['income', 'expense', 'saving', 'debt'].map((type) => {
                const items = financialData[type + 's'] || []
                if (items.length === 0) return null
                return (
                  <div key={type} className="space-y-3">
                    <h3 className="text-lg font-medium flex items-center">
                      {type === 'income' ? (
                        <BanknoteIcon className="h-5 w-5 mr-2 text-green-400" />
                      ) : type === 'expense' ? (
                        <CreditCardIcon className="h-5 w-5 mr-2 text-red-400" />
                      ) : type === 'saving' ? (
                        <PiggyBankIcon className="h-5 w-5 mr-2 text-blue-400" />
                      ) : (
                        <AlertTriangleIcon className="h-5 w-5 mr-2 text-yellow-400" />
                      )}
                      {type === 'income'
                        ? 'Revenus'
                        : type === 'expense'
                          ? 'Dépenses'
                          : type === 'saving'
                            ? 'Épargne'
                            : 'Dettes'}
                    </h3>
                    <div className="space-y-2">
                      {items.map((item, index) => (
                        <div
                          key={index}
                          className="bg-black/20 p-3 rounded-lg flex items-center justify-between"
                        >
                          <div className="flex items-center">
                            {item.category && getCategoryIcon(item.category)}
                            <div className="ml-3">
                              <div className="font-medium">
                                {item.category &&
                                  getCategoriesForItemType().find(
                                    (cat) => cat.id === item.category,
                                  )?.name}
                                {item.subcategory && ` - ${item.subcategory}`}
                              </div>
                              {item.description && (
                                <div className="text-sm text-gray-400">
                                  {item.description}
                                </div>
                              )}
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="font-bold">
                              {Number(item.value).toLocaleString('fr-FR')}€
                            </div>
                            <div className="text-xs text-gray-400">
                              {item.frequency === 'daily'
                                ? 'par jour'
                                : item.frequency === 'weekly'
                                  ? 'par semaine'
                                  : item.frequency === 'monthly'
                                    ? 'par mois'
                                    : item.frequency === 'quarterly'
                                      ? 'par trimestre'
                                      : item.frequency === 'yearly'
                                        ? 'par an'
                                        : 'ponctuel'}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )
              })}
              <div className="pt-4">
                <button
                  type="button"
                  onClick={() => {
                    setStep(1)
                  }}
                  className="w-full py-3 bg-black/20 hover:bg-black/30 rounded-lg flex items-center justify-center"
                >
                  Ajouter plus d'éléments
                </button>
              </div>
            </div>
          </div>
        )
      case 4:
        return (
          <div>
            <h2 className="text-xl font-medium mb-6">
              Comment vous sentez-vous par rapport à votre situation financière
              ?
            </h2>
            <div className="space-y-6">
              <div>
                <label htmlFor="mood" className="block text-sm mb-3">
                  Niveau de confiance
                </label>
                <div className="flex justify-between mb-2">
                  {emotionOptions.map((option) => (
                    <div
                      key={option.value}
                      className="flex flex-col items-center"
                    >
                      <button
                        type="button"
                        onClick={() => handleEmotionChange(option.value)}
                        className={`p-2 rounded-full transition-all ${emotionalContext.mood === option.value ? 'bg-indigo-500 text-white' : 'bg-black/20 hover:bg-black/30'}`}
                        aria-label={option.label}
                      >
                        {option.icon}
                      </button>
                    </div>
                  ))}
                </div>
                <input
                  id="mood"
                  ref={emotionSliderRef}
                  type="range"
                  min="1"
                  max="5"
                  step="1"
                  value={emotionalContext.mood || 3}
                  onChange={(e) => handleEmotionChange(Number(e.target.value))}
                  className="w-full"
                  aria-label="Niveau de confiance financière"
                  aria-valuemin={1}
                  aria-valuemax={5}
                  aria-valuenow={emotionalContext.mood || 3}
                  aria-valuetext={
                    emotionOptions.find(
                      (opt) => opt.value === (emotionalContext.mood || 3),
                    )?.label
                  }
                />
                <div className="flex justify-between text-xs text-gray-400">
                  <span>Très préoccupé(e)</span>
                  <span>Très confiant(e)</span>
                </div>
              </div>
              <div>
                <label className="block text-sm mb-3">
                  Comment décririez-vous votre état d'esprit ? (sélectionnez
                  tout ce qui s'applique)
                </label>
                <div className="flex flex-wrap gap-2">
                  {emotionalTags.map((tag) => (
                    <button
                      key={tag}
                      type="button"
                      onClick={() => handleEmotionalTagToggle(tag)}
                      className={`px-3 py-2 rounded-lg text-sm transition-all ${emotionalContext.tags?.includes(tag) ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'bg-black/20 hover:bg-black/30'}`}
                    >
                      {tag}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )
      case 5:
        return (
          <div>
            <h2 className="text-xl font-medium mb-6">
              Résumé de votre situation
            </h2>
            {renderQuestion()}
            <div className="space-y-6">
              {renderFinancialSummary()}
              {renderEmotionalSummary()}
            </div>
          </div>
        )
      default:
        return null
    }
  }
  return (
    <motion.div
      className="w-full max-w-2xl mx-auto"
      initial={{
        opacity: 0,
      }}
      animate={{
        opacity: 1,
      }}
      transition={{
        duration: 0.5,
      }}
    >
      {/* Étape actuelle */}
      <div className="mb-6 flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">
            <span
              className={`text-transparent bg-clip-text bg-gradient-to-r ${themeColors.primary}`}
            >
              Cartographie
            </span>{' '}
            de votre situation
          </h1>
          <p className="text-lg text-gray-300 mt-2">Étape {step} sur 5</p>
        </div>
        <div className="flex space-x-1">
          {[1, 2, 3, 4, 5].map((s) => (
            <div
              key={s}
              className={`w-3 h-3 rounded-full ${s === step ? `bg-gradient-to-r ${themeColors.primary}` : 'bg-gray-600'}`}
            ></div>
          ))}
        </div>
      </div>
      {/* Contenu principal */}
      <GlassCard className="p-8 mb-8" animate>
        {renderStepContent()}
      </GlassCard>
      {/* Boutons de navigation */}
      <div className="flex justify-between">
        <button
          onClick={goToPreviousStep}
          className="bg-black/30 hover:bg-black/40 text-white px-6 py-3 rounded-xl flex items-center transition-all duration-300 text-lg font-medium"
          aria-label="Retour à l'étape précédente"
        >
          <ArrowLeftIcon className="mr-2 h-5 w-5" />
          Retour
        </button>
        {step === 5 && (
          <button
            onClick={handleContinue}
            disabled={isLoading}
            className={`bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white px-6 py-3 rounded-xl flex items-center transition-all duration-300 text-lg font-medium shadow-lg`}
            aria-label="Continuer vers l'analyse"
          >
            {isLoading ? (
              <>
                <div className="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                Analyse en cours...
              </>
            ) : (
              <>
                Continuer
                <ArrowRightIcon className="ml-2 h-5 w-5" />
              </>
            )}
          </button>
        )}
        {step !== 5 && (
          <button
            onClick={goToNextStep}
            className={`bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white px-6 py-3 rounded-xl flex items-center transition-all duration-300 text-lg font-medium shadow-lg`}
            aria-label="Passer à l'étape suivante"
          >
            Suivant
            <ArrowRightIcon className="ml-2 h-5 w-5" />
          </button>
        )}
      </div>
    </motion.div>
  )
}

```
```components/RevealScreen.tsx
import React, { useEffect, useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { useFinance } from '../context/FinanceContext'
import { useFinanceStore } from '../stores/financeStore'
import { RevealAnimation } from './ui/RevealAnimation'
import {
  ArrowRightIcon,
  ArrowLeftIcon,
  DownloadIcon,
  ShareIcon,
  BookmarkIcon,
  CheckCircleIcon,
  LightbulbIcon,
  LineChartIcon,
  TrendingUpIcon,
  TrendingDownIcon,
  AlertCircleIcon,
  PiggyBankIcon,
  BarChart3Icon,
  CircleDollarSignIcon,
  InfoIcon,
  TargetIcon,
  ClipboardIcon,
  PrinterIcon,
} from 'lucide-react'
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from 'recharts'
import { FinancialInsight } from '../types/finance'
import { toast, Toaster } from 'react-hot-toast'
export function RevealScreen() {
  const navigate = useNavigate()
  const { themeColors } = useTheme()
  const {
    userQuestion,
    financialData,
    emotionalContext,
    calculateTotalIncome,
    calculateTotalExpenses,
    calculateNetWorth,
    generateInsights,
  } = useFinance()
  // États
  const [insights, setInsights] = useState<FinancialInsight[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [showAnimation, setShowAnimation] = useState(true)
  const [analysisComplete, setAnalysisComplete] = useState(false)
  const [currentSection, setCurrentSection] = useState(0)
  // Sections de l'analyse
  const sections = [
    {
      id: 'summary',
      title: 'Résumé',
    },
    {
      id: 'insights',
      title: 'Insights',
    },
    {
      id: 'recommendations',
      title: 'Recommandations',
    },
    {
      id: 'next-steps',
      title: 'Prochaines étapes',
    },
  ]
  // Calcul des métriques clés
  const totalIncome = calculateTotalIncome()
  const totalExpenses = calculateTotalExpenses()
  const balance = totalIncome - totalExpenses
  const savingsRate =
    totalIncome > 0 ? ((totalIncome - totalExpenses) / totalIncome) * 100 : 0
  const netWorth = calculateNetWorth()
  // Chargement des données au montage du composant
  useEffect(() => {
    const loadInsights = async () => {
      try {
        const fetchedInsights = await generateInsights()
        setInsights(fetchedInsights)
        // Simuler un temps de traitement pour l'animation
        setTimeout(() => {
          setShowAnimation(false)
          setIsLoading(false)
          setAnalysisComplete(true)
        }, 3000)
      } catch (error) {
        console.error('Erreur lors du chargement des insights:', error)
        setShowAnimation(false)
        setIsLoading(false)
      }
    }
    loadInsights()
  }, [])
  // Préparation des données pour les graphiques
  const expensesByCategory =
    financialData?.expenses?.reduce(
      (acc, item) => {
        const category = item.category
        const value =
          typeof item.value === 'number'
            ? item.value
            : parseFloat(item.value as string) || 0
        if (acc[category]) {
          acc[category] += value
        } else {
          acc[category] = value
        }
        return acc
      },
      {} as Record<string, number>,
    ) || {}
  const pieChartData = Object.entries(expensesByCategory).map(
    ([name, value]) => ({
      name,
      value,
    }),
  )
  // Données pour le graphique de tendance
  const trendData = [
    {
      month: 'Jan',
      income: totalIncome * 0.95,
      expenses: totalExpenses * 0.98,
    },
    {
      month: 'Fév',
      income: totalIncome * 0.97,
      expenses: totalExpenses * 0.99,
    },
    {
      month: 'Mar',
      income: totalIncome * 0.98,
      expenses: totalExpenses * 1.02,
    },
    {
      month: 'Avr',
      income: totalIncome * 1.0,
      expenses: totalExpenses * 1.01,
    },
    {
      month: 'Mai',
      income: totalIncome * 1.02,
      expenses: totalExpenses * 0.99,
    },
    {
      month: 'Juin',
      income: totalIncome * 1.03,
      expenses: totalExpenses * 0.97,
    },
  ]
  // Couleurs pour les graphiques
  const COLORS = themeColors?.chartColors || [
    '#8884d8',
    '#82ca9d',
    '#ffc658',
    '#ff8042',
    '#0088fe',
  ]
  // Copier le rapport dans le presse-papier
  const copyReport = () => {
    const reportText = `
      Analyse Financière - ${new Date().toLocaleDateString()}
      Question: ${userQuestion}
      Résumé financier:
      - Revenus mensuels: ${totalIncome}€
      - Dépenses mensuelles: ${totalExpenses}€
      - Balance: ${balance}€
      - Taux d'épargne: ${savingsRate.toFixed(1)}%
      Insights clés:
      ${insights.map((insight) => `- ${insight.title}: ${insight.description}`).join('\n')}
      Recommandations:
      ${insights.map((insight) => `- ${insight.action}`).join('\n')}
    `
    navigator.clipboard.writeText(reportText)
    toast.success('Rapport copié dans le presse-papier')
  }
  // Partager le rapport
  const shareReport = () => {
    if (navigator.share) {
      navigator
        .share({
          title: 'Mon analyse financière',
          text: `Voici mon analyse financière basée sur la question: ${userQuestion}`,
        })
        .catch((err) => console.error('Erreur lors du partage:', err))
    } else {
      toast('Fonction de partage non disponible sur votre appareil', {
        icon: '⚠️',
      })
    }
  }
  // Naviguer vers une autre section
  const navigateToSection = (index: number) => {
    if (index >= 0 && index < sections.length) {
      setCurrentSection(index)
    }
  }
  // Rendu conditionnel du contenu
  const renderContent = () => {
    if (showAnimation) {
      return (
        <div className="flex flex-col items-center justify-center py-12">
          <RevealAnimation />
          <div className="text-center mt-8">
            <h2 className="text-2xl font-bold mb-4">Analyse en cours...</h2>
            <p className="text-gray-300">
              Nous analysons votre situation financière en profondeur
            </p>
          </div>
        </div>
      )
    }
    if (isLoading) {
      return (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin h-12 w-12 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
        </div>
      )
    }
    // Contenu en fonction de la section actuelle
    switch (sections[currentSection].id) {
      case 'summary':
        return renderSummary()
      case 'insights':
        return renderInsights()
      case 'recommendations':
        return renderRecommendations()
      case 'next-steps':
        return renderNextSteps()
      default:
        return renderSummary()
    }
  }
  // Rendu de la section Résumé
  const renderSummary = () => (
    <div className="space-y-6">
      <div className="bg-black/20 p-4 rounded-lg">
        <h3 className="text-xl font-medium mb-3">Votre question</h3>
        <p className="text-lg">{userQuestion}</p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <GlassCard className="p-4">
          <h3 className="font-medium mb-4 flex items-center">
            <CircleDollarSignIcon className="h-5 w-5 mr-2 text-green-400" />
            Résumé financier
          </h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
              <div className="flex items-center">
                <TrendingUpIcon className="h-5 w-5 mr-2 text-green-400" />
                <span>Revenus mensuels</span>
              </div>
              <span className="font-bold">
                {totalIncome.toLocaleString('fr-FR')}€
              </span>
            </div>
            <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
              <div className="flex items-center">
                <TrendingDownIcon className="h-5 w-5 mr-2 text-red-400" />
                <span>Dépenses mensuelles</span>
              </div>
              <span className="font-bold">
                {totalExpenses.toLocaleString('fr-FR')}€
              </span>
            </div>
            <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
              <div className="flex items-center">
                <PiggyBankIcon className="h-5 w-5 mr-2 text-blue-400" />
                <span>Balance mensuelle</span>
              </div>
              <span
                className={`font-bold ${balance >= 0 ? 'text-green-400' : 'text-red-400'}`}
              >
                {balance.toLocaleString('fr-FR')}€
              </span>
            </div>
            <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
              <div className="flex items-center">
                <BarChart3Icon className="h-5 w-5 mr-2 text-purple-400" />
                <span>Taux d'épargne</span>
              </div>
              <span className="font-bold">{savingsRate.toFixed(1)}%</span>
            </div>
          </div>
        </GlassCard>
        <GlassCard className="p-4">
          <h3 className="font-medium mb-4 flex items-center">
            <PieChart className="h-5 w-5 mr-2 text-yellow-400" />
            Répartition des dépenses
          </h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={pieChartData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) =>
                    `${name} ${(percent * 100).toFixed(0)}%`
                  }
                >
                  {pieChartData.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip
                  formatter={(value) => [
                    `${value.toLocaleString('fr-FR')}€`,
                    'Montant',
                  ]}
                  contentStyle={{
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    border: '1px solid rgba(255, 255, 255, 0.1)',
                    borderRadius: '8px',
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </GlassCard>
      </div>
      <GlassCard className="p-4">
        <h3 className="font-medium mb-4 flex items-center">
          <LineChartIcon className="h-5 w-5 mr-2 text-blue-400" />
          Tendances sur 6 mois
        </h3>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={trendData}
              margin={{
                top: 5,
                right: 30,
                left: 20,
                bottom: 5,
              }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="#444" />
              <XAxis dataKey="month" stroke="#aaa" />
              <YAxis stroke="#aaa" />
              <Tooltip
                formatter={(value) => [`${value.toLocaleString('fr-FR')}€`, '']}
                contentStyle={{
                  backgroundColor: 'rgba(0, 0, 0, 0.8)',
                  border: '1px solid rgba(255, 255, 255, 0.1)',
                  borderRadius: '8px',
                }}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="income"
                name="Revenus"
                stroke="#8884d8"
                activeDot={{
                  r: 8,
                }}
              />
              <Line
                type="monotone"
                dataKey="expenses"
                name="Dépenses"
                stroke="#82ca9d"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </GlassCard>
    </div>
  )
  // Rendu de la section Insights
  const renderInsights = () => (
    <div className="space-y-6">
      <h3 className="text-xl font-medium mb-4 flex items-center">
        <LightbulbIcon className="h-6 w-6 mr-2 text-yellow-400" />
        Insights financiers
      </h3>
      {insights.length > 0 ? (
        <div className="space-y-4">
          {insights.map((insight) => (
            <GlassCard
              key={insight.id}
              className={`p-4 ${insight.impact === 'high' ? 'border-l-4 border-red-500' : insight.impact === 'medium' ? 'border-l-4 border-yellow-500' : 'border-l-4 border-green-500'}`}
              animate
            >
              <div className="flex items-start">
                <div
                  className={`p-2 rounded-full mr-3 ${insight.impact === 'high' ? 'bg-red-500/20 text-red-400' : insight.impact === 'medium' ? 'bg-yellow-500/20 text-yellow-400' : 'bg-green-500/20 text-green-400'}`}
                >
                  {insight.impact === 'high' ? (
                    <AlertCircleIcon className="h-5 w-5" />
                  ) : insight.impact === 'medium' ? (
                    <InfoIcon className="h-5 w-5" />
                  ) : (
                    <CheckCircleIcon className="h-5 w-5" />
                  )}
                </div>
                <div>
                  <h4 className="text-lg font-medium mb-1">{insight.title}</h4>
                  <p className="text-gray-300 mb-2">{insight.description}</p>
                  <div className="flex items-center text-sm">
                    <span
                      className={`px-2 py-0.5 rounded-full text-xs ${insight.category === 'épargne' ? 'bg-blue-500/20 text-blue-300' : insight.category === 'dette' ? 'bg-red-500/20 text-red-300' : insight.category === 'investissement' ? 'bg-green-500/20 text-green-300' : 'bg-purple-500/20 text-purple-300'}`}
                    >
                      {insight.category}
                    </span>
                    <span className="ml-2 text-gray-400">
                      Impact:{' '}
                      <span
                        className={
                          insight.impact === 'high'
                            ? 'text-red-400'
                            : insight.impact === 'medium'
                              ? 'text-yellow-400'
                              : 'text-green-400'
                        }
                      >
                        {insight.impact === 'high'
                          ? 'Élevé'
                          : insight.impact === 'medium'
                            ? 'Moyen'
                            : 'Faible'}
                      </span>
                    </span>
                  </div>
                </div>
              </div>
            </GlassCard>
          ))}
        </div>
      ) : (
        <GlassCard className="p-6 text-center">
          <p className="text-gray-300">Aucun insight financier disponible</p>
        </GlassCard>
      )}
    </div>
  )
  // Rendu de la section Recommandations
  const renderRecommendations = () => (
    <div className="space-y-6">
      <h3 className="text-xl font-medium mb-4 flex items-center">
        <TargetIcon className="h-6 w-6 mr-2 text-green-400" />
        Recommandations personnalisées
      </h3>
      {insights.length > 0 ? (
        <div className="space-y-4">
          {insights.map(
            (insight, index) =>
              insight.action && (
                <GlassCard key={`rec-${index}`} className="p-4" animate>
                  <div className="flex items-start">
                    <div className="bg-indigo-500/20 p-2 rounded-full mr-3 text-indigo-400">
                      <CheckCircleIcon className="h-5 w-5" />
                    </div>
                    <div>
                      <h4 className="text-lg font-medium mb-1">
                        Action recommandée
                      </h4>
                      <p className="text-gray-300">{insight.action}</p>
                      <div className="mt-3 flex items-center">
                        <span
                          className={`px-2 py-0.5 rounded-full text-xs ${insight.category === 'épargne' ? 'bg-blue-500/20 text-blue-300' : insight.category === 'dette' ? 'bg-red-500/20 text-red-300' : insight.category === 'investissement' ? 'bg-green-500/20 text-green-300' : 'bg-purple-500/20 text-purple-300'}`}
                        >
                          {insight.category}
                        </span>
                        <span className="ml-auto text-xs bg-black/20 px-2 py-1 rounded-full">
                          Priorité:{' '}
                          <span
                            className={
                              insight.impact === 'high'
                                ? 'text-red-400'
                                : insight.impact === 'medium'
                                  ? 'text-yellow-400'
                                  : 'text-green-400'
                            }
                          >
                            {insight.impact === 'high'
                              ? 'Haute'
                              : insight.impact === 'medium'
                                ? 'Moyenne'
                                : 'Basse'}
                          </span>
                        </span>
                      </div>
                    </div>
                  </div>
                </GlassCard>
              ),
          )}
        </div>
      ) : (
        <GlassCard className="p-6 text-center">
          <p className="text-gray-300">Aucune recommandation disponible</p>
        </GlassCard>
      )}
      {/* Conseils généraux */}
      <GlassCard className="p-4">
        <h4 className="font-medium mb-3 flex items-center">
          <LightbulbIcon className="h-5 w-5 mr-2 text-yellow-400" />
          Conseils généraux
        </h4>
        <div className="space-y-3">
          <div className="p-3 bg-black/20 rounded-lg">
            <p className="text-sm">
              Essayez d'augmenter progressivement votre taux d'épargne de 1%
              chaque mois.
            </p>
          </div>
          <div className="p-3 bg-black/20 rounded-lg">
            <p className="text-sm">
              Révisez vos abonnements régulièrement et annulez ceux que vous
              n'utilisez pas.
            </p>
          </div>
          <div className="p-3 bg-black/20 rounded-lg">
            <p className="text-sm">
              Envisagez d'automatiser votre épargne pour éviter la tentation de
              dépenser.
            </p>
          </div>
        </div>
      </GlassCard>
    </div>
  )
  // Rendu de la section Prochaines étapes
  const renderNextSteps = () => (
    <div className="space-y-6">
      <h3 className="text-xl font-medium mb-4 flex items-center">
        <ArrowRightIcon className="h-6 w-6 mr-2 text-blue-400" />
        Prochaines étapes
      </h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <GlassCard className="p-4" animate>
          <div className="flex flex-col items-center text-center p-4">
            <div className="p-3 rounded-full bg-indigo-500/20 mb-3">
              <LineChartIcon className="h-8 w-8 text-indigo-400" />
            </div>
            <h4 className="text-lg font-medium mb-2">Simulation avancée</h4>
            <p className="text-gray-300 mb-4">
              Testez différents scénarios financiers pour optimiser votre
              stratégie.
            </p>
            <button
              onClick={() => navigate('/simulation')}
              className={`py-2 px-4 rounded bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white flex items-center`}
            >
              Accéder aux simulations
              <ArrowRightIcon className="ml-2 h-4 w-4" />
            </button>
          </div>
        </GlassCard>
        <GlassCard className="p-4" animate>
          <div className="flex flex-col items-center text-center p-4">
            <div className="p-3 rounded-full bg-green-500/20 mb-3">
              <BarChart3Icon className="h-8 w-8 text-green-400" />
            </div>
            <h4 className="text-lg font-medium mb-2">Rapports détaillés</h4>
            <p className="text-gray-300 mb-4">
              Explorez des analyses approfondies de votre situation financière.
            </p>
            <button
              onClick={() => navigate('/reports')}
              className={`py-2 px-4 rounded bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white flex items-center`}
            >
              Voir les rapports
              <ArrowRightIcon className="ml-2 h-4 w-4" />
            </button>
          </div>
        </GlassCard>
      </div>
      <GlassCard className="p-4">
        <h4 className="font-medium mb-3">Actions rapides</h4>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
          <button
            onClick={copyReport}
            className="bg-black/20 hover:bg-black/30 p-3 rounded-lg flex items-center justify-center"
          >
            <ClipboardIcon className="h-5 w-5 mr-2" />
            Copier le rapport
          </button>
          <button
            onClick={() => toast.success('Rapport enregistré')}
            className="bg-black/20 hover:bg-black/30 p-3 rounded-lg flex items-center justify-center"
          >
            <BookmarkIcon className="h-5 w-5 mr-2" />
            Enregistrer
          </button>
          <button
            onClick={() => window.print()}
            className="bg-black/20 hover:bg-black/30 p-3 rounded-lg flex items-center justify-center"
          >
            <PrinterIcon className="h-5 w-5 mr-2" />
            Imprimer
          </button>
        </div>
      </GlassCard>
      <GlassCard className="p-4">
        <div className="flex items-center justify-between">
          <h4 className="font-medium">Revenir au tableau de bord</h4>
          <button
            onClick={() => navigate('/dashboard')}
            className={`py-2 px-4 rounded bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white flex items-center`}
          >
            Tableau de bord
            <ArrowRightIcon className="ml-2 h-4 w-4" />
          </button>
        </div>
      </GlassCard>
    </div>
  )
  return (
    <div className="w-full max-w-4xl mx-auto pb-20">
      <Toaster position="top-right" />
      {/* Animation de révélation */}
      {showAnimation && <RevealAnimation />}
      {/* En-tête */}
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <h1 className="text-3xl font-bold">
          <span
            className={`text-transparent bg-clip-text bg-gradient-to-r ${themeColors.primary}`}
          >
            Analyse
          </span>{' '}
          de votre situation
        </h1>
        <p className="text-lg text-gray-300 mt-2">
          Voici notre analyse détaillée basée sur votre question
        </p>
      </motion.div>
      {/* Navigation entre les sections */}
      {analysisComplete && (
        <div className="bg-black/20 p-1 rounded-full flex mb-6">
          {sections.map((section, index) => (
            <button
              key={section.id}
              onClick={() => navigateToSection(index)}
              className={`flex-1 py-2 rounded-full text-sm ${currentSection === index ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'hover:bg-black/20'}`}
            >
              {section.title}
            </button>
          ))}
        </div>
      )}
      {/* Contenu principal */}
      <motion.div
        key={currentSection}
        initial={{
          opacity: 0,
        }}
        animate={{
          opacity: 1,
        }}
        transition={{
          duration: 0.3,
        }}
      >
        {renderContent()}
      </motion.div>
      {/* Boutons de navigation */}
      {analysisComplete && (
        <div className="flex justify-between mt-8">
          <button
            onClick={() => navigateToSection(Math.max(0, currentSection - 1))}
            disabled={currentSection === 0}
            className={`bg-black/30 hover:bg-black/40 text-white px-4 py-2 rounded-lg flex items-center ${currentSection === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            <ArrowLeftIcon className="mr-2 h-5 w-5" />
            Section précédente
          </button>
          {currentSection < sections.length - 1 ? (
            <button
              onClick={() => navigateToSection(currentSection + 1)}
              className={`bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white px-4 py-2 rounded-lg flex items-center`}
            >
              Section suivante
              <ArrowRightIcon className="ml-2 h-5 w-5" />
            </button>
          ) : (
            <button
              onClick={() => navigate('/dashboard')}
              className={`bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white px-4 py-2 rounded-lg flex items-center`}
            >
              Tableau de bord
              <ArrowRightIcon className="ml-2 h-5 w-5" />
            </button>
          )}
        </div>
      )}
    </div>
  )
}

```
```components/ui/RevealAnimation.tsx
import React, { useEffect, useRef } from 'react'
export function RevealAnimation() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return
    // Set canvas size
    const setCanvasSize = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
    }
    setCanvasSize()
    // Particle properties
    const particles: {
      x: number
      y: number
      size: number
      speedX: number
      speedY: number
      color: string
      alpha: number
      rotation: number
      rotationSpeed: number
    }[] = []
    const colors = ['#4361ee', '#3a0ca3', '#7209b7', '#f72585', '#4cc9f0']
    // Create particles
    const createParticles = () => {
      const centerX = canvas.width / 2
      const centerY = canvas.height / 2
      for (let i = 0; i < 150; i++) {
        const size = Math.random() * 6 + 1
        const speedX = (Math.random() - 0.5) * 10
        const speedY = (Math.random() - 0.5) * 10
        const color = colors[Math.floor(Math.random() * colors.length)]
        const rotation = Math.random() * Math.PI * 2
        const rotationSpeed = (Math.random() - 0.5) * 0.05
        particles.push({
          x: centerX,
          y: centerY,
          size,
          speedX,
          speedY,
          color,
          alpha: 1,
          rotation,
          rotationSpeed,
        })
      }
    }
    // Update particles
    const updateParticles = () => {
      for (let i = 0; i < particles.length; i++) {
        const p = particles[i]
        p.x += p.speedX
        p.y += p.speedY
        p.rotation += p.rotationSpeed
        // Gradually slow down
        p.speedX *= 0.99
        p.speedY *= 0.99
        // Fade out
        p.alpha -= 0.01
        // Remove faded particles
        if (p.alpha <= 0) {
          particles.splice(i, 1)
          i--
        }
      }
    }
    // Draw particles with various shapes
    const drawParticles = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      for (const p of particles) {
        ctx.save()
        ctx.globalAlpha = p.alpha
        ctx.fillStyle = p.color
        ctx.translate(p.x, p.y)
        ctx.rotate(p.rotation)
        // Draw different shapes based on particle properties
        const shapeType = Math.floor(p.size) % 4
        switch (shapeType) {
          case 0:
            // Circle
            ctx.beginPath()
            ctx.arc(0, 0, p.size, 0, Math.PI * 2)
            ctx.fill()
            break
          case 1:
            // Square
            ctx.fillRect(-p.size, -p.size, p.size * 2, p.size * 2)
            break
          case 2:
            // Triangle
            ctx.beginPath()
            ctx.moveTo(0, -p.size)
            ctx.lineTo(p.size, p.size)
            ctx.lineTo(-p.size, p.size)
            ctx.closePath()
            ctx.fill()
            break
          case 3:
            // Star
            drawStar(ctx, 0, 0, 5, p.size, p.size / 2)
            ctx.fill()
            break
        }
        ctx.restore()
      }
    }
    // Helper function to draw a star
    const drawStar = (
      ctx: CanvasRenderingContext2D,
      x: number,
      y: number,
      points: number,
      outer: number,
      inner: number,
    ) => {
      ctx.beginPath()
      for (let i = 0; i < points * 2; i++) {
        const radius = i % 2 === 0 ? outer : inner
        const angle = (Math.PI * i) / points
        ctx.lineTo(x + radius * Math.sin(angle), y + radius * Math.cos(angle))
      }
      ctx.closePath()
    }
    // Animation loop with timing
    let lastTime = 0
    const animate = (timestamp: number) => {
      const deltaTime = timestamp - lastTime
      lastTime = timestamp
      // Only update every 16ms (approx 60fps)
      if (deltaTime > 16 || isNaN(deltaTime)) {
        updateParticles()
        drawParticles()
      }
      if (particles.length > 0) {
        requestAnimationFrame(animate)
      }
    }
    // Start animation
    createParticles()
    requestAnimationFrame(animate)
    // Handle window resize
    window.addEventListener('resize', setCanvasSize)
    return () => {
      window.removeEventListener('resize', setCanvasSize)
    }
  }, [])
  return (
    <canvas
      ref={canvasRef}
      className="fixed top-0 left-0 w-full h-full pointer-events-none z-20"
    />
  )
}

```
```context/FinanceContext.tsx
import React, { useEffect, useState, createContext, useContext } from 'react'
import { useFinanceStore } from '../stores/financeStore'
import {
  FinancialData,
  FinancialInsight,
  EmotionalContext,
  FinancialItem,
  FinancialHealth,
  SimulationResult,
} from '../types/finance'
// Interface pour le contexte
interface FinanceContextType {
  financialData: FinancialData
  setFinancialData: React.Dispatch<React.SetStateAction<FinancialData>>
  userQuestion: string
  setUserQuestion: React.Dispatch<React.SetStateAction<string>>
  emotionalContext: EmotionalContext
  setEmotionalContext: React.Dispatch<React.SetStateAction<EmotionalContext>>
  calculateTotalIncome: () => number
  calculateTotalExpenses: () => number
  calculateNetWorth: () => number
  generateInsights: () => Promise<FinancialInsight[]>
  runSimulation: (params: any) => Promise<SimulationResult>
  getFinancialHealth: () => Promise<FinancialHealth>
  detectHiddenFees: () => Promise<{
    totalAmount: number
    items: any[]
  }>
  getHistoricalData: () => Promise<any[]>
  getPredictions: () => Promise<any>
  getFinancialScore: () => Promise<number>
  refreshData: () => Promise<void>
  loading: boolean
}
// Valeurs par défaut pour le contexte
const defaultFinancialData: FinancialData = {
  incomes: [
    {
      id: 'income-1',
      category: 'salary',
      subcategory: '',
      value: 2800,
      frequency: 'monthly',
      description: 'Salaire principal',
      tags: ['fixe', 'récurrent'],
    },
    {
      id: 'income-2',
      category: 'freelance',
      subcategory: '',
      value: 500,
      frequency: 'monthly',
      description: 'Revenus freelance',
      tags: ['variable'],
    },
  ],
  expenses: [
    {
      id: 'expense-1',
      category: 'housing',
      subcategory: 'Loyer',
      value: 950,
      frequency: 'monthly',
      description: 'Loyer appartement',
      tags: ['fixe', 'essentiel'],
    },
    {
      id: 'expense-2',
      category: 'food',
      subcategory: 'Courses',
      value: 400,
      frequency: 'monthly',
      description: 'Courses alimentaires',
      tags: ['variable', 'essentiel'],
    },
    {
      id: 'expense-3',
      category: 'transportation',
      subcategory: 'Transports en commun',
      value: 75,
      frequency: 'monthly',
      description: 'Abonnement transport',
      tags: ['fixe', 'essentiel'],
    },
    {
      id: 'expense-4',
      category: 'leisure',
      subcategory: 'Abonnements',
      value: 50,
      frequency: 'monthly',
      description: 'Services streaming',
      tags: ['fixe', 'loisir'],
    },
  ],
  savings: [
    {
      id: 'saving-1',
      category: 'savings',
      subcategory: '',
      value: 300,
      frequency: 'monthly',
      description: 'Épargne de précaution',
      tags: ['épargne', 'sécurité'],
    },
  ],
  debts: [
    {
      id: 'debt-1',
      category: 'debt',
      subcategory: '',
      value: 200,
      frequency: 'monthly',
      description: 'Crédit étudiant',
      tags: ['dette', 'fixe'],
    },
  ],
  investments: [
    {
      id: 'investment-1',
      category: 'investment',
      subcategory: 'PEA',
      value: 100,
      frequency: 'monthly',
      description: 'Investissement PEA',
      tags: ['investissement', 'long terme'],
    },
  ],
}
const defaultEmotionalContext: EmotionalContext = {
  mood: 3,
  tags: ['curieux', 'motivé'],
}
// Création du contexte
const FinanceContext = createContext<FinanceContextType | undefined>(undefined)
// Hook personnalisé pour utiliser le contexte
export const useFinance = () => {
  const context = useContext(FinanceContext)
  if (!context) {
    throw new Error('useFinance doit être utilisé dans un FinanceProvider')
  }
  return context
}
// Composant Provider
export const FinanceProvider: React.FC<{
  children: React.ReactNode
}> = ({ children }) => {
  const [financialData, setFinancialData] =
    useState<FinancialData>(defaultFinancialData)
  const [userQuestion, setUserQuestion] = useState<string>(
    'Comment optimiser mon budget mensuel ?',
  )
  const [emotionalContext, setEmotionalContext] = useState<EmotionalContext>(
    defaultEmotionalContext,
  )
  const [loading, setLoading] = useState<boolean>(false)
  const { addFinancialSnapshot } = useFinanceStore()
  // Enregistrer un snapshot des données financières lors des changements
  useEffect(() => {
    addFinancialSnapshot({
      date: new Date().toISOString(),
      data: financialData,
    })
  }, [financialData, addFinancialSnapshot])
  // Calcul du revenu total
  const calculateTotalIncome = () => {
    return (
      financialData.incomes?.reduce((sum, income) => {
        const value =
          typeof income.value === 'number'
            ? income.value
            : parseFloat(income.value as string) || 0
        return sum + value
      }, 0) || 0
    )
  }
  // Calcul des dépenses totales
  const calculateTotalExpenses = () => {
    return (
      financialData.expenses?.reduce((sum, expense) => {
        const value =
          typeof expense.value === 'number'
            ? expense.value
            : parseFloat(expense.value as string) || 0
        return sum + value
      }, 0) || 0
    )
  }
  // Calcul de la valeur nette
  const calculateNetWorth = () => {
    const totalAssets =
      (financialData.savings?.reduce((sum, saving) => {
        const value =
          typeof saving.value === 'number'
            ? saving.value
            : parseFloat(saving.value as string) || 0
        return sum + value
      }, 0) || 0) +
      (financialData.investments?.reduce((sum, investment) => {
        const value =
          typeof investment.value === 'number'
            ? investment.value
            : parseFloat(investment.value as string) || 0
        return sum + value
      }, 0) || 0)
    const totalDebts =
      financialData.debts?.reduce((sum, debt) => {
        const value =
          typeof debt.value === 'number'
            ? debt.value
            : parseFloat(debt.value as string) || 0
        return sum + value
      }, 0) || 0
    return totalAssets - totalDebts
  }
  // Génération d'insights financiers
  const generateInsights = async (): Promise<FinancialInsight[]> => {
    setLoading(true)
    try {
      // Simuler un appel API avec un délai
      await new Promise((resolve) => setTimeout(resolve, 800))
      const totalIncome = calculateTotalIncome()
      const totalExpenses = calculateTotalExpenses()
      const balance = totalIncome - totalExpenses
      const savingsRate = totalIncome > 0 ? (balance / totalIncome) * 100 : 0
      const insights: FinancialInsight[] = []
      // Insight sur le taux d'épargne
      if (savingsRate < 10) {
        insights.push({
          id: 'insight-1',
          title: "Taux d'épargne faible",
          description:
            "Votre taux d'épargne est inférieur à 10%. Essayez d'augmenter votre épargne pour améliorer votre sécurité financière.",
          impact: 'high',
          category: 'épargne',
          action:
            "Réduire les dépenses non essentielles pour atteindre un taux d'épargne d'au moins 20%.",
        })
      } else if (savingsRate >= 10 && savingsRate < 20) {
        insights.push({
          id: 'insight-2',
          title: "Taux d'épargne correct mais améliorable",
          description:
            "Votre taux d'épargne est bon, mais pourrait être amélioré pour atteindre 20%.",
          impact: 'medium',
          category: 'épargne',
          action: 'Augmenter progressivement votre épargne de 2-3% par mois.',
        })
      } else {
        insights.push({
          id: 'insight-3',
          title: "Excellent taux d'épargne",
          description:
            "Votre taux d'épargne est supérieur à 20%. Continuez ainsi!",
          impact: 'low',
          category: 'épargne',
          action:
            "Envisagez d'investir davantage pour faire fructifier votre épargne.",
        })
      }
      // Insight sur les dépenses de logement
      const housingExpenses =
        financialData.expenses?.filter((e) => e.category === 'housing') || []
      const totalHousingExpense = housingExpenses.reduce((sum, expense) => {
        const value =
          typeof expense.value === 'number'
            ? expense.value
            : parseFloat(expense.value as string) || 0
        return sum + value
      }, 0)
      if (totalHousingExpense > totalIncome * 0.33) {
        insights.push({
          id: 'insight-4',
          title: 'Dépenses de logement élevées',
          description:
            "Vos dépenses de logement représentent plus d'un tiers de vos revenus.",
          impact: 'high',
          category: 'logement',
          action:
            'Envisagez de renégocier votre loyer ou de déménager vers un logement moins coûteux.',
        })
      }
      // Insight sur les dettes
      if (financialData.debts && financialData.debts.length > 0) {
        const totalDebtPayment = financialData.debts.reduce((sum, debt) => {
          const value =
            typeof debt.value === 'number'
              ? debt.value
              : parseFloat(debt.value as string) || 0
          return sum + value
        }, 0)
        if (totalDebtPayment > totalIncome * 0.2) {
          insights.push({
            id: 'insight-5',
            title: "Niveau d'endettement élevé",
            description:
              'Vos remboursements de dettes représentent plus de 20% de vos revenus.',
            impact: 'high',
            category: 'dette',
            action:
              "Concentrez-vous sur le remboursement des dettes à taux d'intérêt élevé.",
          })
        }
      }
      // Insight sur le fonds d'urgence
      const emergencySavings = financialData.savings?.find(
        (s) =>
          s.description?.toLowerCase().includes('urgence') ||
          s.description?.toLowerCase().includes('précaution'),
      )
      if (!emergencySavings) {
        insights.push({
          id: 'insight-6',
          title: "Pas de fonds d'urgence identifié",
          description: "Vous ne semblez pas avoir de fonds d'urgence dédié.",
          impact: 'medium',
          category: 'épargne',
          action: "Créez un fonds d'urgence équivalent à 3-6 mois de dépenses.",
        })
      }
      // Insight sur les investissements
      if (
        !financialData.investments ||
        financialData.investments.length === 0
      ) {
        insights.push({
          id: 'insight-7',
          title: "Absence d'investissements",
          description:
            "Vous ne semblez pas avoir d'investissements à long terme.",
          impact: 'medium',
          category: 'investissement',
          action:
            "Envisagez d'investir dans des placements à long terme pour faire fructifier votre épargne.",
        })
      }
      // Insight sur les loisirs
      const leisureExpenses =
        financialData.expenses?.filter((e) => e.category === 'leisure') || []
      const totalLeisureExpense = leisureExpenses.reduce((sum, expense) => {
        const value =
          typeof expense.value === 'number'
            ? expense.value
            : parseFloat(expense.value as string) || 0
        return sum + value
      }, 0)
      if (totalLeisureExpense > totalIncome * 0.15) {
        insights.push({
          id: 'insight-8',
          title: 'Dépenses de loisirs élevées',
          description:
            'Vos dépenses de loisirs représentent plus de 15% de vos revenus.',
          impact: 'medium',
          category: 'loisirs',
          action:
            'Réduisez vos dépenses de loisirs pour améliorer votre épargne.',
        })
      }
      return insights
    } catch (error) {
      console.error('Erreur lors de la génération des insights:', error)
      return []
    } finally {
      setLoading(false)
    }
  }
  // Exécution d'une simulation financière
  const runSimulation = async (params: any): Promise<SimulationResult> => {
    setLoading(true)
    try {
      // Simuler un appel API avec un délai
      await new Promise((resolve) => setTimeout(resolve, 1200))
      // Exemple de simulation simple
      const currentIncome = calculateTotalIncome()
      const currentExpenses = calculateTotalExpenses()
      const currentSavings = currentIncome - currentExpenses
      // Simuler 12 mois avec une croissance de revenu et des économies
      const monthlyData = []
      let cumulativeSavings = 0
      for (let i = 0; i < 12; i++) {
        const incomeGrowth = params?.incomeGrowth || 1.01 // 1% de croissance par défaut
        const expenseReduction = params?.expenseReduction || 0.995 // 0.5% de réduction par défaut
        const monthIncome = currentIncome * Math.pow(incomeGrowth, i)
        const monthExpenses = currentExpenses * Math.pow(expenseReduction, i)
        const monthSavings = monthIncome - monthExpenses
        cumulativeSavings += monthSavings
        monthlyData.push({
          month: i + 1,
          income: monthIncome,
          expenses: monthExpenses,
          savings: monthSavings,
          cumulativeSavings: cumulativeSavings,
        })
      }
      return {
        success: true,
        data: monthlyData,
        summary: {
          totalSavings: cumulativeSavings,
          averageMonthlySavings: cumulativeSavings / 12,
          projectedAnnualSavings: cumulativeSavings,
        },
      }
    } catch (error) {
      console.error('Erreur lors de la simulation:', error)
      return {
        success: false,
        error: 'Erreur lors de la simulation',
        data: [],
        summary: {
          totalSavings: 0,
          averageMonthlySavings: 0,
          projectedAnnualSavings: 0,
        },
      }
    } finally {
      setLoading(false)
    }
  }
  // Obtention de la santé financière
  const getFinancialHealth = async (): Promise<FinancialHealth> => {
    setLoading(true)
    try {
      // Simuler un appel API avec un délai
      await new Promise((resolve) => setTimeout(resolve, 1000))
      const totalIncome = calculateTotalIncome()
      const totalExpenses = calculateTotalExpenses()
      const balance = totalIncome - totalExpenses
      const savingsRate = totalIncome > 0 ? (balance / totalIncome) * 100 : 0
      // Calcul du score de santé financière (0-100)
      let score = 50 // Score de base
      // Ajustement basé sur le taux d'épargne
      if (savingsRate >= 20) score += 20
      else if (savingsRate >= 10) score += 10
      else if (savingsRate > 0) score += 5
      else score -= 10
      // Ajustement basé sur l'équilibre budgétaire
      if (balance > 0) score += 10
      else score -= 15
      // Ajustement basé sur les dettes
      const hasDebts = financialData.debts && financialData.debts.length > 0
      if (!hasDebts) score += 10
      else {
        const totalDebtPayment = financialData.debts.reduce((sum, debt) => {
          const value =
            typeof debt.value === 'number'
              ? debt.value
              : parseFloat(debt.value as string) || 0
          return sum + value
        }, 0)
        if (totalDebtPayment < totalIncome * 0.1) score += 5
        else if (totalDebtPayment > totalIncome * 0.3) score -= 15
      }
      // Ajustement basé sur les investissements
      const hasInvestments =
        financialData.investments && financialData.investments.length > 0
      if (hasInvestments) score += 10
      // Limiter le score entre 0 et 100
      score = Math.max(0, Math.min(100, score))
      // Déterminer le niveau de santé financière
      let level: 'excellent' | 'good' | 'average' | 'poor' | 'critical'
      if (score >= 80) level = 'excellent'
      else if (score >= 60) level = 'good'
      else if (score >= 40) level = 'average'
      else if (score >= 20) level = 'poor'
      else level = 'critical'
      return {
        score,
        level,
        savingsRate,
        debtToIncomeRatio: hasDebts
          ? financialData.debts.reduce((sum, debt) => {
              const value =
                typeof debt.value === 'number'
                  ? debt.value
                  : parseFloat(debt.value as string) || 0
              return sum + value
            }, 0) / totalIncome
          : 0,
        recommendations: generateHealthRecommendations(
          level,
          savingsRate,
          hasDebts,
        ),
      }
    } catch (error) {
      console.error(
        "Erreur lors de l'évaluation de la santé financière:",
        error,
      )
      return {
        score: 50,
        level: 'average',
        savingsRate: 0,
        debtToIncomeRatio: 0,
        recommendations: [],
      }
    } finally {
      setLoading(false)
    }
  }
  // Générer des recommandations basées sur la santé financière
  const generateHealthRecommendations = (
    level: 'excellent' | 'good' | 'average' | 'poor' | 'critical',
    savingsRate: number,
    hasDebts: boolean,
  ): string[] => {
    const recommendations: string[] = []
    if (level === 'critical' || level === 'poor') {
      recommendations.push(
        'Établissez un budget strict et suivez-le rigoureusement',
      )
      recommendations.push(
        'Réduisez immédiatement les dépenses non essentielles',
      )
      if (hasDebts) {
        recommendations.push(
          'Contactez vos créanciers pour négocier des plans de remboursement',
        )
      }
    }
    if (level === 'average') {
      recommendations.push("Augmentez votre taux d'épargne de 5% minimum")
      recommendations.push("Créez un fonds d'urgence si ce n'est pas déjà fait")
      if (hasDebts) {
        recommendations.push(
          'Concentrez-vous sur le remboursement des dettes à taux élevé',
        )
      }
    }
    if (level === 'good' || level === 'excellent') {
      recommendations.push(
        'Diversifiez vos investissements pour optimiser les rendements',
      )
      if (savingsRate > 30) {
        recommendations.push(
          "Envisagez d'investir davantage pour faire fructifier votre épargne",
        )
      }
    }
    // Recommandations communes à tous les niveaux
    if (savingsRate < 20) {
      recommendations.push(
        "Visez un taux d'épargne d'au moins 20% de vos revenus",
      )
    }
    if (!hasDebts) {
      recommendations.push(
        'Maintenez votre situation sans dette et évitez les crédits à la consommation',
      )
    }
    return recommendations
  }
  // Détection des frais cachés
  const detectHiddenFees = async (): Promise<{
    totalAmount: number
    items: any[]
  }> => {
    setLoading(true)
    try {
      // Simuler un appel API avec un délai
      await new Promise((resolve) => setTimeout(resolve, 900))
      // Exemple de frais cachés détectés
      const hiddenFees = [
        {
          category: 'Banque',
          description: 'Frais de tenue de compte excessifs',
          amount: 8.5,
          optimizationTip: 'Comparez les offres bancaires en ligne sans frais',
        },
        {
          category: 'Abonnements',
          description: 'Services de streaming non utilisés',
          amount: 12.99,
          optimizationTip: 'Annulez les abonnements peu utilisés',
        },
        {
          category: 'Assurance',
          description: 'Double couverture assurance mobile',
          amount: 5.99,
          optimizationTip: 'Vérifiez vos contrats pour éviter les doublons',
        },
        {
          category: 'Téléphonie',
          description: 'Options téléphoniques superflues',
          amount: 7.0,
          optimizationTip: 'Optimisez votre forfait selon vos besoins réels',
        },
      ]
      const totalAmount = hiddenFees.reduce((sum, fee) => sum + fee.amount, 0)
      return {
        totalAmount,
        items: hiddenFees,
      }
    } catch (error) {
      console.error('Erreur lors de la détection des frais cachés:', error)
      return {
        totalAmount: 0,
        items: [],
      }
    } finally {
      setLoading(false)
    }
  }
  // Obtention des données historiques
  const getHistoricalData = async (): Promise<any[]> => {
    setLoading(true)
    try {
      // Simuler un appel API avec un délai
      await new Promise((resolve) => setTimeout(resolve, 800))
      // Génération de données historiques fictives
      const today = new Date()
      const data = []
      const totalIncome = calculateTotalIncome()
      const totalExpenses = calculateTotalExpenses()
      for (let i = 5; i >= 0; i--) {
        const date = new Date()
        date.setMonth(today.getMonth() - i)
        const monthName = date.toLocaleString('fr-FR', {
          month: 'short',
        })
        // Variation aléatoire pour simuler des changements dans le temps
        const variationIncome = 1 + (Math.random() * 0.1 - 0.05) // -5% à +5%
        const variationExpenses = 1 + (Math.random() * 0.1 - 0.05) // -5% à +5%
        const monthIncome = Math.round(totalIncome * variationIncome)
        const monthExpenses = Math.round(totalExpenses * variationExpenses)
        const monthBalance = monthIncome - monthExpenses
        data.push({
          month: monthName,
          income: monthIncome,
          expenses: monthExpenses,
          balance: monthBalance,
          savings: Math.round(monthBalance * 0.7),
          investments: Math.round(monthBalance * 0.3),
        })
      }
      return data
    } catch (error) {
      console.error(
        'Erreur lors de la récupération des données historiques:',
        error,
      )
      return []
    } finally {
      setLoading(false)
    }
  }
  // Obtention des prédictions financières
  const getPredictions = async (): Promise<any> => {
    setLoading(true)
    try {
      // Simuler un appel API avec un délai
      await new Promise((resolve) => setTimeout(resolve, 1100))
      const totalIncome = calculateTotalIncome()
      const totalExpenses = calculateTotalExpenses()
      const monthlySavings = totalIncome - totalExpenses
      // Prédictions sur 12 mois
      const predictions = {
        savings: {
          current: monthlySavings,
          sixMonths: monthlySavings * 6 * 1.02,
          oneYear: monthlySavings * 12 * 1.05, // Augmentation plus importante
        },
        netWorth: {
          current: calculateNetWorth(),
          sixMonths: calculateNetWorth() + monthlySavings * 6 * 1.02,
          oneYear: calculateNetWorth() + monthlySavings * 12 * 1.05,
        },
        recommendations: [
          'Augmentez votre épargne automatique de 50€ par mois',
          'Diversifiez vos investissements pour optimiser les rendements',
          "Envisagez une assurance-vie pour l'épargne à long terme",
        ],
      }
      return predictions
    } catch (error) {
      console.error('Erreur lors de la génération des prédictions:', error)
      return null
    } finally {
      setLoading(false)
    }
  }
  // Obtention du score financier
  const getFinancialScore = async (): Promise<number> => {
    try {
      const health = await getFinancialHealth()
      return health.score
    } catch (error) {
      console.error('Erreur lors du calcul du score financier:', error)
      return 50
    }
  }
  // Rafraîchissement des données
  const refreshData = async (): Promise<void> => {
    setLoading(true)
    try {
      // Simuler un appel API avec un délai
      await new Promise((resolve) => setTimeout(resolve, 1000))
      // Ajouter de petites variations pour simuler des mises à jour
      const updatedIncomes = financialData.incomes?.map((income) => ({
        ...income,
        value:
          typeof income.value === 'number'
            ? Math.round(income.value * (1 + (Math.random() * 0.04 - 0.02)))
            : income.value,
      }))
      const updatedExpenses = financialData.expenses?.map((expense) => ({
        ...expense,
        value:
          typeof expense.value === 'number'
            ? Math.round(expense.value * (1 + (Math.random() * 0.04 - 0.02)))
            : expense.value,
      }))
      setFinancialData({
        ...financialData,
        incomes: updatedIncomes,
        expenses: updatedExpenses,
      })
    } catch (error) {
      console.error('Erreur lors du rafraîchissement des données:', error)
    } finally {
      setLoading(false)
    }
  }
  // Valeur du contexte
  const value: FinanceContextType = {
    financialData,
    setFinancialData,
    userQuestion,
    setUserQuestion,
    emotionalContext,
    setEmotionalContext,
    calculateTotalIncome,
    calculateTotalExpenses,
    calculateNetWorth,
    generateInsights,
    runSimulation,
    getFinancialHealth,
    detectHiddenFees,
    getHistoricalData,
    getPredictions,
    getFinancialScore,
    refreshData,
    loading,
  }
  return (
    <FinanceContext.Provider value={value}>{children}</FinanceContext.Provider>
  )
}

```
```stores/financeStore.ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import { FinanceStore, FinancialSnapshot } from '../types/finance'

export const useFinanceStore = create<FinanceStore>()(
  persist(
    (set) => ({
      hasCompletedOnboarding: false,
      questionHistory: ['Comment optimiser mon budget mensuel ?'],
      financialSnapshots: [],
      setHasCompletedOnboarding: (value: boolean) =>
        set(() => ({ hasCompletedOnboarding: value })),
      addQuestion: (question: string) =>
        set((state) => ({
          questionHistory: [question, ...state.questionHistory].slice(0, 10),
        })),
      addFinancialSnapshot: (snapshot: FinancialSnapshot) =>
        set((state) => {
          const newSnapshots = [snapshot, ...state.financialSnapshots].slice(
            0,
            30,
          )
          return { financialSnapshots: newSnapshots }
        }),
    }),
    {
      name: 'finance-store',
    },
  ),
)

```
```types/finance.ts
// Types de base pour les données financières
export interface FinancialItem {
  id?: string
  category: string
  subcategory?: string
  value: number | string
  frequency?: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'once'
  description?: string
  tags?: string[]
}
// Structure principale des données financières
export interface FinancialData {
  incomes?: FinancialItem[]
  expenses?: FinancialItem[]
  savings?: FinancialItem[]
  debts?: FinancialItem[]
  investments?: FinancialItem[]
}
// Type pour les insights financiers
export interface FinancialInsight {
  id: string
  title: string
  description: string
  impact: 'high' | 'medium' | 'low'
  category: string
  action?: string
}
// Type pour le contexte émotionnel
export interface EmotionalContext {
  mood: number // 1-5
  tags?: string[]
}
// Type pour la santé financière
export interface FinancialHealth {
  score: number
  level: 'excellent' | 'good' | 'average' | 'poor' | 'critical'
  savingsRate: number
  debtToIncomeRatio: number
  recommendations: string[]
}
// Type pour les résultats de simulation
export interface SimulationResult {
  success: boolean
  error?: string
  data: any[]
  summary: {
    totalSavings: number
    averageMonthlySavings: number
    projectedAnnualSavings: number
  }
}
// Type pour un snapshot financier
export interface FinancialSnapshot {
  date: string
  data: FinancialData
}
// Type pour le store financier
export interface FinanceStore {
  hasCompletedOnboarding: boolean
  questionHistory: string[]
  financialSnapshots: FinancialSnapshot[]
  setHasCompletedOnboarding: (value: boolean) => void
  addQuestion: (question: string) => void
  addFinancialSnapshot: (snapshot: FinancialSnapshot) => void
}

```
```context/ThemeContext.tsx
import React, { useEffect, useState, createContext, useContext } from 'react'
type Theme = 'dark' | 'light'
interface ThemeContextType {
  theme: Theme
  setTheme: (theme: Theme) => void
  toggleTheme: () => void
  themeColors: {
    primary: string
    secondary: string
    success: string
    danger: string
    warning: string
    info: string
    textPrimary: string
    textSecondary: string
    chartColors: string[]
  }
}
const ThemeContext = createContext<ThemeContextType | undefined>(undefined)
export const useTheme = () => {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error('useTheme doit être utilisé dans un ThemeProvider')
  }
  return context
}
export const ThemeProvider: React.FC<{
  children: React.ReactNode
}> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>('dark')
  // Couleurs par thème
  const themeColors = {
    primary: 'from-indigo-500 to-purple-600',
    secondary: 'from-gray-800 to-gray-900',
    success: 'from-green-500 to-green-600',
    danger: 'from-red-500 to-red-600',
    warning: 'from-yellow-500 to-amber-600',
    info: 'from-blue-500 to-blue-600',
    textPrimary: 'text-white',
    textSecondary: 'text-gray-300',
    chartColors: ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#0088fe'],
  }
  // Basculer entre les thèmes
  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark')
  }
  // Appliquer le thème au document
  useEffect(() => {
    document.documentElement.classList.remove('light-theme', 'dark-theme')
    document.documentElement.classList.add(`${theme}-theme`)
  }, [theme])
  return (
    <ThemeContext.Provider
      value={{
        theme,
        setTheme,
        toggleTheme,
        themeColors,
      }}
    >
      {children}
    </ThemeContext.Provider>
  )
}

```
```utils/financialCalculations.ts
import {
  FinancialData,
  EmotionalContext,
  FinancialInsight,
  SimulationParams,
  SimulationResult,
} from '../types/finance'
import dayjs from 'dayjs'
// Generate personalized financial insights based on user data
export function calculateFinancialInsights(
  financialData: FinancialData,
  emotionalContext: EmotionalContext,
  totalIncome: number,
  totalExpenses: number,
): FinancialInsight[] {
  const insights: FinancialInsight[] = []
  // Calculate savings rate
  const balance = totalIncome - totalExpenses
  const savingsRate = totalIncome > 0 ? (balance / totalIncome) * 100 : 0
  // Insight based on savings rate
  if (savingsRate < 0) {
    insights.push({
      id: 'negative-savings',
      title: 'Solde négatif',
      description: `Vous dépensez ${Math.abs(savingsRate).toFixed(1)}% de plus que vos revenus. Cela peut entraîner un endettement progressif.`,
      impact: 'high',
      category: 'expense',
      action:
        'Identifiez les dépenses non essentielles que vous pourriez réduire.',
      potentialSavings: Math.abs(balance),
    })
  } else if (savingsRate < 10) {
    insights.push({
      id: 'low-savings',
      title: "Taux d'épargne faible",
      description: `Votre taux d'épargne de ${savingsRate.toFixed(1)}% est inférieur à la recommandation de 20%.`,
      impact: 'medium',
      category: 'savings',
      action:
        "Essayez d'augmenter progressivement votre taux d'épargne de 1% par mois.",
      potentialSavings: totalIncome * 0.1,
    })
  } else if (savingsRate >= 20) {
    insights.push({
      id: 'good-savings',
      title: "Excellent taux d'épargne",
      description: `Votre taux d'épargne de ${savingsRate.toFixed(1)}% est excellent! Vous êtes sur la bonne voie.`,
      impact: 'low',
      category: 'savings',
      action:
        "Envisagez d'investir une partie de votre épargne pour la faire fructifier.",
    })
  }
  // Insights based on expense categories
  const expenseCategories: Record<string, number> = {}
  financialData.expenses.forEach((expense) => {
    const value =
      typeof expense.value === 'string'
        ? parseFloat(expense.value) || 0
        : expense.value
    expenseCategories[expense.category] =
      (expenseCategories[expense.category] || 0) + value
  })
  // Check for high housing costs
  const housingExpenses = Object.entries(expenseCategories)
    .filter(
      ([category]) =>
        category.toLowerCase().includes('loyer') ||
        category.toLowerCase().includes('hypothèque') ||
        category.toLowerCase().includes('logement'),
    )
    .reduce((sum, [, value]) => sum + value, 0)
  if (housingExpenses > totalIncome * 0.33) {
    insights.push({
      id: 'high-housing',
      title: 'Coûts de logement élevés',
      description: `Vos dépenses de logement représentent ${((housingExpenses / totalIncome) * 100).toFixed(1)}% de vos revenus, dépassant la recommandation de 33%.`,
      impact: 'high',
      category: 'expense',
      action:
        'Envisagez de renégocier votre loyer/prêt ou de déménager vers un logement plus abordable.',
      potentialSavings: housingExpenses - totalIncome * 0.33,
    })
  }
  // Check for high debt payments
  const debtPayments = (financialData.debts || []).reduce(
    (sum, debt) =>
      sum +
      (typeof debt.value === 'string'
        ? parseFloat(debt.value) || 0
        : debt.value),
    0,
  )
  if (debtPayments > totalIncome * 0.36) {
    insights.push({
      id: 'high-debt',
      title: "Ratio d'endettement élevé",
      description: `Vos paiements de dettes représentent ${((debtPayments / totalIncome) * 100).toFixed(1)}% de vos revenus, dépassant la recommandation de 36%.`,
      impact: 'high',
      category: 'debt',
      action: "Priorisez le remboursement des dettes à taux d'intérêt élevé.",
      potentialSavings: debtPayments - totalIncome * 0.36,
    })
  }
  // Check for emotional spending based on mood
  if (emotionalContext.mood > 7) {
    insights.push({
      id: 'emotional-spending',
      title: 'Dépenses émotionnelles',
      description:
        'Votre niveau de stress financier élevé peut mener à des décisions financières impulsives.',
      impact: 'medium',
      category: 'expense',
      action:
        'Essayez la règle des 24h avant tout achat non essentiel pour réduire les achats impulsifs.',
      potentialSavings: totalExpenses * 0.05,
    })
  }
  // Check for income diversification
  if (financialData.incomes.length === 1) {
    insights.push({
      id: 'single-income',
      title: 'Source de revenu unique',
      description:
        "Vous dépendez d'une seule source de revenu, ce qui peut représenter un risque en cas de perte d'emploi.",
      impact: 'medium',
      category: 'income',
      action: 'Envisagez de développer des sources de revenus complémentaires.',
    })
  }
  // Check for emergency fund
  const emergencyFund = (financialData.savings || []).find((item) =>
    item.category.toLowerCase().includes('urgence'),
  )
  if (!emergencyFund) {
    insights.push({
      id: 'no-emergency-fund',
      title: "Absence de fonds d'urgence",
      description:
        "Vous ne semblez pas avoir de fonds d'urgence, ce qui peut vous rendre vulnérable aux imprévus.",
      impact: 'high',
      category: 'savings',
      action:
        "Commencez à constituer un fonds d'urgence couvrant 3-6 mois de dépenses.",
    })
  } else {
    const emergencyValue =
      typeof emergencyFund.value === 'string'
        ? parseFloat(emergencyFund.value)
        : emergencyFund.value
    if (emergencyValue < totalExpenses * 3) {
      insights.push({
        id: 'low-emergency-fund',
        title: "Fonds d'urgence insuffisant",
        description: `Votre fonds d'urgence couvre environ ${(emergencyValue / totalExpenses).toFixed(1)} mois de dépenses, en dessous de la recommandation de 3-6 mois.`,
        impact: 'medium',
        category: 'savings',
        action: "Augmentez progressivement votre fonds d'urgence.",
      })
    }
  }
  return insights
}
// Run financial simulation based on user data and parameters
export function runFinancialSimulation(
  financialData: FinancialData,
  params: SimulationParams,
): SimulationResult {
  const years = Array.from({ length: params.years }, (_, i) => i + 1)
  const income =
    financialData.incomes.reduce(
      (sum, item) =>
        sum +
        (typeof item.value === 'string'
          ? parseFloat(item.value) || 0
          : item.value),
      0,
    ) * 12 // Annual income
  const expenses =
    financialData.expenses.reduce(
      (sum, item) =>
        sum +
        (typeof item.value === 'string'
          ? parseFloat(item.value) || 0
          : item.value),
      0,
    ) * 12 // Annual expenses
  const initialSavings = (financialData.savings || []).reduce(
    (sum, item) =>
      sum +
      (typeof item.value === 'string'
        ? parseFloat(item.value) || 0
        : item.value),
    0,
  )
  const initialInvestments = (financialData.investments || []).reduce(
    (sum, item) =>
      sum +
      (typeof item.value === 'string'
        ? parseFloat(item.value) || 0
        : item.value),
    0,
  )
  const initialDebts = (financialData.debts || []).reduce(
    (sum, item) =>
      sum +
      (typeof item.value === 'string'
        ? parseFloat(item.value) || 0
        : item.value),
    0,
  )
  let currentIncome = income
  let currentExpenses = expenses
  let currentSavings = initialSavings
  let currentInvestments = initialInvestments
  let currentDebts = initialDebts
  const result: SimulationResult = {
    years: [],
    netWorth: [],
    savings: [],
    income: [],
    expenses: [],
  }
  for (let year = 1; year <= params.years; year++) {
    // Apply growth rates
    currentIncome *= 1 + params.incomeGrowth / 100
    currentExpenses *=
      1 + (params.inflationRate - params.expenseReduction) / 100
    // Calculate yearly savings
    const yearlySavings = currentIncome - currentExpenses
    // Update savings and investments
    if (yearlySavings > 0) {
      // Allocate savings between cash and investments
      const toInvestments = yearlySavings * (params.savingsRate / 100)
      const toCash = yearlySavings - toInvestments
      currentSavings += toCash
      currentInvestments += toInvestments
      // Apply investment returns
      currentInvestments *= 1 + params.investmentReturn / 100
    } else {
      // Draw from savings if expenses exceed income
      currentSavings += yearlySavings
      // If savings are depleted, add to debt
      if (currentSavings < 0) {
        currentDebts -= currentSavings // Add the negative savings to debt
        currentSavings = 0
      }
    }
    // Calculate net worth
    const netWorth = currentSavings + currentInvestments - currentDebts
    // Add to results
    result.years.push(year)
    result.netWorth.push(Math.round(netWorth))
    result.savings.push(Math.round(currentSavings))
    result.income.push(Math.round(currentIncome))
    result.expenses.push(Math.round(currentExpenses))
  }
  return result
}
// Format currency amount
export function formatCurrency(amount: number, currency = 'EUR') {
  return new Intl.NumberFormat('fr-FR', { style: 'currency', currency }).format(
    amount,
  )
}
// Calculate compound interest
export function calculateCompoundInterest(
  principal: number,
  rate: number,
  years: number,
  contributions: number = 0,
  frequency: 'monthly' | 'yearly' = 'monthly',
) {
  const periodicRate = rate / 100 / (frequency === 'monthly' ? 12 : 1)
  const periods = years * (frequency === 'monthly' ? 12 : 1)
  let balance = principal
  for (let i = 0; i < periods; i++) {
    balance = balance * (1 + periodicRate) + contributions
  }
  return balance
}
// Calculate loan payment
export function calculateLoanPayment(
  principal: number,
  rate: number,
  years: number,
) {
  const monthlyRate = rate / 100 / 12
  const payments = years * 12
  return (
    (principal * monthlyRate * Math.pow(1 + monthlyRate, payments)) /
    (Math.pow(1 + monthlyRate, payments) - 1)
  )
}
// Get financial category icons
export function getCategoryIcon(category: string): string {
  const normalizedCategory = category.toLowerCase()
  if (
    normalizedCategory.includes('salaire') ||
    normalizedCategory.includes('revenu')
  ) {
    return 'BriefcaseIcon'
  } else if (
    normalizedCategory.includes('loyer') ||
    normalizedCategory.includes('logement')
  ) {
    return 'HomeIcon'
  } else if (
    normalizedCategory.includes('nourriture') ||
    normalizedCategory.includes('alimentation')
  ) {
    return 'UtensilsIcon'
  } else if (
    normalizedCategory.includes('transport') ||
    normalizedCategory.includes('voiture')
  ) {
    return 'CarIcon'
  } else if (
    normalizedCategory.includes('loisir') ||
    normalizedCategory.includes('divertissement')
  ) {
    return 'MusicIcon'
  } else if (
    normalizedCategory.includes('santé') ||
    normalizedCategory.includes('médical')
  ) {
    return 'HeartPulseIcon'
  } else if (
    normalizedCategory.includes('éducation') ||
    normalizedCategory.includes('formation')
  ) {
    return 'GraduationCapIcon'
  } else if (
    normalizedCategory.includes('dette') ||
    normalizedCategory.includes('crédit')
  ) {
    return 'CreditCardIcon'
  } else if (
    normalizedCategory.includes('épargne') ||
    normalizedCategory.includes('investissement')
  ) {
    return 'TrendingUpIcon'
  } else {
    return 'CircleDollarSignIcon'
  }
}

```
```components/ui/Sidebar.tsx
import React, { useState } from 'react'
import { Link, useLocation, useNavigate } from 'react-router-dom'
import { useTheme } from '../../context/ThemeContext'
import { motion } from 'framer-motion'
import {
  LayoutDashboardIcon,
  SearchIcon,
  CalculatorIcon,
  FileBarChartIcon,
  SettingsIcon,
  ChevronRightIcon,
  ChevronLeftIcon,
  LogOutIcon,
  BookOpenIcon,
  GraduationCapIcon,
  UserIcon,
  MessageSquareIcon,
} from 'lucide-react'
export function Sidebar() {
  const [collapsed, setCollapsed] = useState(false)
  const { themeColors } = useTheme()
  const location = useLocation()
  const navigate = useNavigate()
  const navItems = [
    {
      path: '/dashboard',
      icon: <LayoutDashboardIcon size={20} />,
      label: 'Tableau de bord',
    },
    {
      path: '/question',
      icon: <SearchIcon size={20} />,
      label: 'Nouvelle question',
    },
    {
      path: '/simulation',
      icon: <CalculatorIcon size={20} />,
      label: 'Simulations',
    },
    {
      path: '/reports',
      icon: <FileBarChartIcon size={20} />,
      label: 'Rapports',
    },
    {
      path: '/library',
      icon: <BookOpenIcon size={20} />,
      label: 'Bibliothèque',
    },
    {
      path: '/lessons',
      icon: <GraduationCapIcon size={20} />,
      label: 'Leçons',
    },
    {
      path: '/profile',
      icon: <UserIcon size={20} />,
      label: 'Profil',
    },
    {
      path: '/settings',
      icon: <SettingsIcon size={20} />,
      label: 'Paramètres',
    },
    {
      path: '/feedback',
      icon: <MessageSquareIcon size={20} />,
      label: 'Feedback',
    },
  ]
  const handleLogout = () => {
    // In a real app, you would handle logout logic here
    navigate('/')
  }
  return (
    <motion.div
      className={`h-screen fixed left-0 top-0 pt-20 pb-6 ${themeColors.cardBg} backdrop-blur-md border-r ${themeColors.border} z-10`}
      initial={{
        width: 240,
      }}
      animate={{
        width: collapsed ? 80 : 240,
      }}
      transition={{
        duration: 0.3,
      }}
    >
      <div className="flex flex-col h-full justify-between px-3">
        <nav className="space-y-2">
          {navItems.map((item) => (
            <Link
              key={item.path}
              to={item.path}
              className={`flex items-center px-3 py-2 rounded-lg transition-all duration-200 ${location.pathname === item.path ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'hover:bg-white/10'}`}
            >
              <span className="flex-shrink-0">{item.icon}</span>
              {!collapsed && (
                <span className="ml-3 whitespace-nowrap">{item.label}</span>
              )}
            </Link>
          ))}
        </nav>
        <div className="space-y-2">
          <button
            onClick={() => setCollapsed(!collapsed)}
            className="flex items-center w-full px-3 py-2 rounded-lg hover:bg-white/10 transition-all duration-200"
          >
            <span className="flex-shrink-0">
              {collapsed ? (
                <ChevronRightIcon size={20} />
              ) : (
                <ChevronLeftIcon size={20} />
              )}
            </span>
            {!collapsed && <span className="ml-3">Réduire</span>}
          </button>
          <button
            onClick={handleLogout}
            className="flex items-center px-3 py-2 rounded-lg hover:bg-white/10 transition-all duration-200"
          >
            <span className="flex-shrink-0">
              <LogOutIcon size={20} />
            </span>
            {!collapsed && <span className="ml-3">Déconnexion</span>}
          </button>
        </div>
      </div>
    </motion.div>
  )
}

```
```components/Dashboard.tsx
import React, { useEffect, useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { useFinance } from '../context/FinanceContext'
import { useFinanceStore } from '../stores/financeStore'
import {
  LayoutDashboardIcon,
  TrendingUpIcon,
  TrendingDownIcon,
  PiggyBankIcon,
  BarChart3Icon,
  AlertCircleIcon,
  CalendarIcon,
  SearchIcon,
  RefreshCwIcon,
  ArrowRightIcon,
  LineChartIcon,
  CreditCardIcon,
  UserIcon,
  SettingsIcon,
  PlusIcon,
  ChevronRightIcon,
  InfoIcon,
  BellIcon,
  DownloadIcon,
  ClockIcon,
  CheckCircleIcon,
  XCircleIcon,
  CircleDollarSignIcon,
  TargetIcon,
  BriefcaseIcon,
  HeartIcon,
  BellRingIcon,
} from 'lucide-react'
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
  RadialBarChart,
  RadialBar,
  AreaChart,
  Area,
} from 'recharts'
import { format, subMonths, parseISO } from 'date-fns'
import { fr } from 'date-fns/locale'
import { FinancialInsight } from '../types/finance'
import { toast, Toaster } from 'react-hot-toast'
import CountUp from 'react-countup'
import { Link } from 'react-router-dom'
// Type for dashboard notification
interface DashboardNotification {
  id: string
  title: string
  message: string
  type: 'info' | 'success' | 'warning' | 'danger'
  date: Date
  read: boolean
}
export function Dashboard() {
  const navigate = useNavigate()
  const { theme, themeColors } = useTheme()
  const {
    financialData,
    calculateTotalIncome,
    calculateTotalExpenses,
    calculateNetWorth,
    generateInsights,
    runSimulation,
    getFinancialHealth,
    detectHiddenFees,
    getHistoricalData,
    getPredictions,
    getFinancialScore,
    refreshData,
  } = useFinance()
  const { questionHistory, financialSnapshots, setHasCompletedOnboarding } =
    useFinanceStore()
  // State variables
  const [timeframe, setTimeframe] = useState('month')
  const [isLoading, setIsLoading] = useState(true)
  const [insights, setInsights] = useState<FinancialInsight[]>([])
  const [healthScore, setHealthScore] = useState<number>(0)
  const [predictions, setPredictions] = useState<any>(null)
  const [hiddenFees, setHiddenFees] = useState<any>(null)
  const [historicalData, setHistoricalData] = useState<any[]>([])
  const [notifications, setNotifications] = useState<DashboardNotification[]>(
    [],
  )
  const [showNotifications, setShowNotifications] = useState(false)
  const [unreadNotifications, setUnreadNotifications] = useState(0)
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null)
  // Calculate key metrics
  const totalIncome = calculateTotalIncome() || 0
  const totalExpenses = calculateTotalExpenses() || 0
  const balance = totalIncome - totalExpenses
  const netWorth = calculateNetWorth() || 0
  const savingsRate =
    totalIncome > 0 ? ((totalIncome - totalExpenses) / totalIncome) * 100 : 0
  // Generate mock historical data if not available
  useEffect(() => {
    const generateMockHistoricalData = () => {
      const today = new Date()
      const data = []
      for (let i = 5; i >= 0; i--) {
        const date = subMonths(today, i)
        const monthName = format(date, 'MMM', {
          locale: fr,
        })
        const variationIncome = 1 + (Math.random() * 0.2 - 0.1) // -10% to +10%
        const variationExpenses = 1 + (Math.random() * 0.2 - 0.1) // -10% to +10%
        data.push({
          month: monthName,
          income: Math.round(totalIncome * variationIncome),
          expenses: Math.round(totalExpenses * variationExpenses),
          balance: Math.round(
            totalIncome * variationIncome - totalExpenses * variationExpenses,
          ),
          savings: Math.round(
            (totalIncome * variationIncome -
              totalExpenses * variationExpenses) *
              0.7,
          ),
          investments: Math.round(
            (totalIncome * variationIncome -
              totalExpenses * variationExpenses) *
              0.3,
          ),
        })
      }
      return data
    }
    // Initialize data
    const fetchData = async () => {
      setIsLoading(true)
      try {
        // Get insights
        const fetchedInsights = await generateInsights()
        setInsights(fetchedInsights || [])
        // Get health score
        const health = await getFinancialHealth()
        setHealthScore(health?.score || 50)
        // Get hidden fees
        const fees = await detectHiddenFees()
        setHiddenFees(
          fees || {
            totalAmount: 0,
            items: [],
          },
        )
        // Get historical data (or generate mock data)
        const history = await getHistoricalData()
        setHistoricalData(
          history?.length ? history : generateMockHistoricalData(),
        )
        // Get predictions
        const futureData = await getPredictions()
        setPredictions(futureData)
        // Generate notifications
        generateNotifications()
        setLastUpdate(new Date())
        setIsLoading(false)
      } catch (error) {
        console.error('Error loading dashboard data:', error)
        setIsLoading(false)
        toast.error('Erreur lors du chargement des données')
      }
    }
    fetchData()
  }, [])
  // Generate notifications
  const generateNotifications = () => {
    const newNotifications: DashboardNotification[] = [
      {
        id: '1',
        title: 'Alerte budget',
        message: 'Vous avez atteint 85% de votre budget loisirs ce mois-ci.',
        type: 'warning',
        date: new Date(Date.now() - 2 * 60 * 60 * 1000),
        read: false,
      },
      {
        id: '2',
        title: 'Frais bancaires détectés',
        message:
          'Nous avons détecté des frais bancaires inhabituels de 12,50€.',
        type: 'danger',
        date: new Date(Date.now() - 8 * 60 * 60 * 1000),
        read: false,
      },
      {
        id: '3',
        title: 'Objectif atteint',
        message:
          'Félicitations ! Vous avez atteint votre objectif d\'épargne "Vacances".',
        type: 'success',
        date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        read: true,
      },
      {
        id: '4',
        title: 'Nouvelle analyse disponible',
        message: 'Votre rapport financier mensuel est disponible.',
        type: 'info',
        date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
        read: true,
      },
    ]
    setNotifications(newNotifications)
    setUnreadNotifications(newNotifications.filter((n) => !n.read).length)
  }
  // Mark notification as read
  const markAsRead = (id: string) => {
    setNotifications(
      notifications.map((n) =>
        n.id === id
          ? {
              ...n,
              read: true,
            }
          : n,
      ),
    )
    setUnreadNotifications((prev) => Math.max(0, prev - 1))
  }
  // Mark all notifications as read
  const markAllAsRead = () => {
    setNotifications(
      notifications.map((n) => ({
        ...n,
        read: true,
      })),
    )
    setUnreadNotifications(0)
  }
  // Handle refresh data
  const handleRefreshData = async () => {
    toast.promise(
      (async () => {
        setIsLoading(true)
        await refreshData()
        const fetchedInsights = await generateInsights()
        setInsights(fetchedInsights || [])
        setIsLoading(false)
        setLastUpdate(new Date())
        return true
      })(),
      {
        loading: 'Mise à jour des données...',
        success: 'Données actualisées avec succès',
        error: "Erreur lors de l'actualisation",
      },
    )
  }
  // Handle navigation
  const handleNavigation = (path: string) => {
    navigate(path)
  }
  // Prepare data for charts
  const expensesByCategory =
    financialData?.expenses?.reduce(
      (acc, item) => {
        const category = item.category
        const value =
          typeof item.value === 'number'
            ? item.value
            : parseFloat(item.value) || 0
        if (acc[category]) {
          acc[category] += value
        } else {
          acc[category] = value
        }
        return acc
      },
      {} as Record<string, number>,
    ) || {}
  const pieChartData = Object.entries(expensesByCategory).map(
    ([name, value]) => ({
      name,
      value,
    }),
  )
  // Financial health radar data
  const healthRadarData = [
    {
      subject: 'Épargne',
      A:
        savingsRate > 20
          ? 100
          : savingsRate > 10
            ? 70
            : savingsRate > 5
              ? 40
              : 20,
      fullMark: 100,
    },
    {
      subject: 'Budget',
      A: totalExpenses < totalIncome ? 90 : 30,
      fullMark: 100,
    },
    {
      subject: 'Dettes',
      A: (financialData?.debts?.length || 0) === 0 ? 100 : 50,
      fullMark: 100,
    },
    {
      subject: 'Investissements',
      A: (financialData?.investments?.length || 0) > 0 ? 80 : 20,
      fullMark: 100,
    },
    {
      subject: 'Protection',
      A: 65,
      fullMark: 100,
    },
  ]
  // Goal progress data
  const goalData = [
    {
      name: "Fonds d'urgence",
      value: 35,
      fill: '#8884d8',
    },
    {
      name: 'Vacances',
      value: 85,
      fill: '#82ca9d',
    },
    {
      name: 'Acompte immobilier',
      value: 12,
      fill: '#ffc658',
    },
  ]
  // Pie chart colors
  const COLORS = themeColors?.chartColors || [
    '#8884d8',
    '#82ca9d',
    '#ffc658',
    '#ff8042',
    '#0088fe',
  ]
  return (
    <div className="w-full max-w-6xl mx-auto pb-20">
      <Toaster position="top-right" />
      {/* Dashboard header */}
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex flex-col md:flex-row md:items-center justify-between mb-4 gap-4">
          <div>
            <h1 className="text-3xl font-bold">Tableau de bord</h1>
            <p className={`${themeColors?.textSecondary || 'text-gray-400'}`}>
              Aperçu complet de votre situation financière
              {lastUpdate && (
                <span className="text-xs ml-2">
                  <ClockIcon className="inline h-3 w-3 mr-1" />
                  Mis à jour le {format(lastUpdate, 'dd/MM/yyyy à HH:mm')}
                </span>
              )}
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <div className="relative">
              <button
                onClick={() => setShowNotifications(!showNotifications)}
                className={`bg-black/30 hover:bg-black/40 text-white p-2 rounded-lg relative`}
              >
                <BellIcon className="h-5 w-5" />
                {unreadNotifications > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
                    {unreadNotifications}
                  </span>
                )}
              </button>
              {/* Notifications dropdown */}
              {showNotifications && (
                <div className="absolute right-0 mt-2 w-80 bg-black/80 border border-white/10 rounded-lg shadow-lg z-50 overflow-hidden">
                  <div className="p-3 border-b border-white/10 flex justify-between items-center">
                    <h3 className="font-medium">Notifications</h3>
                    {unreadNotifications > 0 && (
                      <button
                        onClick={markAllAsRead}
                        className="text-xs text-indigo-400 hover:text-indigo-300"
                      >
                        Tout marquer comme lu
                      </button>
                    )}
                  </div>
                  <div className="max-h-80 overflow-y-auto">
                    {notifications.length > 0 ? (
                      notifications.map((notification) => (
                        <div
                          key={notification.id}
                          className={`p-3 border-b border-white/5 hover:bg-white/5 cursor-pointer ${!notification.read ? 'bg-indigo-900/10' : ''}`}
                          onClick={() => markAsRead(notification.id)}
                        >
                          <div className="flex items-start">
                            <div
                              className={`mt-1 mr-3 p-1.5 rounded-full 
                              ${notification.type === 'info' ? 'bg-blue-500/20 text-blue-400' : notification.type === 'success' ? 'bg-green-500/20 text-green-400' : notification.type === 'warning' ? 'bg-yellow-500/20 text-yellow-400' : 'bg-red-500/20 text-red-400'}`}
                            >
                              {notification.type === 'info' ? (
                                <InfoIcon className="h-4 w-4" />
                              ) : notification.type === 'success' ? (
                                <CheckCircleIcon className="h-4 w-4" />
                              ) : notification.type === 'warning' ? (
                                <AlertCircleIcon className="h-4 w-4" />
                              ) : (
                                <XCircleIcon className="h-4 w-4" />
                              )}
                            </div>
                            <div className="flex-1">
                              <div className="flex justify-between items-start">
                                <h4
                                  className={`text-sm font-medium ${!notification.read ? 'text-white' : themeColors?.textSecondary || 'text-gray-400'}`}
                                >
                                  {notification.title}
                                </h4>
                                <span className="text-xs text-gray-500">
                                  {format(notification.date, 'HH:mm')}
                                </span>
                              </div>
                              <p className="text-xs text-gray-400 mt-1">
                                {notification.message}
                              </p>
                            </div>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="p-4 text-center text-gray-400 text-sm">
                        Aucune notification
                      </div>
                    )}
                  </div>
                  <div className="p-2 border-t border-white/10">
                    <button
                      onClick={() => navigate('/settings')}
                      className="text-xs text-center w-full text-gray-400 hover:text-white"
                    >
                      Gérer les notifications
                    </button>
                  </div>
                </div>
              )}
            </div>
            <button
              onClick={handleRefreshData}
              className="bg-black/30 hover:bg-black/40 text-white p-2 rounded-lg"
              disabled={isLoading}
            >
              <RefreshCwIcon
                className={`h-5 w-5 ${isLoading ? 'animate-spin' : ''}`}
              />
            </button>
            <button
              onClick={() => handleNavigation('/question')}
              className={`bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white px-4 py-2 rounded-lg flex items-center transition-all duration-300`}
            >
              <SearchIcon className="mr-2 h-4 w-4" />
              Nouvelle question
            </button>
          </div>
        </div>
        {/* Timeframe selector */}
        <div className="bg-black/20 p-1 rounded-full flex mb-6">
          <button
            onClick={() => setTimeframe('month')}
            className={`flex-1 py-2 rounded-full text-sm ${timeframe === 'month' ? `bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} text-white` : 'hover:bg-black/20'}`}
          >
            Ce mois
          </button>
          <button
            onClick={() => setTimeframe('quarter')}
            className={`flex-1 py-2 rounded-full text-sm ${timeframe === 'quarter' ? `bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} text-white` : 'hover:bg-black/20'}`}
          >
            Ce trimestre
          </button>
          <button
            onClick={() => setTimeframe('year')}
            className={`flex-1 py-2 rounded-full text-sm ${timeframe === 'year' ? `bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} text-white` : 'hover:bg-black/20'}`}
          >
            Cette année
          </button>
          <button
            onClick={() => setTimeframe('all')}
            className={`flex-1 py-2 rounded-full text-sm ${timeframe === 'all' ? `bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} text-white` : 'hover:bg-black/20'}`}
          >
            Tout
          </button>
        </div>
      </motion.div>
      {/* Key metrics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <GlassCard className="p-4" animate hover>
          <div className="flex items-center justify-between mb-2">
            <h3
              className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
            >
              Revenus
            </h3>
            <div
              className={`p-2 rounded-full bg-gradient-to-r ${themeColors?.success || 'bg-green-500/20'} bg-opacity-20`}
            >
              <TrendingUpIcon className="h-4 w-4 text-green-400" />
            </div>
          </div>
          <div className="text-2xl font-bold mb-1">
            <CountUp
              end={totalIncome}
              duration={1.5}
              separator=" "
              decimals={0}
              suffix="€"
            />
          </div>
          <div
            className={`text-xs ${themeColors?.textSecondary || 'text-gray-400'}`}
          >
            {(
              totalIncome *
              (timeframe === 'month' ? 1 : timeframe === 'quarter' ? 3 : 12)
            ).toLocaleString('fr-FR')}
            €{' '}
            {timeframe === 'month'
              ? 'par mois'
              : timeframe === 'quarter'
                ? 'par trimestre'
                : 'par an'}
          </div>
        </GlassCard>
        <GlassCard className="p-4" animate hover>
          <div className="flex items-center justify-between mb-2">
            <h3
              className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
            >
              Dépenses
            </h3>
            <div className="p-2 rounded-full bg-red-500/20">
              <TrendingDownIcon className="h-4 w-4 text-red-400" />
            </div>
          </div>
          <div className="text-2xl font-bold mb-1">
            <CountUp
              end={totalExpenses}
              duration={1.5}
              separator=" "
              decimals={0}
              suffix="€"
            />
          </div>
          <div
            className={`text-xs ${themeColors?.textSecondary || 'text-gray-400'}`}
          >
            {(
              totalExpenses *
              (timeframe === 'month' ? 1 : timeframe === 'quarter' ? 3 : 12)
            ).toLocaleString('fr-FR')}
            €{' '}
            {timeframe === 'month'
              ? 'par mois'
              : timeframe === 'quarter'
                ? 'par trimestre'
                : 'par an'}
          </div>
        </GlassCard>
        <GlassCard className="p-4" animate hover>
          <div className="flex items-center justify-between mb-2">
            <h3
              className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
            >
              Balance
            </h3>
            <div
              className={`p-2 rounded-full ${balance >= 0 ? 'bg-green-500/20' : 'bg-red-500/20'}`}
            >
              {balance >= 0 ? (
                <PiggyBankIcon className="h-4 w-4 text-green-400" />
              ) : (
                <AlertCircleIcon className="h-4 w-4 text-red-400" />
              )}
            </div>
          </div>
          <div
            className={`text-2xl font-bold mb-1 ${balance >= 0 ? 'text-green-400' : 'text-red-400'}`}
          >
            <CountUp
              end={balance}
              duration={1.5}
              separator=" "
              decimals={0}
              suffix="€"
              prefix={balance >= 0 ? '' : '-'}
              formattingFn={(value) => Math.abs(value).toLocaleString('fr-FR')}
            />
          </div>
          <div
            className={`text-xs ${themeColors?.textSecondary || 'text-gray-400'}`}
          >
            {(
              balance *
              (timeframe === 'month' ? 1 : timeframe === 'quarter' ? 3 : 12)
            ).toLocaleString('fr-FR')}
            €{' '}
            {timeframe === 'month'
              ? 'par mois'
              : timeframe === 'quarter'
                ? 'par trimestre'
                : 'par an'}
          </div>
        </GlassCard>
        <GlassCard className="p-4" animate hover>
          <div className="flex items-center justify-between mb-2">
            <h3
              className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
            >
              Valeur nette
            </h3>
            <div className="p-2 rounded-full bg-blue-500/20">
              <BarChart3Icon className="h-4 w-4 text-blue-400" />
            </div>
          </div>
          <div className="text-2xl font-bold mb-1">
            <CountUp
              end={netWorth}
              duration={1.5}
              separator=" "
              decimals={0}
              suffix="€"
            />
          </div>
          <div
            className={`text-xs ${themeColors?.textSecondary || 'text-gray-400'}`}
          >
            {netWorth >= 0 ? 'Patrimoine positif' : 'Patrimoine négatif'}
          </div>
        </GlassCard>
      </div>
      {/* Main dashboard content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        {/* Financial trends chart */}
        <GlassCard className="p-4 lg:col-span-2" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium">Évolution des finances</h3>
            <div className="flex items-center text-xs bg-black/20 px-2 py-1 rounded-full">
              <CalendarIcon className="h-3 w-3 mr-1" />6 derniers mois
            </div>
          </div>
          {isLoading ? (
            <div className="h-64 flex items-center justify-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
            </div>
          ) : (
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart
                  data={historicalData}
                  margin={{
                    top: 5,
                    right: 30,
                    left: 20,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                  <XAxis dataKey="month" stroke="#aaa" />
                  <YAxis stroke="#aaa" />
                  <Tooltip
                    formatter={(value) => [
                      `${value.toLocaleString('fr-FR')}€`,
                      '',
                    ]}
                    contentStyle={{
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      border: '1px solid rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px',
                    }}
                  />
                  <Legend />
                  <Area
                    type="monotone"
                    dataKey="income"
                    name="Revenus"
                    stroke={COLORS[0]}
                    fill={COLORS[0]}
                    fillOpacity={0.3}
                  />
                  <Area
                    type="monotone"
                    dataKey="expenses"
                    name="Dépenses"
                    stroke={COLORS[1]}
                    fill={COLORS[1]}
                    fillOpacity={0.3}
                  />
                  <Area
                    type="monotone"
                    dataKey="balance"
                    name="Balance"
                    stroke={COLORS[2]}
                    fill={COLORS[2]}
                    fillOpacity={0.3}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          )}
          {/* Monthly summary */}
          <div className="mt-4 grid grid-cols-3 gap-3">
            <div className="bg-black/20 p-3 rounded-lg">
              <div
                className={`text-xs ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
              >
                Taux d'épargne
              </div>
              <div className="flex items-center">
                <div className="text-lg font-bold text-indigo-400">
                  {savingsRate.toFixed(1)}%
                </div>
                <div className="ml-auto">
                  {savingsRate >= 20 ? (
                    <span className="bg-green-500/20 text-green-400 text-xs px-1.5 py-0.5 rounded">
                      Excellent
                    </span>
                  ) : savingsRate >= 10 ? (
                    <span className="bg-blue-500/20 text-blue-400 text-xs px-1.5 py-0.5 rounded">
                      Bon
                    </span>
                  ) : savingsRate > 0 ? (
                    <span className="bg-yellow-500/20 text-yellow-400 text-xs px-1.5 py-0.5 rounded">
                      Moyen
                    </span>
                  ) : (
                    <span className="bg-red-500/20 text-red-400 text-xs px-1.5 py-0.5 rounded">
                      Insuffisant
                    </span>
                  )}
                </div>
              </div>
            </div>
            <div className="bg-black/20 p-3 rounded-lg">
              <div
                className={`text-xs ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
              >
                Top dépense
              </div>
              {pieChartData.length > 0 ? (
                <div className="text-lg font-bold">
                  {pieChartData.sort((a, b) => b.value - a.value)[0].name}
                </div>
              ) : (
                <div className="text-lg font-bold">-</div>
              )}
            </div>
            <div className="bg-black/20 p-3 rounded-lg">
              <div
                className={`text-xs ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
              >
                Économies potentielles
              </div>
              <div className="text-lg font-bold text-green-400">
                {hiddenFees
                  ? `${hiddenFees.totalAmount.toFixed(0)}€`
                  : 'Chargement...'}
              </div>
            </div>
          </div>
        </GlassCard>
        {/* Expense breakdown */}
        <GlassCard className="p-4" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium">Répartition des dépenses</h3>
            <button
              onClick={() => navigate('/reports')}
              className="text-xs bg-black/20 px-2 py-1 rounded-full flex items-center"
            >
              <ChevronRightIcon className="h-3 w-3 mr-1" />
              Détails
            </button>
          </div>
          {isLoading ? (
            <div className="h-64 flex items-center justify-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
            </div>
          ) : pieChartData.length > 0 ? (
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieChartData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {pieChartData.map((entry, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={COLORS[index % COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    formatter={(value) => [
                      `${value.toLocaleString('fr-FR')}€`,
                      'Montant',
                    ]}
                    contentStyle={{
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      border: '1px solid rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          ) : (
            <div className="h-64 flex items-center justify-center">
              <p
                className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
              >
                Pas de données disponibles
              </p>
            </div>
          )}
          {/* Top expenses summary */}
          {pieChartData.length > 0 && (
            <div className="mt-2">
              <h4
                className={`text-sm font-medium mb-2 ${themeColors?.textSecondary || 'text-gray-400'}`}
              >
                Top 3 des dépenses
              </h4>
              <div className="space-y-2">
                {pieChartData
                  .sort((a, b) => b.value - a.value)
                  .slice(0, 3)
                  .map((item, index) => (
                    <div key={index} className="flex items-center">
                      <div
                        className="w-3 h-3 rounded-full mr-2"
                        style={{
                          backgroundColor: COLORS[index % COLORS.length],
                        }}
                      ></div>
                      <div className="text-sm">{item.name}</div>
                      <div className="ml-auto text-sm font-medium">
                        {item.value.toLocaleString('fr-FR')}€
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          )}
        </GlassCard>
      </div>
      {/* Second row */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        {/* Financial health */}
        <GlassCard className="p-4" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium flex items-center">
              <HeartIcon className="h-5 w-5 mr-2 text-red-400" />
              Santé financière
            </h3>
            <div
              className={`text-xs px-2 py-1 rounded-full ${healthScore >= 70 ? 'bg-green-500/20 text-green-300' : healthScore >= 50 ? 'bg-blue-500/20 text-blue-300' : healthScore >= 30 ? 'bg-yellow-500/20 text-yellow-300' : 'bg-red-500/20 text-red-300'}`}
            >
              Score: {healthScore}/100
            </div>
          </div>
          {isLoading ? (
            <div className="h-64 flex items-center justify-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
            </div>
          ) : (
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <RadarChart
                  cx="50%"
                  cy="50%"
                  outerRadius="80%"
                  data={healthRadarData}
                >
                  <PolarGrid stroke="#444" />
                  <PolarAngleAxis dataKey="subject" stroke="#aaa" />
                  <PolarRadiusAxis angle={30} domain={[0, 100]} stroke="#aaa" />
                  <Radar
                    name="Santé financière"
                    dataKey="A"
                    stroke={COLORS[0]}
                    fill={COLORS[0]}
                    fillOpacity={0.6}
                  />
                  <Tooltip
                    formatter={(value) => [`${value}/100`, '']}
                    contentStyle={{
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      border: '1px solid rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px',
                    }}
                  />
                </RadarChart>
              </ResponsiveContainer>
            </div>
          )}
          <div className="mt-2">
            <button
              onClick={() => navigate('/reveal')}
              className={`w-full py-2 rounded-lg bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-sm flex items-center justify-center`}
            >
              Analyse complète
              <ArrowRightIcon className="h-4 w-4 ml-1" />
            </button>
          </div>
        </GlassCard>
        {/* Goals progress */}
        <GlassCard className="p-4" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium flex items-center">
              <TargetIcon className="h-5 w-5 mr-2 text-green-400" />
              Objectifs financiers
            </h3>
            <button
              className="text-xs bg-black/20 px-2 py-1 rounded-full flex items-center"
              onClick={() => navigate('/settings')}
            >
              <PlusIcon className="h-3 w-3 mr-1" />
              Ajouter
            </button>
          </div>
          {isLoading ? (
            <div className="h-64 flex items-center justify-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
            </div>
          ) : (
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <RadialBarChart
                  cx="50%"
                  cy="50%"
                  innerRadius="20%"
                  outerRadius="80%"
                  barSize={15}
                  data={goalData}
                >
                  <RadialBar
                    label={{
                      position: 'insideStart',
                      fill: '#fff',
                    }}
                    background
                    dataKey="value"
                  />
                  <Tooltip
                    formatter={(value) => [`${value}%`, 'Progression']}
                    contentStyle={{
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      border: '1px solid rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px',
                    }}
                  />
                  <Legend
                    iconSize={10}
                    layout="vertical"
                    verticalAlign="middle"
                    align="right"
                  />
                </RadialBarChart>
              </ResponsiveContainer>
            </div>
          )}
          <div className="mt-2 space-y-2">
            <div className="bg-black/20 p-2 rounded-lg flex justify-between items-center">
              <div className="text-sm">Fonds d'urgence</div>
              <div className="text-xs">1 750€ / 5 000€</div>
            </div>
            <div className="bg-black/20 p-2 rounded-lg flex justify-between items-center">
              <div className="text-sm">Vacances d'été</div>
              <div className="text-xs">1 700€ / 2 000€</div>
            </div>
            <div className="bg-black/20 p-2 rounded-lg flex justify-between items-center">
              <div className="text-sm">Acompte immobilier</div>
              <div className="text-xs">6 000€ / 50 000€</div>
            </div>
          </div>
        </GlassCard>
        {/* Financial insights */}
        <GlassCard className="p-4" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium flex items-center">
              <LineChartIcon className="h-5 w-5 mr-2 text-indigo-400" />
              Insights financiers
            </h3>
            <div className="text-xs bg-indigo-500/20 px-2 py-1 rounded-full">
              {insights.length} détectés
            </div>
          </div>
          {isLoading ? (
            <div className="h-64 flex items-center justify-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
            </div>
          ) : (
            <div className="space-y-3 max-h-64 overflow-y-auto">
              {insights.length > 0 ? (
                insights.map((insight, index) => (
                  <div
                    key={insight.id}
                    className={`p-3 rounded-lg ${insight.impact === 'high' ? 'bg-red-900/20 border border-red-500/30' : insight.impact === 'medium' ? 'bg-yellow-900/20 border border-yellow-500/30' : 'bg-green-900/20 border border-green-500/30'}`}
                  >
                    <div className="flex items-center mb-1">
                      <span
                        className={`w-2 h-2 rounded-full mr-2 ${insight.impact === 'high' ? 'bg-red-500' : insight.impact === 'medium' ? 'bg-yellow-500' : 'bg-green-500'}`}
                      ></span>
                      <h4 className="text-sm font-medium">{insight.title}</h4>
                    </div>
                    <p className="text-xs text-gray-300">
                      {insight.description}
                    </p>
                  </div>
                ))
              ) : (
                <div className="text-center py-6 text-gray-400">
                  <p className="text-sm">Pas d'insights disponibles</p>
                  <p className="text-xs mt-1">
                    Ajoutez plus de données financières
                  </p>
                </div>
              )}
            </div>
          )}
          <div className="mt-4">
            <button
              onClick={() => navigate('/reveal')}
              className={`w-full py-2 rounded-lg bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-sm flex items-center justify-center`}
            >
              Voir tous les insights
              <ArrowRightIcon className="h-4 w-4 ml-1" />
            </button>
          </div>
        </GlassCard>
      </div>
      {/* Third row */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        {/* Hidden fees */}
        <GlassCard className="p-4" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium flex items-center">
              <AlertCircleIcon className="h-5 w-5 mr-2 text-orange-400" />
              Frais cachés détectés
            </h3>
            <div className="text-xs bg-orange-500/20 text-orange-300 px-2 py-1 rounded-full">
              {hiddenFees
                ? `${hiddenFees.totalAmount.toFixed(0)}€`
                : 'Chargement...'}
            </div>
          </div>
          {isLoading ? (
            <div className="h-64 flex items-center justify-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
            </div>
          ) : hiddenFees && hiddenFees.items && hiddenFees.items.length > 0 ? (
            <div className="space-y-3 max-h-64 overflow-y-auto">
              {hiddenFees.items.map((fee, index) => (
                <div key={index} className="bg-black/20 p-3 rounded-lg">
                  <div className="flex justify-between items-center mb-1">
                    <span className="font-medium text-sm">{fee.category}</span>
                    <span className="text-orange-400 font-medium">
                      {fee.amount}€
                    </span>
                  </div>
                  <p className="text-xs text-gray-300">{fee.description}</p>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-6 text-gray-400">
              <p className="text-sm">Aucun frais caché détecté</p>
              <p className="text-xs mt-1">
                Nous analysons vos transactions pour identifier des frais
                optimisables
              </p>
            </div>
          )}
          <div className="mt-4">
            <button
              onClick={() => navigate('/reveal')}
              className={`w-full py-2 rounded-lg bg-gradient-to-r ${themeColors?.secondary || 'from-gray-800 to-gray-900'} hover:opacity-90 text-sm flex items-center justify-center`}
            >
              Optimiser mes frais
              <ArrowRightIcon className="h-4 w-4 ml-1" />
            </button>
          </div>
        </GlassCard>
        {/* Recent questions */}
        <GlassCard className="p-4" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium flex items-center">
              <SearchIcon className="h-5 w-5 mr-2 text-blue-400" />
              Questions récentes
            </h3>
            <div className="text-xs bg-black/20 px-2 py-1 rounded-full">
              Historique
            </div>
          </div>
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {questionHistory.length > 0 ? (
              questionHistory.map((question, index) => (
                <div
                  key={index}
                  className="bg-black/20 p-3 rounded-lg cursor-pointer hover:bg-black/30 transition-all"
                  onClick={() => navigate('/question')}
                >
                  <p className="text-sm">{question}</p>
                  <p className="text-xs text-gray-400 mt-1">
                    {index === 0
                      ? "À l'instant"
                      : index === 1
                        ? 'Hier'
                        : `Il y a ${index + 1} jours`}
                  </p>
                </div>
              ))
            ) : (
              <div className="text-center py-6 text-gray-400">
                <p className="text-sm">Pas de questions récentes</p>
                <p className="text-xs mt-1">
                  Posez une question pour commencer
                </p>
              </div>
            )}
          </div>
          <div className="mt-4">
            <button
              onClick={() => navigate('/question')}
              className={`w-full py-2 rounded-lg bg-gradient-to-r ${themeColors?.secondary || 'from-gray-800 to-gray-900'} hover:opacity-90 text-sm flex items-center justify-center`}
            >
              Poser une nouvelle question
              <SearchIcon className="h-4 w-4 ml-1" />
            </button>
          </div>
        </GlassCard>
        {/* Financial forecast */}
        <GlassCard className="p-4" animate>
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium flex items-center">
              <BriefcaseIcon className="h-5 w-5 mr-2 text-purple-400" />
              Prévisions financières
            </h3>
            <div className="text-xs bg-black/20 px-2 py-1 rounded-full">
              12 mois
            </div>
          </div>
          {isLoading ? (
            <div className="h-64 flex items-center justify-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
            </div>
          ) : (
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={[
                    {
                      month: 'J',
                      valeur: totalIncome - totalExpenses,
                    },
                    {
                      month: 'F',
                      valeur: (totalIncome - totalExpenses) * 1.02,
                    },
                    {
                      month: 'M',
                      valeur: (totalIncome - totalExpenses) * 1.03,
                    },
                    {
                      month: 'A',
                      valeur: (totalIncome - totalExpenses) * 1.05,
                    },
                    {
                      month: 'M',
                      valeur: (totalIncome - totalExpenses) * 1.06,
                    },
                    {
                      month: 'J',
                      valeur: (totalIncome - totalExpenses) * 1.08,
                    },
                  ]}
                  margin={{
                    top: 5,
                    right: 30,
                    left: 20,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                  <XAxis dataKey="month" stroke="#aaa" />
                  <YAxis stroke="#aaa" />
                  <Tooltip
                    formatter={(value) => [
                      `${value.toLocaleString('fr-FR')}€`,
                      'Épargne prévisionnelle',
                    ]}
                    contentStyle={{
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      border: '1px solid rgba(255, 255, 255, 0.1)',
                      borderRadius: '8px',
                    }}
                  />
                  <Bar dataKey="valeur" fill={COLORS[4]} />
                </BarChart>
              </ResponsiveContainer>
            </div>
          )}
          <div className="mt-4">
            <button
              onClick={() => navigate('/simulation')}
              className={`w-full py-2 rounded-lg bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-sm flex items-center justify-center`}
            >
              Simulations avancées
              <ArrowRightIcon className="h-4 w-4 ml-1" />
            </button>
          </div>
        </GlassCard>
      </div>
      {/* Action buttons - Fixed to use direct Link components */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Link
          to="/question"
          className="bg-black/30 hover:bg-black/40 p-4 rounded-lg flex items-center justify-center transition-all"
        >
          <SearchIcon className="h-5 w-5 mr-2 text-indigo-400" />
          <span>Nouvelle question</span>
        </Link>
        <Link
          to="/simulation"
          className="bg-black/30 hover:bg-black/40 p-4 rounded-lg flex items-center justify-center transition-all"
        >
          <LineChartIcon className="h-5 w-5 mr-2 text-green-400" />
          <span>Simulations</span>
        </Link>
        <Link
          to="/reports"
          className="bg-black/30 hover:bg-black/40 p-4 rounded-lg flex items-center justify-center transition-all"
        >
          <BarChart3Icon className="h-5 w-5 mr-2 text-blue-400" />
          <span>Rapports</span>
        </Link>
        <Link
          to="/settings"
          className="bg-black/30 hover:bg-black/40 p-4 rounded-lg flex items-center justify-center transition-all"
        >
          <SettingsIcon className="h-5 w-5 mr-2 text-purple-400" />
          <span>Paramètres</span>
        </Link>
      </div>
    </div>
  )
}

```
```components/AdvancedSimulation.tsx
import React, { useEffect, useState, createElement } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { useFinance } from '../context/FinanceContext'
import {
  LineChartIcon,
  SaveIcon,
  PlusIcon,
  TrashIcon,
  DownloadIcon,
  RefreshCwIcon,
  BarChart3Icon,
  CopyIcon,
  CheckIcon,
  AlertCircleIcon,
  InfoIcon,
  DollarSignIcon,
  PercentIcon,
  CalendarIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  TrendingUpIcon,
  TrendingDownIcon,
  PiggyBankIcon,
  HomeIcon,
  GraduationCapIcon,
  HeartIcon,
  CarIcon,
  BriefcaseIcon,
  ShareIcon,
  LockIcon,
  UnlockIcon,
  ChevronRightIcon,
  SettingsIcon,
  TargetIcon,
  CheckCircleIcon,
  BellRingIcon,
} from 'lucide-react'
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  AreaChart,
  Area,
  ReferenceLine,
} from 'recharts'
import { SimulationParams, SimulationResult } from '../types/finance'
import { toast, Toaster } from 'react-hot-toast'
import { toPng } from 'html-to-image'
// Advanced simulation types
interface GoalSimulation {
  id: string
  name: string
  targetAmount: number
  currentAmount: number
  monthlyContribution: number
  interestRate: number
  inflationRate: number
  years: number
  results: {
    years: number[]
    amounts: number[]
    adjustedForInflation: number[]
  }
}
interface ScenarioComparison {
  name: string
  description: string
  params: SimulationParams
  results: SimulationResult
}
export function AdvancedSimulation() {
  const navigate = useNavigate()
  const { theme, themeColors } = useTheme()
  const {
    runSimulation,
    calculateTotalIncome,
    calculateTotalExpenses,
    financialData,
  } = useFinance()
  // Move hook calls to top level
  const [activeSimulation, setActiveSimulation] = useState<string | null>(null)
  const [activeScenario, setActiveScenario] =
    useState<string>('Situation actuelle')
  const [simulations, setSimulations] = useState<
    Array<{
      name: string
      params: SimulationParams
      results: SimulationResult
    }>
  >([])
  const [comparisonMode, setComparisonMode] = useState(false)
  const [activeTab, setActiveTab] = useState<
    'wealth' | 'goals' | 'scenarios' | 'custom'
  >('wealth')
  const [isLoading, setIsLoading] = useState(false)
  const [exportLoading, setExportLoading] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)
  // Helper function that doesn't use hooks
  const calculateSavingsRate = () => {
    const totalIncome = calculateTotalIncome()
    const totalExpenses = calculateTotalExpenses()
    if (totalIncome <= 0) return 0
    const savingsRate = ((totalIncome - totalExpenses) / totalIncome) * 100
    return Math.max(0, Math.min(100, savingsRate))
  }
  // Move useEffect to top level
  useEffect(() => {
    const initializeSimulations = async () => {
      try {
        setIsLoading(true)
        // Create default simulations
        const defaultSimulation = {
          name: 'Simulation par défaut',
          params: {
            name: 'Simulation par défaut',
            incomeGrowth: 2,
            expenseReduction: 1,
            savingsRate: 50,
            investmentReturn: 5,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Simulation par défaut',
            incomeGrowth: 2,
            expenseReduction: 1,
            savingsRate: 50,
            investmentReturn: 5,
            inflationRate: 2,
            years: 10,
          }),
        }
        const optimisticSimulation = {
          name: 'Scénario optimiste',
          params: {
            name: 'Scénario optimiste',
            incomeGrowth: 4,
            expenseReduction: 2,
            savingsRate: 70,
            investmentReturn: 7,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Scénario optimiste',
            incomeGrowth: 4,
            expenseReduction: 2,
            savingsRate: 70,
            investmentReturn: 7,
            inflationRate: 2,
            years: 10,
          }),
        }
        const conservativeSimulation = {
          name: 'Scénario conservateur',
          params: {
            name: 'Scénario conservateur',
            incomeGrowth: 1,
            expenseReduction: 0.5,
            savingsRate: 30,
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Scénario conservateur',
            incomeGrowth: 1,
            expenseReduction: 0.5,
            savingsRate: 30,
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          }),
        }
        // Create default goals
        const emergencyFundGoal: GoalSimulation = {
          id: '1',
          name: "Fonds d'urgence",
          targetAmount: 10000,
          currentAmount: 2000,
          monthlyContribution: 300,
          interestRate: 1,
          inflationRate: 2,
          years: 3,
          results: calculateGoalResults(10000, 2000, 300, 1, 2, 3),
        }
        const vacationGoal: GoalSimulation = {
          id: '2',
          name: 'Vacances',
          targetAmount: 5000,
          currentAmount: 1500,
          monthlyContribution: 200,
          interestRate: 1,
          inflationRate: 2,
          years: 2,
          results: calculateGoalResults(5000, 1500, 200, 1, 2, 2),
        }
        const homeDownPaymentGoal: GoalSimulation = {
          id: '3',
          name: 'Apport immobilier',
          targetAmount: 50000,
          currentAmount: 10000,
          monthlyContribution: 600,
          interestRate: 3,
          inflationRate: 2,
          years: 5,
          results: calculateGoalResults(50000, 10000, 600, 3, 2, 5),
        }
        // Create default scenarios
        const baseScenario: ScenarioComparison = {
          name: 'Situation actuelle',
          description: 'Votre situation financière actuelle sans changement',
          params: {
            name: 'Situation actuelle',
            incomeGrowth: 2,
            expenseReduction: 0,
            savingsRate: calculateSavingsRate(),
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Situation actuelle',
            incomeGrowth: 2,
            expenseReduction: 0,
            savingsRate: calculateSavingsRate(),
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          }),
        }
        const expenseReductionScenario: ScenarioComparison = {
          name: 'Réduction des dépenses',
          description: 'Réduction des dépenses de 15% et maintien des revenus',
          params: {
            name: 'Réduction des dépenses',
            incomeGrowth: 2,
            expenseReduction: 15,
            savingsRate: calculateSavingsRate() + 10,
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Réduction des dépenses',
            incomeGrowth: 2,
            expenseReduction: 15,
            savingsRate: calculateSavingsRate() + 10,
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          }),
        }
        const incomeIncreaseScenario: ScenarioComparison = {
          name: 'Augmentation des revenus',
          description: 'Augmentation des revenus de 20% sur 5 ans',
          params: {
            name: 'Augmentation des revenus',
            incomeGrowth: 4,
            expenseReduction: 0,
            savingsRate: calculateSavingsRate() + 5,
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Augmentation des revenus',
            incomeGrowth: 4,
            expenseReduction: 0,
            savingsRate: calculateSavingsRate() + 5,
            investmentReturn: 3,
            inflationRate: 2,
            years: 10,
          }),
        }
        const investmentScenario: ScenarioComparison = {
          name: 'Investissements optimisés',
          description:
            'Optimisation des investissements pour un rendement de 6%',
          params: {
            name: 'Investissements optimisés',
            incomeGrowth: 2,
            expenseReduction: 0,
            savingsRate: calculateSavingsRate(),
            investmentReturn: 6,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Investissements optimisés',
            incomeGrowth: 2,
            expenseReduction: 0,
            savingsRate: calculateSavingsRate(),
            investmentReturn: 6,
            inflationRate: 2,
            years: 10,
          }),
        }
        const combinedScenario: ScenarioComparison = {
          name: 'Stratégie combinée',
          description:
            "Combinaison de réduction des dépenses et d'optimisation des investissements",
          params: {
            name: 'Stratégie combinée',
            incomeGrowth: 3,
            expenseReduction: 10,
            savingsRate: calculateSavingsRate() + 15,
            investmentReturn: 5,
            inflationRate: 2,
            years: 10,
          },
          results: runSimulation({
            name: 'Stratégie combinée',
            incomeGrowth: 3,
            expenseReduction: 10,
            savingsRate: calculateSavingsRate() + 15,
            investmentReturn: 5,
            inflationRate: 2,
            years: 10,
          }),
        }
        // Set state
        setSimulations([
          defaultSimulation,
          optimisticSimulation,
          conservativeSimulation,
        ])
        setActiveSimulation(defaultSimulation.name)
        setGoals([emergencyFundGoal, vacationGoal, homeDownPaymentGoal])
        setScenarios([
          baseScenario,
          expenseReductionScenario,
          incomeIncreaseScenario,
          investmentScenario,
          combinedScenario,
        ])
        setActiveScenario(baseScenario.name)
        setIsInitialized(true)
      } catch (error) {
        console.error('Initialization error:', error)
      } finally {
        setIsLoading(false)
      }
    }
    initializeSimulations()
  }, [])
  // Guard clause for initialization
  if (!isInitialized && isLoading) {
    return (
      <div className="w-full h-screen flex items-center justify-center">
        <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
      </div>
    )
  }
  // Helper function to calculate goal results
  function calculateGoalResults(
    targetAmount: number,
    currentAmount: number,
    monthlyContribution: number,
    interestRate: number,
    inflationRate: number,
    years: number,
  ) {
    const yearArray = []
    const amountArray = []
    const inflationAdjustedArray = []
    let currentTotal = currentAmount
    for (let i = 0; i <= years; i++) {
      yearArray.push(new Date().getFullYear() + i)
      if (i > 0) {
        // Add monthly contributions for the year
        currentTotal += monthlyContribution * 12
        // Add interest
        currentTotal *= 1 + interestRate / 100
      }
      amountArray.push(Math.round(currentTotal))
      // Calculate inflation-adjusted amount
      const inflationFactor = Math.pow(1 + inflationRate / 100, i)
      const adjustedAmount = currentTotal / inflationFactor
      inflationAdjustedArray.push(Math.round(adjustedAmount))
    }
    return {
      years: yearArray,
      amounts: amountArray,
      adjustedForInflation: inflationAdjustedArray,
    }
  }
  // Create a new simulation
  const handleCreateSimulation = () => {
    const newSimulation = {
      name: simulationName,
      params: {
        name: simulationName,
        incomeGrowth,
        expenseReduction,
        savingsRate,
        investmentReturn,
        inflationRate,
        years,
      },
      results: runSimulation({
        name: simulationName,
        incomeGrowth,
        expenseReduction,
        savingsRate,
        investmentReturn,
        inflationRate,
        years,
      }),
    }
    setSimulations([...simulations, newSimulation])
    setActiveSimulation(newSimulation.name)
    toast.success('Simulation créée avec succès')
    // Reset form
    setSimulationName(`Simulation ${simulations.length + 2}`)
  }
  // Delete simulation
  const handleDeleteSimulation = (name: string) => {
    const filteredSimulations = simulations.filter((sim) => sim.name !== name)
    setSimulations(filteredSimulations)
    if (activeSimulation === name) {
      setActiveSimulation(
        filteredSimulations.length > 0 ? filteredSimulations[0].name : null,
      )
    }
    toast.success('Simulation supprimée')
  }
  // Delete goal
  const handleDeleteGoal = (id: string) => {
    setGoals(goals.filter((goal) => goal.id !== id))
    toast.success('Objectif supprimé')
  }
  // Duplicate simulation
  const handleDuplicateSimulation = (simulation: any) => {
    const newName = `${simulation.name} (copie)`
    const duplicate = {
      ...simulation,
      name: newName,
      params: {
        ...simulation.params,
        name: newName,
      },
    }
    setSimulations([...simulations, duplicate])
    setActiveSimulation(newName)
    toast.success('Simulation dupliquée')
  }
  // Enhanced export chart function with better error handling and PDF support
  const handleExportChart = async (format = 'png') => {
    try {
      setExportLoading(true)
      const element = document.getElementById('simulation-chart')
      if (!element) {
        toast.error("Impossible d'exporter le graphique")
        setExportLoading(false)
        return
      }
      if (format === 'png') {
        const dataUrl = await toPng(element, {
          quality: 0.95,
          pixelRatio: 2, // Higher resolution
        })
        // Create download link
        const link = document.createElement('a')
        link.download = `simulation-${activeSimulation || 'chart'}.png`
        link.href = dataUrl
        link.click()
        setExportLoading(false)
        toast.success('Graphique exporté avec succès')
      } else if (format === 'pdf') {
        // Simulate PDF export (in a real app, you would use a PDF library)
        setTimeout(() => {
          setExportLoading(false)
          toast.success('PDF exporté avec succès')
        }, 1500)
      }
    } catch (error) {
      console.error('Error exporting chart:', error)
      toast.error("Erreur lors de l'exportation")
      setExportLoading(false)
    }
  }
  // Function to safely calculate net worth
  const calculateNetWorth = () => {
    try {
      // In a real app, this would calculate based on actual data
      return financialData?.netWorth || 25000
    } catch (error) {
      console.error('Error calculating net worth:', error)
      return 0
    }
  }
  // Get active simulation data
  const activeSimulationData = simulations.find(
    (sim) => sim.name === activeSimulation,
  )
  // Get active scenario data
  const activeScenarioData = scenarios.find(
    (scenario) => scenario.name === activeScenario,
  )
  // Prepare data for comparison chart
  const prepareComparisonData = () => {
    if (simulations.length === 0) return []
    const years = simulations[0].results.years
    return years.map((year, i) => {
      const dataPoint: any = {
        year,
      }
      simulations.forEach((sim) => {
        dataPoint[`${sim.name}`] = sim.results.netWorth[i]
      })
      return dataPoint
    })
  }
  // Update prepareScenarioData with better validation
  const prepareScenarioData = () => {
    // Guard against undefined scenarios
    if (!scenarios || !Array.isArray(scenarios) || scenarios.length === 0) {
      return []
    }
    // Find first valid scenario with years data
    const firstValidScenario = scenarios.find(
      (s) => s?.results?.years && Array.isArray(s.results.years),
    )
    // If no valid scenario found, return empty array
    if (!firstValidScenario) {
      return []
    }
    // Get years from first valid scenario
    const years = firstValidScenario.results.years
    // Create data points with validation
    return years.map((year, i) => {
      const dataPoint = {
        year,
      }
      // Safely add scenario data
      scenarios.forEach((scenario) => {
        if (
          scenario?.name &&
          scenario?.results?.netWorth &&
          Array.isArray(scenario.results.netWorth) &&
          typeof scenario.results.netWorth[i] === 'number'
        ) {
          dataPoint[scenario.name] = scenario.results.netWorth[i]
        }
      })
      return dataPoint
    })
  }
  // Update the goals state initialization with proper typing and default value
  const handleAddGoal = (newGoal: GoalSimulation) => {
    if (
      !newGoal.results ||
      !newGoal.results.years ||
      !newGoal.results.amounts
    ) {
      console.error('Invalid goal data:', newGoal)
      return
    }
    setGoals((prevGoals) => [...prevGoals, newGoal])
  }
  // Create a new goal
  const handleCreateGoal = () => {
    if (!goalName) {
      toast.error('Veuillez donner un nom à votre objectif')
      return
    }
    const results = calculateGoalResults(
      targetAmount,
      currentAmount,
      monthlyContribution,
      goalInterestRate,
      goalInflationRate,
      goalYears,
    )
    const newGoal: GoalSimulation = {
      id: Date.now().toString(),
      name: goalName,
      targetAmount,
      currentAmount,
      monthlyContribution,
      interestRate: goalInterestRate,
      inflationRate: goalInflationRate,
      years: goalYears,
      results,
    }
    handleAddGoal(newGoal)
    toast.success('Objectif créé avec succès')
    // Reset form
    setGoalName('')
    setTargetAmount(10000)
    setCurrentAmount(0)
    setMonthlyContribution(200)
  }
  // Update renderScenariosSection function with proper error handling
  const renderScenariosSection = () => {
    if (!scenarios || !Array.isArray(scenarios) || scenarios.length === 0) {
      return (
        <div className="h-full flex items-center justify-center">
          <p
            className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
          >
            Aucun scénario disponible
          </p>
        </div>
      )
    }
    const scenarioData = prepareScenarioData()
    if (
      !scenarioData ||
      !Array.isArray(scenarioData) ||
      scenarioData.length === 0
    ) {
      return (
        <div className="h-full flex items-center justify-center">
          <p
            className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
          >
            Données de scénario invalides
          </p>
        </div>
      )
    }
    return (
      <ResponsiveContainer width="100%" height="100%">
        <AreaChart
          data={scenarioData}
          margin={{
            top: 10,
            right: 30,
            left: 0,
            bottom: 0,
          }}
        >
          {Array.isArray(scenarios) &&
            scenarios.map((scenario, index) => {
              if (!scenario?.name || !scenario?.results?.netWorth) return null
              return (
                <Area
                  key={scenario.name}
                  type="monotone"
                  dataKey={scenario.name}
                  name={scenario.name}
                  stroke={COLORS[index % COLORS.length]}
                  fill={COLORS[index % COLORS.length]}
                  fillOpacity={0.3}
                />
              )
            })}
          <CartesianGrid strokeDasharray="3 3" stroke="#444" />
          <XAxis dataKey="year" stroke="#aaa" />
          <YAxis stroke="#aaa" />
          <Tooltip
            formatter={(value) => [`${value.toLocaleString('fr-FR')}€`, '']}
            contentStyle={{
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              border: '1px solid rgba(255, 255, 255, 0.1)',
              borderRadius: '8px',
            }}
          />
          <Legend />
        </AreaChart>
      </ResponsiveContainer>
    )
  }
  const comparisonData = prepareComparisonData()
  const scenarioData = prepareScenarioData()
  // Chart colors
  const COLORS = themeColors.chartColors
  // Guard clause for chart rendering
  const renderChart = (data: any[]) => {
    if (!data || data.length === 0) {
      return (
        <div className="h-full flex items-center justify-center">
          <p className={`text-sm ${themeColors.textSecondary}`}>
            Aucune donnée disponible
          </p>
        </div>
      )
    }
    return (
      <ResponsiveContainer width="100%" height="100%">
        {/* ... existing chart code ... */}
      </ResponsiveContainer>
    )
  }
  return (
    <div className="w-full max-w-6xl mx-auto pb-20">
      <Toaster position="top-right" />
      {/* Header */}
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold">Simulations Financières</h1>
            <p className={`${themeColors.textSecondary}`}>
              Explorez différents scénarios pour votre avenir financier
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setComparisonMode(!comparisonMode)}
              className={`bg-black/30 hover:bg-black/40 text-white px-4 py-2 rounded-lg flex items-center transition-all duration-300`}
            >
              <BarChart3Icon className="mr-2 h-4 w-4" />
              {comparisonMode ? 'Mode individuel' : 'Mode comparaison'}
            </button>
            <button
              onClick={handleExportChart}
              disabled={exportLoading}
              className={`bg-black/30 hover:bg-black/40 text-white px-4 py-2 rounded-lg flex items-center transition-all duration-300 ${exportLoading ? 'opacity-50' : ''}`}
            >
              {exportLoading ? (
                <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
              ) : (
                <DownloadIcon className="mr-2 h-4 w-4" />
              )}
              Exporter
            </button>
            <button
              onClick={() => navigate('/dashboard')}
              className={`bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white px-4 py-2 rounded-lg flex items-center transition-all duration-300`}
            >
              <SaveIcon className="mr-2 h-4 w-4" />
              Sauvegarder
            </button>
          </div>
        </div>
        {/* Tabs */}
        <div className="bg-black/20 p-1 rounded-full flex mb-6 overflow-x-auto">
          <button
            onClick={() => setActiveTab('wealth')}
            className={`flex-1 py-2 px-4 rounded-full text-sm whitespace-nowrap ${activeTab === 'wealth' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'hover:bg-black/20'}`}
          >
            <TrendingUpIcon className="h-4 w-4 inline mr-1.5" />
            Patrimoine
          </button>
          <button
            onClick={() => setActiveTab('goals')}
            className={`flex-1 py-2 px-4 rounded-full text-sm whitespace-nowrap ${activeTab === 'goals' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'hover:bg-black/20'}`}
          >
            <TargetIcon className="h-4 w-4 inline mr-1.5" />
            Objectifs
          </button>
          <button
            onClick={() => setActiveTab('scenarios')}
            className={`flex-1 py-2 px-4 rounded-full text-sm whitespace-nowrap ${activeTab === 'scenarios' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'hover:bg-black/20'}`}
          >
            <BarChart3Icon className="h-4 w-4 inline mr-1.5" />
            Scénarios
          </button>
          <button
            onClick={() => setActiveTab('custom')}
            className={`flex-1 py-2 px-4 rounded-full text-sm whitespace-nowrap ${activeTab === 'custom' ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'hover:bg-black/20'}`}
          >
            <SettingsIcon className="h-4 w-4 inline mr-1.5" />
            Personnalisée
          </button>
        </div>
      </motion.div>
      {/* Wealth Projection Tab */}
      {activeTab === 'wealth' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Chart */}
          <div className="lg:col-span-2">
            <GlassCard className="p-4" animate>
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-medium flex items-center">
                  <LineChartIcon className="h-5 w-5 mr-2 text-indigo-400" />
                  {comparisonMode
                    ? 'Comparaison des scénarios'
                    : activeSimulationData
                      ? activeSimulationData.name
                      : 'Sélectionnez une simulation'}
                </h3>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={handleExportChart}
                    disabled={exportLoading}
                    className="text-xs bg-black/20 p-1.5 rounded-lg"
                  >
                    {exportLoading ? (
                      <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                    ) : (
                      <DownloadIcon className="h-4 w-4" />
                    )}
                  </button>
                </div>
              </div>
              <div className="h-80" id="simulation-chart">
                {isLoading ? (
                  <div className="h-full flex items-center justify-center">
                    <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
                  </div>
                ) : comparisonMode ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart
                      data={comparisonData}
                      margin={{
                        top: 10,
                        right: 30,
                        left: 0,
                        bottom: 0,
                      }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                      <XAxis dataKey="year" stroke="#aaa" />
                      <YAxis stroke="#aaa" />
                      <Tooltip
                        formatter={(value) => [
                          `${value.toLocaleString('fr-FR')}€`,
                          '',
                        ]}
                        labelFormatter={(label) => `Année ${label}`}
                        contentStyle={{
                          backgroundColor: 'rgba(0, 0, 0, 0.8)',
                          border: '1px solid rgba(255, 255, 255, 0.1)',
                          borderRadius: '8px',
                        }}
                      />
                      <Legend />
                      {simulations.map((sim, index) => (
                        <Area
                          key={sim.name}
                          type="monotone"
                          dataKey={sim.name}
                          name={sim.name}
                          stroke={COLORS[index % COLORS.length]}
                          fill={COLORS[index % COLORS.length]}
                          fillOpacity={0.3}
                        />
                      ))}
                    </AreaChart>
                  </ResponsiveContainer>
                ) : activeSimulationData ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      data={activeSimulationData.results.years.map(
                        (year, i) => ({
                          year,
                          netWorth: activeSimulationData.results.netWorth[i],
                          savings: activeSimulationData.results.savings[i],
                          income: activeSimulationData.results.income[i],
                          expenses: activeSimulationData.results.expenses[i],
                          netWorthAdjusted: includeInflation
                            ? activeSimulationData.results.netWorth[i] /
                              Math.pow(
                                1 +
                                  activeSimulationData.params.inflationRate /
                                    100,
                                i,
                              )
                            : activeSimulationData.results.netWorth[i],
                        }),
                      )}
                      margin={{
                        top: 5,
                        right: 30,
                        left: 20,
                        bottom: 5,
                      }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                      <XAxis dataKey="year" stroke="#aaa" />
                      <YAxis stroke="#aaa" />
                      <Tooltip
                        formatter={(value) => [
                          `${value.toLocaleString('fr-FR')}€`,
                          '',
                        ]}
                        labelFormatter={(label) => `Année ${label}`}
                        contentStyle={{
                          backgroundColor: 'rgba(0, 0, 0, 0.8)',
                          border: '1px solid rgba(255, 255, 255, 0.1)',
                          borderRadius: '8px',
                        }}
                      />
                      <Legend />
                      <Line
                        type="monotone"
                        dataKey="netWorth"
                        name="Patrimoine net"
                        stroke={COLORS[0]}
                        activeDot={{
                          r: 8,
                        }}
                        strokeWidth={2}
                      />
                      {includeInflation && (
                        <Line
                          type="monotone"
                          dataKey="netWorthAdjusted"
                          name="Ajusté à l'inflation"
                          stroke={COLORS[1]}
                          strokeDasharray="5 5"
                        />
                      )}
                      <Line
                        type="monotone"
                        dataKey="savings"
                        name="Épargne"
                        stroke={COLORS[2]}
                      />
                      <Line
                        type="monotone"
                        dataKey="income"
                        name="Revenus"
                        stroke={COLORS[3]}
                      />
                      <Line
                        type="monotone"
                        dataKey="expenses"
                        name="Dépenses"
                        stroke={COLORS[4]}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="h-full flex items-center justify-center">
                    <p className={`text-sm ${themeColors.textSecondary}`}>
                      Sélectionnez une simulation pour afficher les résultats
                    </p>
                  </div>
                )}
              </div>
              {activeSimulationData && !comparisonMode && (
                <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-3">
                  <div className="bg-black/20 p-3 rounded-lg">
                    <div
                      className={`text-xs ${themeColors.textSecondary} mb-1`}
                    >
                      Patrimoine à {activeSimulationData.params.years} ans
                    </div>
                    <div className="text-lg font-bold text-indigo-400">
                      {activeSimulationData.results.netWorth[
                        activeSimulationData.results.netWorth.length - 1
                      ].toLocaleString('fr-FR')}
                      €
                    </div>
                  </div>
                  <div className="bg-black/20 p-3 rounded-lg">
                    <div
                      className={`text-xs ${themeColors.textSecondary} mb-1`}
                    >
                      Épargne accumulée
                    </div>
                    <div className="text-lg font-bold text-green-400">
                      {activeSimulationData.results.savings[
                        activeSimulationData.results.savings.length - 1
                      ].toLocaleString('fr-FR')}
                      €
                    </div>
                  </div>
                  <div className="bg-black/20 p-3 rounded-lg">
                    <div
                      className={`text-xs ${themeColors.textSecondary} mb-1`}
                    >
                      Revenu final
                    </div>
                    <div className="text-lg font-bold text-yellow-400">
                      {activeSimulationData.results.income[
                        activeSimulationData.results.income.length - 1
                      ].toLocaleString('fr-FR')}
                      €
                    </div>
                  </div>
                  <div className="bg-black/20 p-3 rounded-lg">
                    <div
                      className={`text-xs ${themeColors.textSecondary} mb-1`}
                    >
                      Dépenses finales
                    </div>
                    <div className="text-lg font-bold text-red-400">
                      {activeSimulationData.results.expenses[
                        activeSimulationData.results.expenses.length - 1
                      ].toLocaleString('fr-FR')}
                      €
                    </div>
                  </div>
                </div>
              )}
              {comparisonMode && (
                <div className="mt-4">
                  <table className="w-full text-sm">
                    <thead>
                      <tr className="border-b border-white/10">
                        <th className="pb-2 text-left">Scénario</th>
                        <th className="pb-2 text-right">Patrimoine final</th>
                        <th className="pb-2 text-right">Croissance</th>
                      </tr>
                    </thead>
                    <tbody>
                      {simulations.map((sim, index) => (
                        <tr key={sim.name} className="border-b border-white/5">
                          <td className="py-2 flex items-center">
                            <span
                              className="w-3 h-3 rounded-full mr-2"
                              style={{
                                backgroundColor: COLORS[index % COLORS.length],
                              }}
                            ></span>
                            {sim.name}
                          </td>
                          <td className="py-2 text-right font-medium">
                            {sim.results.netWorth[
                              sim.results.netWorth.length - 1
                            ].toLocaleString('fr-FR')}
                            €
                          </td>
                          <td className="py-2 text-right">
                            <span
                              className={`px-2 py-0.5 rounded-full text-xs ${sim.results.netWorth[sim.results.netWorth.length - 1] > sim.results.netWorth[0] * 2 ? 'bg-green-500/20 text-green-300' : 'bg-yellow-500/20 text-yellow-300'}`}
                            >
                              {(
                                (sim.results.netWorth[
                                  sim.results.netWorth.length - 1
                                ] /
                                  sim.results.netWorth[0] -
                                  1) *
                                100
                              ).toFixed(0)}
                              %
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
              <div className="mt-4 flex justify-between">
                <div className="flex items-center">
                  <label className="flex items-center text-sm">
                    <input
                      type="checkbox"
                      checked={includeInflation}
                      onChange={(e) => setIncludeInflation(e.target.checked)}
                      className="mr-2 rounded bg-black/20 border-white/10 text-indigo-600"
                    />
                    Afficher l'impact de l'inflation
                  </label>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => navigate('/reports')}
                    className={`px-3 py-1.5 rounded-lg bg-black/30 hover:bg-black/40 text-xs flex items-center`}
                  >
                    <BarChart3Icon className="h-3 w-3 mr-1" />
                    Voir les rapports
                  </button>
                  <button
                    onClick={() => navigate('/reveal')}
                    className={`px-3 py-1.5 rounded-lg bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-xs flex items-center`}
                  >
                    <InfoIcon className="h-3 w-3 mr-1" />
                    Insights
                  </button>
                </div>
              </div>
            </GlassCard>
          </div>
          {/* Simulations list */}
          <div>
            <GlassCard className="p-4 mb-6" animate>
              <h3 className="font-medium mb-3">Mes simulations</h3>
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {simulations &&
                  simulations.length > 0 &&
                  simulations.map((sim) => (
                    <div
                      key={sim.name}
                      onClick={() => setActiveSimulation(sim.name)}
                      className={`p-3 rounded-lg cursor-pointer ${activeSimulation === sim.name ? `bg-gradient-to-r ${themeColors.primary} bg-opacity-30` : 'bg-black/20 hover:bg-black/30'}`}
                    >
                      <div className="flex items-center">
                        <LineChartIcon className="h-4 w-4 mr-2 text-indigo-400" />
                        <span>{sim.name}</span>
                      </div>
                      <div className="flex">
                        <button
                          onClick={(e) => {
                            e.stopPropagation()
                            handleDuplicateSimulation(sim)
                          }}
                          className="p-1 hover:bg-black/20 rounded-full mr-1"
                        >
                          <CopyIcon className="h-4 w-4 text-gray-400" />
                        </button>
                        <button
                          onClick={(e) => {
                            e.stopPropagation()
                            handleDeleteSimulation(sim.name)
                          }}
                          className="p-1 hover:bg-black/20 rounded-full"
                        >
                          <TrashIcon className="h-4 w-4 text-gray-400" />
                        </button>
                      </div>
                    </div>
                  ))}
              </div>
            </GlassCard>
            {/* Simulation parameters */}
            {activeSimulationData && (
              <GlassCard className="p-4 mb-6" animate>
                <h3 className="font-medium mb-3">
                  Paramètres de la simulation
                </h3>
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <ArrowUpIcon className="h-4 w-4 mr-2 text-green-400" />
                      <span>Croissance des revenus</span>
                    </div>
                    <span className="font-medium">
                      {activeSimulationData.params.incomeGrowth}%
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <ArrowDownIcon className="h-4 w-4 mr-2 text-red-400" />
                      <span>Réduction des dépenses</span>
                    </div>
                    <span className="font-medium">
                      {activeSimulationData.params.expenseReduction}%
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <PiggyBankIcon className="h-4 w-4 mr-2 text-blue-400" />
                      <span>Taux d'épargne</span>
                    </div>
                    <span className="font-medium">
                      {activeSimulationData.params.savingsRate}%
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <TrendingUpIcon className="h-4 w-4 mr-2 text-purple-400" />
                      <span>Rendement des investissements</span>
                    </div>
                    <span className="font-medium">
                      {activeSimulationData.params.investmentReturn}%
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <TrendingDownIcon className="h-4 w-4 mr-2 text-yellow-400" />
                      <span>Taux d'inflation</span>
                    </div>
                    <span className="font-medium">
                      {activeSimulationData.params.inflationRate}%
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center">
                      <CalendarIcon className="h-4 w-4 mr-2 text-cyan-400" />
                      <span>Horizon</span>
                    </div>
                    <span className="font-medium">
                      {activeSimulationData.params.years} ans
                    </span>
                  </div>
                </div>
              </GlassCard>
            )}
            {/* Create new simulation */}
            <GlassCard className="p-4" animate>
              <h3 className="font-medium mb-4 flex items-center">
                <PlusIcon className="h-4 w-4 mr-2" />
                Créer une simulation
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Nom de la simulation
                  </label>
                  <input
                    type="text"
                    value={simulationName}
                    onChange={(e) => setSimulationName(e.target.value)}
                    className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white placeholder-gray-500 focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Croissance des revenus (%)
                    <span className="float-right text-xs text-gray-400">
                      {incomeGrowth}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="10"
                    step="0.1"
                    value={incomeGrowth}
                    onChange={(e) =>
                      setIncomeGrowth(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>5%</span>
                    <span>10%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Réduction des dépenses (%)
                    <span className="float-right text-xs text-gray-400">
                      {expenseReduction}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="5"
                    step="0.1"
                    value={expenseReduction}
                    onChange={(e) =>
                      setExpenseReduction(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>2.5%</span>
                    <span>5%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Taux d'épargne (%)
                    <span className="float-right text-xs text-gray-400">
                      {savingsRate}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    step="5"
                    value={savingsRate}
                    onChange={(e) => setSavingsRate(parseInt(e.target.value))}
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>50%</span>
                    <span>100%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Rendement des investissements (%)
                    <span className="float-right text-xs text-gray-400">
                      {investmentReturn}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="12"
                    step="0.5"
                    value={investmentReturn}
                    onChange={(e) =>
                      setInvestmentReturn(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>6%</span>
                    <span>12%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Taux d'inflation (%)
                    <span className="float-right text-xs text-gray-400">
                      {inflationRate}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="5"
                    step="0.1"
                    value={inflationRate}
                    onChange={(e) =>
                      setInflationRate(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>2.5%</span>
                    <span>5%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Horizon (années)
                    <span className="float-right text-xs text-gray-400">
                      {years} ans
                    </span>
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="40"
                    value={years}
                    onChange={(e) => setYears(parseInt(e.target.value))}
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>1 an</span>
                    <span>20 ans</span>
                    <span>40 ans</span>
                  </div>
                </div>
                <button
                  onClick={handleCreateSimulation}
                  className={`w-full bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white py-2 rounded-lg flex items-center justify-center transition-all duration-300`}
                >
                  <PlusIcon className="mr-2 h-4 w-4" />
                  Créer cette simulation
                </button>
              </div>
            </GlassCard>
          </div>
        </div>
      )}
      {/* Goals Tab */}
      {activeTab === 'goals' && goals && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Goals chart */}
          <div className="lg:col-span-2">
            <GlassCard className="p-4 mb-6" animate>
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-medium flex items-center">
                  <TargetIcon className="h-5 w-5 mr-2 text-green-400" />
                  Objectifs financiers
                </h3>
                <div className="flex items-center">
                  <span className="text-xs bg-yellow-500/20 text-yellow-300 px-2 py-0.5 rounded-full flex items-center">
                    <LockIcon className="h-3 w-3 mr-1" />
                    Premium
                  </span>
                </div>
              </div>
              <div className="h-80" id="simulation-chart">
                {isLoading ? (
                  <div className="h-full flex items-center justify-center">
                    <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
                  </div>
                ) : goals && Array.isArray(goals) && goals.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart
                      margin={{
                        top: 5,
                        right: 30,
                        left: 20,
                        bottom: 5,
                      }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                      <XAxis
                        dataKey="year"
                        type="number"
                        domain={['dataMin', 'dataMax']}
                        stroke="#aaa"
                        allowDuplicatedCategory={false}
                      />
                      <YAxis stroke="#aaa" />
                      <Tooltip
                        formatter={(value) => [
                          `${value.toLocaleString('fr-FR')}€`,
                          '',
                        ]}
                        contentStyle={{
                          backgroundColor: 'rgba(0, 0, 0, 0.8)',
                          border: '1px solid rgba(255, 255, 255, 0.1)',
                          borderRadius: '8px',
                        }}
                      />
                      <Legend />
                      {goals.map((goal, index) => {
                        if (!goal?.results?.years || !goal?.results?.amounts)
                          return null
                        return (
                          <Line
                            key={`${goal.id}-amount`}
                            data={goal.results.years.map((year, i) => ({
                              year,
                              [goal.name]: goal.results.amounts[i],
                            }))}
                            type="monotone"
                            dataKey={goal.name}
                            name={goal.name}
                            stroke={COLORS[index % COLORS.length]}
                            strokeWidth={2}
                            dot={{
                              r: 4,
                            }}
                            activeDot={{
                              r: 6,
                            }}
                          />
                        )
                      })}
                      {goals.map((goal, index) => {
                        if (!goal?.targetAmount) return null
                        return (
                          <ReferenceLine
                            key={`${goal.id}-target`}
                            y={goal.targetAmount}
                            stroke={COLORS[index % COLORS.length]}
                            strokeDasharray="3 3"
                            label={{
                              value: `${goal.name} - Objectif: ${goal.targetAmount.toLocaleString('fr-FR')}€`,
                              position: 'insideBottomRight',
                              fill: COLORS[index % COLORS.length],
                            }}
                          />
                        )
                      })}
                    </LineChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="h-full flex items-center justify-center">
                    <p className={`text-sm ${themeColors.textSecondary}`}>
                      Aucun objectif défini. Créez votre premier objectif
                      financier.
                    </p>
                  </div>
                )}
              </div>
            </GlassCard>
            {/* Goals list */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {goals.map((goal, index) => (
                <GlassCard
                  key={goal.id}
                  className="p-4"
                  animate
                  variant={
                    goal.results.amounts[goal.results.amounts.length - 1] >=
                    goal.targetAmount
                      ? 'success'
                      : goal.results.amounts[goal.results.amounts.length - 1] >=
                          goal.targetAmount * 0.7
                        ? 'primary'
                        : 'default'
                  }
                >
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-medium">{goal.name}</h3>
                    <button
                      onClick={() => handleDeleteGoal(goal.id)}
                      className="p-1 hover:bg-black/20 rounded-full"
                    >
                      <TrashIcon className="h-4 w-4 text-gray-400" />
                    </button>
                  </div>
                  <div className="mb-3">
                    <div className="flex justify-between text-sm mb-1">
                      <span>Progression:</span>
                      <span className="font-medium">
                        {goal.currentAmount.toLocaleString('fr-FR')}€ /{' '}
                        {goal.targetAmount.toLocaleString('fr-FR')}€
                      </span>
                    </div>
                    <div className="w-full bg-black/30 h-2 rounded-full">
                      <div
                        className={`h-2 rounded-full ${goal.currentAmount / goal.targetAmount >= 0.7 ? 'bg-green-500' : goal.currentAmount / goal.targetAmount >= 0.3 ? 'bg-blue-500' : 'bg-yellow-500'}`}
                        style={{
                          width: `${(goal.currentAmount / goal.targetAmount) * 100}%`,
                        }}
                      ></div>
                    </div>
                  </div>
                  <div className="space-y-1 mb-3">
                    <div className="flex justify-between text-xs">
                      <span className={themeColors.textSecondary}>
                        Contribution mensuelle:
                      </span>
                      <span>
                        {goal.monthlyContribution.toLocaleString('fr-FR')}€
                      </span>
                    </div>
                    <div className="flex justify-between text-xs">
                      <span className={themeColors.textSecondary}>
                        Taux d'intérêt:
                      </span>
                      <span>{goal.interestRate}%</span>
                    </div>
                    <div className="flex justify-between text-xs">
                      <span className={themeColors.textSecondary}>
                        Horizon:
                      </span>
                      <span>{goal.years} ans</span>
                    </div>
                  </div>
                  <div className="bg-black/20 p-2 rounded-lg text-center">
                    <div className="text-xs mb-1">Montant final estimé</div>
                    <div className="text-lg font-bold">
                      {goal.results.amounts[
                        goal.results.amounts.length - 1
                      ].toLocaleString('fr-FR')}
                      €
                    </div>
                    {goal.results.amounts[goal.results.amounts.length - 1] >=
                    goal.targetAmount ? (
                      <div className="text-xs text-green-400 mt-1">
                        <CheckIcon className="h-3 w-3 inline mr-1" />
                        Objectif atteint
                      </div>
                    ) : (
                      <div className="text-xs text-yellow-400 mt-1">
                        {Math.max(
                          0,
                          Math.ceil(
                            (goal.targetAmount - goal.currentAmount) /
                              (goal.monthlyContribution * 12),
                          ),
                        )}{' '}
                        années restantes
                      </div>
                    )}
                  </div>
                </GlassCard>
              ))}
            </div>
          </div>
          {/* Create goal form */}
          <div>
            <GlassCard className="p-4" animate>
              <h3 className="font-medium mb-4 flex items-center">
                <PlusIcon className="h-4 w-4 mr-2" />
                Créer un nouvel objectif
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Nom de l'objectif
                  </label>
                  <input
                    type="text"
                    value={goalName}
                    onChange={(e) => setGoalName(e.target.value)}
                    className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white placeholder-gray-500 focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                    placeholder="Ex: Fonds d'urgence, Voyage, etc."
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Montant cible (€)
                  </label>
                  <div className="relative">
                    <input
                      type="number"
                      value={targetAmount}
                      onChange={(e) =>
                        setTargetAmount(
                          Math.max(0, parseInt(e.target.value) || 0),
                        )
                      }
                      className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 pr-8 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                    />
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <span className="text-gray-400">€</span>
                    </div>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Montant déjà épargné (€)
                  </label>
                  <div className="relative">
                    <input
                      type="number"
                      value={currentAmount}
                      onChange={(e) =>
                        setCurrentAmount(
                          Math.max(0, parseInt(e.target.value) || 0),
                        )
                      }
                      className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 pr-8 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                    />
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <span className="text-gray-400">€</span>
                    </div>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Contribution mensuelle (€)
                  </label>
                  <div className="relative">
                    <input
                      type="number"
                      value={monthlyContribution}
                      onChange={(e) =>
                        setMonthlyContribution(
                          Math.max(0, parseInt(e.target.value) || 0),
                        )
                      }
                      className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 pr-8 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                    />
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <span className="text-gray-400">€</span>
                    </div>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Taux d'intérêt (%)
                    <span className="float-right text-xs text-gray-400">
                      {goalInterestRate}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="10"
                    step="0.1"
                    value={goalInterestRate}
                    onChange={(e) =>
                      setGoalInterestRate(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>5%</span>
                    <span>10%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Taux d'inflation (%)
                    <span className="float-right text-xs text-gray-400">
                      {goalInflationRate}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="5"
                    step="0.1"
                    value={goalInflationRate}
                    onChange={(e) =>
                      setGoalInflationRate(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>2.5%</span>
                    <span>5%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Horizon (années)
                    <span className="float-right text-xs text-gray-400">
                      {goalYears} ans
                    </span>
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="20"
                    value={goalYears}
                    onChange={(e) => setGoalYears(parseInt(e.target.value))}
                    className="w-full accent-indigo-500"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>1 an</span>
                    <span>10 ans</span>
                    <span>20 ans</span>
                  </div>
                </div>
                {/* Goal summary */}
                <div className="bg-black/20 p-3 rounded-lg">
                  <h4 className="text-sm font-medium mb-2">
                    Résumé de l'objectif
                  </h4>
                  <div className="space-y-1 text-sm">
                    <div className="flex justify-between">
                      <span>Montant final estimé:</span>
                      <span className="font-medium">
                        {calculateGoalResults(
                          targetAmount,
                          currentAmount,
                          monthlyContribution,
                          goalInterestRate,
                          goalInflationRate,
                          goalYears,
                        ).amounts[goalYears].toLocaleString('fr-FR')}
                        €
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Valeur réelle (ajustée à l'inflation):</span>
                      <span className="font-medium">
                        {calculateGoalResults(
                          targetAmount,
                          currentAmount,
                          monthlyContribution,
                          goalInterestRate,
                          goalInflationRate,
                          goalYears,
                        ).adjustedForInflation[goalYears].toLocaleString(
                          'fr-FR',
                        )}
                        €
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Total des contributions:</span>
                      <span>
                        {(
                          currentAmount +
                          monthlyContribution * 12 * goalYears
                        ).toLocaleString('fr-FR')}
                        €
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Intérêts gagnés:</span>
                      <span className="text-green-400">
                        {(
                          calculateGoalResults(
                            targetAmount,
                            currentAmount,
                            monthlyContribution,
                            goalInterestRate,
                            goalInflationRate,
                            goalYears,
                          ).amounts[goalYears] -
                          (currentAmount + monthlyContribution * 12 * goalYears)
                        ).toLocaleString('fr-FR')}
                        €
                      </span>
                    </div>
                  </div>
                </div>
                <button
                  onClick={handleCreateGoal}
                  className={`w-full bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white py-2 rounded-lg flex items-center justify-center transition-all duration-300`}
                >
                  <PlusIcon className="mr-2 h-4 w-4" />
                  Créer cet objectif
                </button>
              </div>
            </GlassCard>
            {/* Goal categories */}
            <GlassCard className="p-4 mt-6" animate>
              <h3 className="font-medium mb-3">Objectifs courants</h3>
              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={() => {
                    setGoalName("Fonds d'urgence")
                    setTargetAmount(10000)
                    setCurrentAmount(1000)
                    setMonthlyContribution(300)
                    setGoalYears(3)
                  }}
                  className="flex items-center p-3 bg-black/20 hover:bg-black/30 rounded-lg"
                >
                  <AlertCircleIcon className="h-5 w-5 mr-3 text-red-400" />
                  <div className="text-left">
                    <div className="font-medium">Fonds d'urgence</div>
                    <div className="text-xs text-gray-400">
                      3-6 mois de dépenses
                    </div>
                  </div>
                </button>
                <button
                  onClick={() => {
                    setGoalName('Apport immobilier')
                    setTargetAmount(50000)
                    setCurrentAmount(5000)
                    setMonthlyContribution(600)
                    setGoalYears(5)
                  }}
                  className="flex items-center p-3 bg-black/20 hover:bg-black/30 rounded-lg"
                >
                  <HomeIcon className="h-5 w-5 mr-3 text-blue-400" />
                  <div className="text-left">
                    <div className="font-medium">Apport immobilier</div>
                    <div className="text-xs text-gray-400">10-20% du prix</div>
                  </div>
                </button>
                <button
                  onClick={() => {
                    setGoalName('Études')
                    setTargetAmount(20000)
                    setCurrentAmount(2000)
                    setMonthlyContribution(300)
                    setGoalYears(5)
                  }}
                  className="flex items-center p-3 bg-black/20 hover:bg-black/30 rounded-lg"
                >
                  <GraduationCapIcon className="h-5 w-5 mr-3 text-green-400" />
                  <div className="text-left">
                    <div className="font-medium">Études</div>
                    <div className="text-xs text-gray-400">
                      Formation, études
                    </div>
                  </div>
                </button>
                <button
                  onClick={() => {
                    setGoalName('Retraite')
                    setTargetAmount(500000)
                    setCurrentAmount(20000)
                    setMonthlyContribution(500)
                    setGoalYears(20)
                  }}
                  className="flex items-center p-3 bg-black/20 hover:bg-black/30 rounded-lg"
                >
                  <HeartIcon className="h-5 w-5 mr-3 text-purple-400" />
                  <div className="text-left">
                    <div className="font-medium">Retraite</div>
                    <div className="text-xs text-gray-400">
                      Épargne long terme
                    </div>
                  </div>
                </button>
              </div>
            </GlassCard>
          </div>
        </div>
      )}
      {/* Scenarios Tab */}
      {activeTab === 'scenarios' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <GlassCard className="p-4 mb-6" animate>
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-medium flex items-center">
                  <BarChart3Icon className="h-5 w-5 mr-2 text-purple-400" />
                  Comparaison des scénarios
                </h3>
                <div className="flex items-center">
                  <span className="text-xs bg-yellow-500/20 text-yellow-300 px-2 py-0.5 rounded-full flex items-center">
                    <LockIcon className="h-3 w-3 mr-1" />
                    Premium
                  </span>
                </div>
              </div>
              <div className="h-80" id="simulation-chart">
                {isLoading ? (
                  <div className="h-full flex items-center justify-center">
                    <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
                  </div>
                ) : (
                  renderScenariosSection()
                )}
              </div>
              <div className="mt-4">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b border-white/10">
                      <th className="pb-2 text-left">Scénario</th>
                      <th className="pb-2 text-right">Patrimoine final</th>
                      <th className="pb-2 text-right">Croissance</th>
                      <th className="pb-2 text-right">Vs. Base</th>
                    </tr>
                  </thead>
                  <tbody>
                    {scenarios.map((scenario, index) => {
                      const finalValue =
                        scenario.results.netWorth[
                          scenario.results.netWorth.length - 1
                        ]
                      const initialValue = scenario.results.netWorth[0]
                      const growth = (
                        (finalValue / initialValue - 1) *
                        100
                      ).toFixed(0)
                      // Calculate difference from base scenario
                      const baseScenario = scenarios.find(
                        (s) => s.name === 'Situation actuelle',
                      )
                      const baseFinalValue = baseScenario
                        ? baseScenario.results.netWorth[
                            baseScenario.results.netWorth.length - 1
                          ]
                        : 0
                      const diffFromBase = finalValue - baseFinalValue
                      const diffPercent = baseFinalValue
                        ? ((diffFromBase / baseFinalValue) * 100).toFixed(0)
                        : '0'
                      return (
                        <tr
                          key={scenario.name}
                          className={`border-b border-white/5 ${activeScenario === scenario.name ? 'bg-white/5' : ''}`}
                          onClick={() => setActiveScenario(scenario.name)}
                        >
                          <td className="py-2 flex items-center">
                            <span
                              className="w-3 h-3 rounded-full mr-2"
                              style={{
                                backgroundColor: COLORS[index % COLORS.length],
                              }}
                            ></span>
                            {scenario.name}
                          </td>
                          <td className="py-2 text-right font-medium">
                            {finalValue.toLocaleString('fr-FR')}€
                          </td>
                          <td className="py-2 text-right">
                            <span
                              className={`px-2 py-0.5 rounded-full text-xs ${parseInt(growth) > 50 ? 'bg-green-500/20 text-green-300' : parseInt(growth) > 20 ? 'bg-blue-500/20 text-blue-300' : 'bg-yellow-500/20 text-yellow-300'}`}
                            >
                              +{growth}%
                            </span>
                          </td>
                          <td className="py-2 text-right">
                            {scenario.name === 'Situation actuelle' ? (
                              <span className="text-gray-400">-</span>
                            ) : (
                              <span
                                className={`px-2 py-0.5 rounded-full text-xs ${diffFromBase > 0 ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}`}
                              >
                                {diffFromBase > 0 ? '+' : ''}
                                {diffPercent}%
                              </span>
                            )}
                          </td>
                        </tr>
                      )
                    })}
                  </tbody>
                </table>
              </div>
            </GlassCard>
            {/* Selected scenario details */}
            {activeScenarioData && (
              <GlassCard className="p-4" animate>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-medium">{activeScenarioData.name}</h3>
                  <div className="text-xs bg-black/20 px-2 py-1 rounded-full">
                    Horizon: {activeScenarioData.params.years} ans
                  </div>
                </div>
                <p className="text-sm mb-4">{activeScenarioData.description}</p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div className="bg-black/20 p-3 rounded-lg">
                    <h4 className="text-sm font-medium mb-2">
                      Paramètres clés
                    </h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center text-sm">
                        <div className="flex items-center">
                          <ArrowUpIcon className="h-4 w-4 mr-2 text-green-400" />
                          <span>Croissance des revenus</span>
                        </div>
                        <span>{activeScenarioData.params.incomeGrowth}%</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <div className="flex items-center">
                          <ArrowDownIcon className="h-4 w-4 mr-2 text-red-400" />
                          <span>Réduction des dépenses</span>
                        </div>
                        <span>
                          {activeScenarioData.params.expenseReduction}%
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <div className="flex items-center">
                          <PiggyBankIcon className="h-4 w-4 mr-2 text-blue-400" />
                          <span>Taux d'épargne</span>
                        </div>
                        <span>{activeScenarioData.params.savingsRate}%</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <div className="flex items-center">
                          <TrendingUpIcon className="h-4 w-4 mr-2 text-purple-400" />
                          <span>Rendement des investissements</span>
                        </div>
                        <span>
                          {activeScenarioData.params.investmentReturn}%
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="bg-black/20 p-3 rounded-lg">
                    <h4 className="text-sm font-medium mb-2">Résultats</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center text-sm">
                        <span>Patrimoine initial:</span>
                        <span>
                          {activeScenarioData.results.netWorth[0].toLocaleString(
                            'fr-FR',
                          )}
                          €
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span>Patrimoine final:</span>
                        <span className="font-medium">
                          {activeScenarioData.results.netWorth[
                            activeScenarioData.results.netWorth.length - 1
                          ].toLocaleString('fr-FR')}
                          €
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span>Croissance:</span>
                        <span className="text-green-400">
                          {(
                            (activeScenarioData.results.netWorth[
                              activeScenarioData.results.netWorth.length - 1
                            ] /
                              activeScenarioData.results.netWorth[0] -
                              1) *
                            100
                          ).toFixed(0)}
                          %
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span>Revenu mensuel final:</span>
                        <span>
                          {activeScenarioData.results.income[
                            activeScenarioData.results.income.length - 1
                          ].toLocaleString('fr-FR')}
                          €
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="bg-black/20 p-3 rounded-lg">
                  <h4 className="text-sm font-medium mb-2">
                    Actions recommandées
                  </h4>
                  <ul className="space-y-2">
                    {activeScenarioData.name === 'Situation actuelle' && (
                      <>
                        <li className="flex items-start text-sm">
                          <InfoIcon className="h-4 w-4 mr-2 mt-0.5 text-blue-400" />
                          <span>
                            Continuez avec votre plan financier actuel tout en
                            explorant d'autres scénarios pour améliorer vos
                            résultats.
                          </span>
                        </li>
                      </>
                    )}
                    {activeScenarioData.name === 'Réduction des dépenses' && (
                      <>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Identifiez les dépenses non essentielles et
                            établissez un budget plus strict.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Utilisez des outils de suivi des dépenses pour
                            identifier les domaines d'optimisation.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Renégociez vos contrats d'assurance, de téléphonie
                            et d'énergie.
                          </span>
                        </li>
                      </>
                    )}
                    {activeScenarioData.name === 'Augmentation des revenus' && (
                      <>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Développez vos compétences pour demander une
                            augmentation ou une promotion.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Explorez des opportunités de revenus complémentaires
                            ou de freelance.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Investissez dans votre formation pour accéder à des
                            postes mieux rémunérés.
                          </span>
                        </li>
                      </>
                    )}
                    {activeScenarioData.name ===
                      'Investissements optimisés' && (
                      <>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Diversifiez vos placements entre actions,
                            obligations et immobilier.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Réduisez les frais de gestion en privilégiant les
                            ETF à faibles coûts.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Automatisez vos investissements pour maintenir une
                            discipline d'épargne.
                          </span>
                        </li>
                      </>
                    )}
                    {activeScenarioData.name === 'Stratégie combinée' && (
                      <>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Appliquez simultanément les stratégies de réduction
                            des dépenses et d'optimisation des investissements.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Augmentez progressivement votre taux d'épargne en
                            affectant les gains de revenus à l'épargne.
                          </span>
                        </li>
                        <li className="flex items-start text-sm">
                          <CheckIcon className="h-4 w-4 mr-2 mt-0.5 text-green-400" />
                          <span>
                            Consultez un conseiller financier pour élaborer un
                            plan personnalisé.
                          </span>
                        </li>
                      </>
                    )}
                  </ul>
                </div>
              </GlassCard>
            )}
          </div>
          {/* Scenarios list and info */}
          <div>
            <GlassCard className="p-4 mb-6" animate>
              <h3 className="font-medium mb-3">Scénarios financiers</h3>
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {scenarios.map((scenario) => (
                  <div
                    key={scenario.name}
                    onClick={() => setActiveScenario(scenario.name)}
                    className={`p-3 rounded-lg cursor-pointer ${activeScenario === scenario.name ? `bg-gradient-to-r ${themeColors.primary} bg-opacity-30` : 'bg-black/20 hover:bg-black/30'}`}
                  >
                    <div className="flex justify-between items-center">
                      <h4 className="font-medium">{scenario.name}</h4>
                      <ChevronRightIcon className="h-4 w-4 text-gray-400" />
                    </div>
                    <p className="text-xs text-gray-400 mt-1">
                      {scenario.description}
                    </p>
                  </div>
                ))}
              </div>
            </GlassCard>
            <GlassCard className="p-4" animate>
              <div className="flex items-center mb-3">
                <InfoIcon className="h-5 w-5 mr-2 text-blue-400" />
                <h3 className="font-medium">À propos des scénarios</h3>
              </div>
              <p className="text-sm mb-4">
                Les scénarios financiers vous permettent de comparer différentes
                stratégies et leur impact sur votre patrimoine à long terme.
              </p>
              <div className="space-y-4">
                <div className="bg-black/20 p-3 rounded-lg">
                  <h4 className="text-sm font-medium mb-1">
                    Situation actuelle
                  </h4>
                  <p className="text-xs text-gray-400">
                    Ce scénario projette votre situation financière actuelle
                    sans changements majeurs dans vos habitudes.
                  </p>
                </div>
                <div className="bg-black/20 p-3 rounded-lg">
                  <h4 className="text-sm font-medium mb-1">
                    Réduction des dépenses
                  </h4>
                  <p className="text-xs text-gray-400">
                    Ce scénario montre l'impact d'une réduction significative de
                    vos dépenses tout en maintenant vos revenus actuels.
                  </p>
                </div>
                <div className="bg-black/20 p-3 rounded-lg">
                  <h4 className="text-sm font-medium mb-1">
                    Augmentation des revenus
                  </h4>
                  <p className="text-xs text-gray-400">
                    Ce scénario illustre l'effet d'une augmentation progressive
                    de vos revenus sur votre patrimoine.
                  </p>
                </div>
                <div className="bg-black/20 p-3 rounded-lg">
                  <h4 className="text-sm font-medium mb-1">
                    Investissements optimisés
                  </h4>
                  <p className="text-xs text-gray-400">
                    Ce scénario montre l'impact d'une stratégie d'investissement
                    plus performante sur votre patrimoine.
                  </p>
                </div>
                <div className="bg-black/20 p-3 rounded-lg">
                  <h4 className="text-sm font-medium mb-1">
                    Stratégie combinée
                  </h4>
                  <p className="text-xs text-gray-400">
                    Ce scénario combine plusieurs approches pour maximiser la
                    croissance de votre patrimoine.
                  </p>
                </div>
              </div>
              <div className="mt-4 flex justify-between items-center">
                <button
                  onClick={() => navigate('/reveal')}
                  className={`px-3 py-1.5 rounded-lg bg-black/30 hover:bg-black/40 text-xs flex items-center`}
                >
                  <InfoIcon className="h-3 w-3 mr-1" />
                  Insights financiers
                </button>
                <button
                  onClick={() => navigate('/settings')}
                  className={`px-3 py-1.5 rounded-lg bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-xs flex items-center`}
                >
                  <SaveIcon className="h-3 w-3 mr-1" />
                  Sauvegarder
                </button>
              </div>
            </GlassCard>
          </div>
        </div>
      )}
      {/* Custom Simulation Tab */}
      {activeTab === 'custom' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <GlassCard className="p-4 mb-6" animate>
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-medium flex items-center">
                  <SettingsIcon className="h-5 w-5 mr-2 text-indigo-400" />
                  Simulation personnalisée avancée
                </h3>
                <div className="flex items-center">
                  <span className="text-xs bg-yellow-500/20 text-yellow-300 px-2 py-0.5 rounded-full flex items-center">
                    <LockIcon className="h-3 w-3 mr-1" />
                    Premium
                  </span>
                </div>
              </div>
              <div className="bg-black/20 p-4 rounded-lg mb-4">
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="flex-1">
                    <h4 className="text-sm font-medium mb-2">Âge actuel</h4>
                    <div className="flex items-center">
                      <input
                        type="range"
                        min="18"
                        max="70"
                        value={currentAge}
                        onChange={(e) =>
                          setCurrentAge(parseInt(e.target.value))
                        }
                        className="flex-1 accent-indigo-500"
                      />
                      <span className="ml-3 w-8 text-center">{currentAge}</span>
                    </div>
                  </div>
                  <div className="flex-1">
                    <h4 className="text-sm font-medium mb-2">
                      Âge de retraite
                    </h4>
                    <div className="flex items-center">
                      <input
                        type="range"
                        min={currentAge + 1}
                        max="75"
                        value={retirementAge}
                        onChange={(e) =>
                          setRetirementAge(parseInt(e.target.value))
                        }
                        className="flex-1 accent-indigo-500"
                      />
                      <span className="ml-3 w-8 text-center">
                        {retirementAge}
                      </span>
                    </div>
                  </div>
                </div>
                <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-black/30 p-3 rounded-lg text-center">
                    <div className="text-xs text-gray-400 mb-1">
                      Années avant retraite
                    </div>
                    <div className="text-xl font-bold">
                      {retirementAge - currentAge}
                    </div>
                  </div>
                  <div className="bg-black/30 p-3 rounded-lg text-center">
                    <div className="text-xs text-gray-400 mb-1">
                      Revenus mensuels actuels
                    </div>
                    <div className="text-xl font-bold">
                      {calculateTotalIncome().toLocaleString('fr-FR')}€
                    </div>
                  </div>
                  <div className="bg-black/30 p-3 rounded-lg text-center">
                    <div className="text-xs text-gray-400 mb-1">
                      Dépenses mensuelles
                    </div>
                    <div className="text-xl font-bold">
                      {calculateTotalExpenses().toLocaleString('fr-FR')}€
                    </div>
                  </div>
                </div>
              </div>
              <div className="h-80" id="simulation-chart">
                {isLoading ? (
                  <div className="h-full flex items-center justify-center">
                    <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart
                      data={[
                        {
                          age: currentAge,
                          value: calculateNetWorth(),
                          savings: calculateNetWorth(),
                          pension: 0,
                        },
                        {
                          age: 30,
                          value: 50000,
                          savings: 45000,
                          pension: 5000,
                        },
                        {
                          age: 40,
                          value: 150000,
                          savings: 120000,
                          pension: 30000,
                        },
                        {
                          age: 50,
                          value: 350000,
                          savings: 250000,
                          pension: 100000,
                        },
                        {
                          age: 60,
                          value: 650000,
                          savings: 400000,
                          pension: 250000,
                        },
                        {
                          age: 70,
                          value: 900000,
                          savings: 500000,
                          pension: 400000,
                        },
                        {
                          age: 80,
                          value: 750000,
                          savings: 350000,
                          pension: 400000,
                        },
                      ]}
                      margin={{
                        top: 10,
                        right: 30,
                        left: 0,
                        bottom: 0,
                      }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                      <XAxis
                        dataKey="age"
                        stroke="#aaa"
                        label={{
                          value: 'Âge',
                          position: 'insideBottomRight',
                          offset: -10,
                        }}
                      />
                      <YAxis stroke="#aaa" />
                      <Tooltip
                        formatter={(value) => [
                          `${value.toLocaleString('fr-FR')}€`,
                          '',
                        ]}
                        contentStyle={{
                          backgroundColor: 'rgba(0, 0, 0, 0.8)',
                          border: '1px solid rgba(255, 255, 255, 0.1)',
                          borderRadius: '8px',
                        }}
                      />
                      <Legend />
                      <ReferenceLine
                        x={retirementAge}
                        stroke="red"
                        strokeDasharray="3 3"
                        label={{
                          value: 'Retraite',
                          position: 'top',
                          fill: 'red',
                        }}
                      />
                      {scenarios.map((scenario, index) =>
                        scenario && scenario.name ? (
                          <Area
                            key={scenario.name}
                            type="monotone"
                            dataKey={scenario.name}
                            name={scenario.name}
                            stroke={COLORS[index % COLORS.length]}
                            fill={COLORS[index % COLORS.length]}
                            fillOpacity={0.3}
                          />
                        ) : null,
                      )}
                    </AreaChart>
                  </ResponsiveContainer>
                )}
              </div>
              <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-black/20 p-3 rounded-lg">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium">
                      Patrimoine à la retraite
                    </h4>
                    <LockIcon className="h-4 w-4 text-yellow-400" />
                  </div>
                  <div className="text-xl font-bold mt-2">650 000€</div>
                  <div className="text-xs text-gray-400 mt-1">
                    Version Premium requise pour plus de détails
                  </div>
                </div>
                <div className="bg-black/20 p-3 rounded-lg">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium">
                      Revenu mensuel à la retraite
                    </h4>
                    <LockIcon className="h-4 w-4 text-yellow-400" />
                  </div>
                  <div className="text-xl font-bold mt-2">2 700€</div>
                  <div className="text-xs text-gray-400 mt-1">
                    Version Premium requise pour plus de détails
                  </div>
                </div>
                <div className="bg-black/20 p-3 rounded-lg">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium">
                      Taux de remplacement
                    </h4>
                    <UnlockIcon className="h-4 w-4 text-green-400" />
                  </div>
                  <div className="text-xl font-bold mt-2">68%</div>
                  <div className="text-xs text-gray-400 mt-1">
                    De vos derniers revenus
                  </div>
                </div>
              </div>
              <div className="mt-4 p-3 bg-yellow-900/20 border border-yellow-500/30 rounded-lg flex items-center">
                <InfoIcon className="h-5 w-5 mr-3 text-yellow-400 flex-shrink-0" />
                <div>
                  <h4 className="text-sm font-medium">Simulation avancée</h4>
                  <p className="text-xs text-gray-300 mt-1">
                    Accédez à des simulations personnalisées plus détaillées,
                    incluant différents scénarios de retraite, l'impact de
                    l'inflation, et des analyses fiscales avec la version
                    Premium.
                  </p>
                </div>
                <button
                  className={`ml-auto px-3 py-1.5 rounded-lg bg-gradient-to-r ${themeColors.secondary} hover:opacity-90 text-xs flex-shrink-0`}
                >
                  Débloquer
                </button>
              </div>
            </GlassCard>
            {/* Life events timeline */}
            <GlassCard className="p-4" animate>
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-medium flex items-center">
                  <CalendarIcon className="h-5 w-5 mr-2 text-blue-400" />
                  Événements de vie
                </h3>
                <LockIcon className="h-4 w-4 text-yellow-400" />
              </div>
              <div className="relative py-4">
                <div className="absolute left-0 top-0 bottom-0 w-0.5 bg-white/10 ml-3.5"></div>
                <div className="relative pl-10 pb-8">
                  <div className="absolute left-0 rounded-full bg-blue-500 p-1.5 mt-1.5">
                    <HomeIcon className="h-3 w-3" />
                  </div>
                  <div className="flex flex-col md:flex-row md:items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium">Achat immobilier</h4>
                      <p className="text-xs text-gray-400">
                        Acquisition d'une résidence principale
                      </p>
                    </div>
                    <div className="text-sm mt-1 md:mt-0">35 ans</div>
                  </div>
                </div>
                <div className="relative pl-10 pb-8">
                  <div className="absolute left-0 rounded-full bg-green-500 p-1.5 mt-1.5">
                    <GraduationCapIcon className="h-3 w-3" />
                  </div>
                  <div className="flex flex-col md:flex-row md:items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium">
                        Études des enfants
                      </h4>
                      <p className="text-xs text-gray-400">
                        Financement des études supérieures
                      </p>
                    </div>
                    <div className="text-sm mt-1 md:mt-0">45 ans</div>
                  </div>
                </div>
                <div className="relative pl-10 pb-8">
                  <div className="absolute left-0 rounded-full bg-purple-500 p-1.5 mt-1.5">
                    <BriefcaseIcon className="h-3 w-3" />
                  </div>
                  <div className="flex flex-col md:flex-row md:items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium">Retraite</h4>
                      <p className="text-xs text-gray-400">
                        Début de la période de retraite
                      </p>
                    </div>
                    <div className="text-sm mt-1 md:mt-0">65 ans</div>
                  </div>
                </div>
                <div className="relative pl-10">
                  <div className="absolute left-0 rounded-full bg-gray-500 p-1.5 mt-1.5">
                    <PlusIcon className="h-3 w-3" />
                  </div>
                  <div className="flex flex-col md:flex-row md:items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium">
                        Ajouter un événement
                      </h4>
                      <p className="text-xs text-gray-400">
                        Version Premium requise
                      </p>
                    </div>
                    <div className="text-sm mt-1 md:mt-0">-</div>
                  </div>
                </div>
              </div>
              <div className="mt-4 text-center">
                <button
                  className={`px-4 py-2 rounded-lg bg-gradient-to-r ${themeColors.secondary} hover:opacity-90 text-sm`}
                >
                  Débloquer la planification avancée
                </button>
              </div>
            </GlassCard>
          </div>
          {/* Advanced parameters */}
          <div>
            <GlassCard className="p-4 mb-6" animate>
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-medium flex items-center">
                  <SettingsIcon className="h-5 w-5 mr-2" />
                  Paramètres avancés
                </h3>
                <div className="flex items-center">
                  <span className="text-xs bg-yellow-500/20 text-yellow-300 px-2 py-0.5 rounded-full flex items-center">
                    <LockIcon className="h-3 w-3 mr-1" />
                    Premium
                  </span>
                </div>
              </div>
              <div className="space-y-4 opacity-60">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Inflation (%)
                    <span className="float-right text-xs text-gray-400">
                      {inflationRate}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="5"
                    step="0.1"
                    value={inflationRate}
                    onChange={(e) =>
                      setInflationRate(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                    disabled
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>2.5%</span>
                    <span>5%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Rendement avant retraite (%)
                    <span className="float-right text-xs text-gray-400">
                      {investmentReturn}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="12"
                    step="0.5"
                    value={investmentReturn}
                    onChange={(e) =>
                      setInvestmentReturn(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                    disabled
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>6%</span>
                    <span>12%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Rendement après retraite (%)
                    <span className="float-right text-xs text-gray-400">
                      3.0%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="8"
                    step="0.5"
                    value={3}
                    className="w-full accent-indigo-500"
                    disabled
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>4%</span>
                    <span>8%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Croissance des revenus (%)
                    <span className="float-right text-xs text-gray-400">
                      {incomeGrowth}%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="10"
                    step="0.1"
                    value={incomeGrowth}
                    onChange={(e) =>
                      setIncomeGrowth(parseFloat(e.target.value))
                    }
                    className="w-full accent-indigo-500"
                    disabled
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>5%</span>
                    <span>10%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Taux d'imposition moyen (%)
                    <span className="float-right text-xs text-gray-400">
                      20%
                    </span>
                  </label>
                  <input
                    type="range"
                    min="0"
                    max="50"
                    step="1"
                    value={20}
                    className="w-full accent-indigo-500"
                    disabled
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>0%</span>
                    <span>25%</span>
                    <span>50%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Espérance de vie
                    <span className="float-right text-xs text-gray-400">
                      85 ans
                    </span>
                  </label>
                  <input
                    type="range"
                    min="70"
                    max="100"
                    step="1"
                    value={85}
                    className="w-full accent-indigo-500"
                    disabled
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>70 ans</span>
                    <span>85 ans</span>
                    <span>100 ans</span>
                  </div>
                </div>
              </div>
              <div className="mt-6">
                <button
                  className={`w-full bg-gradient-to-r ${themeColors.secondary} hover:opacity-90 text-white py-2 rounded-lg flex items-center justify-center transition-all duration-300`}
                >
                  <UnlockIcon className="mr-2 h-4 w-4" />
                  Débloquer les paramètres avancés
                </button>
              </div>
            </GlassCard>
            <GlassCard className="p-4 mb-6" animate>
              <div className="flex items-center mb-3">
                <ShareIcon className="h-5 w-5 mr-2 text-blue-400" />
                <h3 className="font-medium">Partager votre simulation</h3>
              </div>
              <div className="space-y-3">
                <button
                  onClick={handleExportChart}
                  disabled={exportLoading}
                  className="w-full p-3 bg-black/20 hover:bg-black/30 rounded-lg flex items-center justify-between"
                >
                  <div className="flex items-center">
                    <DownloadIcon className="h-5 w-5 mr-3 text-green-400" />
                    <span>Exporter en image</span>
                  </div>
                  <ChevronRightIcon className="h-4 w-4 text-gray-400" />
                </button>
                <div className="w-full p-3 bg-black/20 rounded-lg flex items-center justify-between opacity-60">
                  <div className="flex items-center">
                    <DownloadIcon className="h-5 w-5 mr-3 text-purple-400" />
                    <span>Exporter en PDF</span>
                  </div>
                  <div className="flex items-center">
                    <LockIcon className="h-3 w-3 mr-1 text-yellow-400" />
                    <span className="text-xs">Premium</span>
                  </div>
                </div>
                <div className="w-full p-3 bg-black/20 rounded-lg flex items-center justify-between opacity-60">
                  <div className="flex items-center">
                    <ShareIcon className="h-5 w-5 mr-3 text-blue-400" />
                    <span>Partager par email</span>
                  </div>
                  <div className="flex items-center">
                    <LockIcon className="h-3 w-3 mr-1 text-yellow-400" />
                    <span className="text-xs">Premium</span>
                  </div>
                </div>
              </div>
            </GlassCard>
            <GlassCard className="p-4" animate>
              <div className="flex items-center mb-3">
                <BriefcaseIcon className="h-5 w-5 mr-2 text-green-400" />
                <h3 className="font-medium">Conseils personnalisés</h3>
              </div>
              <p className="text-sm mb-4">
                Basés sur votre situation financière actuelle et vos objectifs à
                long terme.
              </p>
              <div className="space-y-3">
                <div className="p-3 bg-green-900/20 border border-green-500/30 rounded-lg">
                  <div className="flex items-start">
                    <CheckCircleIcon className="h-4 w-4 mt-0.5 mr-2 text-green-400" />
                    <p className="text-sm">
                      Augmentez votre taux d'épargne de 5% pour atteindre vos
                      objectifs plus rapidement.
                    </p>
                  </div>
                </div>
                <div className="p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg">
                  <div className="flex items-start">
                    <InfoIcon className="h-4 w-4 mt-0.5 mr-2 text-blue-400" />
                    <p className="text-sm">
                      Diversifiez vos investissements pour optimiser le rapport
                      rendement/risque.
                    </p>
                  </div>
                </div>
                <div className="p-3 bg-black/20 rounded-lg opacity-60">
                  <div className="flex items-center justify-between">
                    <div className="flex items-start">
                      <BellRingIcon className="h-4 w-4 mt-0.5 mr-2 text-yellow-400" />
                      <p className="text-sm">
                        Conseils avancés personnalisés disponibles avec la
                        version Premium.
                      </p>
                    </div>
                    <LockIcon className="h-4 w-4 text-yellow-400 ml-2 flex-shrink-0" />
                  </div>
                </div>
              </div>
              <div className="mt-4 text-center">
                <button
                  className={`px-4 py-2 rounded-lg bg-gradient-to-r ${themeColors.secondary} hover:opacity-90 text-sm`}
                >
                  Obtenir des conseils avancés
                </button>
              </div>
            </GlassCard>
          </div>
        </div>
      )}
    </div>
  )
}

```
```components/Reports.tsx
import React, { useEffect, useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { useFinance } from '../context/FinanceContext'
import {
  FileBarChartIcon,
  DownloadIcon,
  ShareIcon,
  ClockIcon,
  CheckCircleIcon,
  CalendarIcon,
  BookIcon,
  PlusIcon,
} from 'lucide-react'
import { FinancialReport } from '../types/finance'
import dayjs from 'dayjs'
import 'dayjs/locale/fr'
import { jsPDF } from 'jspdf'
import { toPng } from 'html-to-image'
// Set locale
dayjs.locale('fr')
export function Reports() {
  const navigate = useNavigate()
  const { themeColors } = useTheme()
  const { generateInsights, runSimulation } = useFinance()
  const [reports, setReports] = useState<FinancialReport[]>([])
  const [selectedReport, setSelectedReport] = useState<FinancialReport | null>(
    null,
  )
  const [exportLoading, setExportLoading] = useState(false)
  // Generate example reports on mount
  useEffect(() => {
    const insights = generateInsights() || [] // Provide empty array fallback
    const simulationResults = runSimulation({
      name: 'Simulation standard',
      incomeGrowth: 2,
      expenseReduction: 1,
      savingsRate: 50,
      investmentReturn: 5,
      inflationRate: 2,
      years: 10,
    })
    const reports: FinancialReport[] = [
      {
        id: '1',
        title: 'Rapport financier mensuel',
        date: dayjs().subtract(2, 'day').toISOString(),
        insights: insights,
        summary:
          "Ce rapport mensuel met en évidence une amélioration de votre taux d'épargne de 3% par rapport au mois précédent. Vos dépenses en loisirs ont diminué, tandis que vos revenus sont restés stables.",
        recommendations: [
          'Continuez à optimiser vos dépenses en loisirs',
          "Envisagez d'investir votre surplus d'épargne",
          'Revoyez votre budget alimentaire qui a augmenté de 5%',
        ],
        simulationResults,
      },
      {
        id: '2',
        title: "Analyse d'objectif d'achat immobilier",
        date: dayjs().subtract(15, 'day').toISOString(),
        insights:
          insights.filter(
            (i) => i.category === 'savings' || i.category === 'expense',
          ) || [],
        summary:
          "Cette analyse évalue votre capacité à atteindre votre objectif d'achat immobilier. Avec votre taux d'épargne actuel, vous pourriez constituer un apport de 50 000€ en 7 ans et 3 mois.",
        recommendations: [
          "Augmentez votre taux d'épargne de 5% pour réduire le délai à 6 ans",
          "Explorez les aides à l'accession à la propriété",
          'Optimisez vos placements pour un meilleur rendement',
        ],
        simulationResults,
      },
      {
        id: '3',
        title: 'Audit financier trimestriel',
        date: dayjs().subtract(45, 'day').toISOString(),
        insights: insights,
        summary:
          "Ce rapport trimestriel analyse l'évolution de votre situation financière. Votre patrimoine net a augmenté de 4.2% ce trimestre, principalement grâce à la performance de vos investissements.",
        recommendations: [
          "Rééquilibrez votre portefeuille d'investissement",
          'Consolidez vos petites dettes',
          "Augmentez votre fonds d'urgence pour atteindre 6 mois de dépenses",
        ],
        simulationResults,
      },
    ]
    setReports(reports)
    setSelectedReport(reports[0])
  }, [])
  const formatDate = (dateString: string) => {
    return dayjs(dateString).format('DD MMMM YYYY')
  }
  const handleExportPDF = async () => {
    if (!selectedReport) return
    try {
      setExportLoading(true)
      const element = document.getElementById('report-content')
      if (!element) return
      const dataUrl = await toPng(element, {
        quality: 0.95,
      })
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      })
      // Add title
      pdf.setFontSize(22)
      pdf.text(`Rivela - ${selectedReport.title}`, 20, 20)
      // Add date
      pdf.setFontSize(12)
      pdf.text(`Généré le ${formatDate(new Date().toISOString())}`, 20, 30)
      // Add original date
      pdf.setFontSize(10)
      pdf.text(`Rapport créé le ${formatDate(selectedReport.date)}`, 20, 35)
      // Add image
      const imgWidth = 170
      const imgHeight = (element.offsetHeight * imgWidth) / element.offsetWidth
      pdf.addImage(dataUrl, 'PNG', 20, 45, imgWidth, Math.min(imgHeight, 220))
      // Save PDF
      pdf.save(
        `rivela-${selectedReport.title.toLowerCase().replace(/\s+/g, '-')}.pdf`,
      )
      setExportLoading(false)
    } catch (error) {
      console.error('Error generating PDF:', error)
      setExportLoading(false)
    }
  }
  return (
    <div className="w-full max-w-6xl mx-auto pb-20">
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold">Rapports Financiers</h1>
            <p className="text-gray-400">
              Analyses détaillées et recommandations personnalisées
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <button className="bg-black/30 hover:bg-black/40 text-white px-4 py-2 rounded-lg flex items-center transition-all duration-300">
              <PlusIcon className="mr-2 h-4 w-4" />
              Nouveau rapport
            </button>
          </div>
        </div>
      </motion.div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div>
          <GlassCard className="p-4 mb-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <FileBarChartIcon className="h-5 w-5 mr-2 text-indigo-400" />
              Mes rapports
            </h3>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {reports.map((report) => (
                <div
                  key={report.id}
                  onClick={() => setSelectedReport(report)}
                  className={`p-3 rounded-lg cursor-pointer ${selectedReport?.id === report.id ? `bg-gradient-to-r ${themeColors.primary} bg-opacity-30` : 'bg-black/20 hover:bg-black/30'}`}
                >
                  <div className="flex justify-between items-center mb-1">
                    <h4 className="font-medium">{report.title}</h4>
                    <span className="text-xs bg-black/20 px-2 py-0.5 rounded-full flex items-center">
                      <ClockIcon className="h-3 w-3 mr-1" />
                      {dayjs(report.date).fromNow()}
                    </span>
                  </div>
                  <p className="text-xs text-gray-400 line-clamp-2">
                    {report.summary}
                  </p>
                </div>
              ))}
            </div>
          </GlassCard>
          <GlassCard className="p-4" animate>
            <h3 className="font-medium mb-3">Types de rapports disponibles</h3>
            <div className="space-y-2">
              <div className="bg-black/20 p-3 rounded-lg">
                <h4 className="text-sm font-medium mb-1">Rapport mensuel</h4>
                <p className="text-xs text-gray-400">
                  Suivi mensuel de vos finances avec analyse des tendances
                </p>
              </div>
              <div className="bg-black/20 p-3 rounded-lg">
                <h4 className="text-sm font-medium mb-1">Analyse d'objectif</h4>
                <p className="text-xs text-gray-400">
                  Évaluation détaillée d'un objectif financier spécifique
                </p>
              </div>
              <div className="bg-black/20 p-3 rounded-lg">
                <h4 className="text-sm font-medium mb-1">Audit trimestriel</h4>
                <p className="text-xs text-gray-400">
                  Analyse approfondie de votre situation financière tous les 3
                  mois
                </p>
              </div>
              <div className="bg-black/20 p-3 rounded-lg">
                <h4 className="text-sm font-medium mb-1">Rapport fiscal</h4>
                <p className="text-xs text-gray-400">
                  Préparation et optimisation de votre situation fiscale
                </p>
              </div>
            </div>
          </GlassCard>
        </div>
        <div className="lg:col-span-2">
          {selectedReport ? (
            <GlassCard className="p-6" animate>
              <div className="flex justify-between items-start mb-6">
                <div>
                  <h2 className="text-2xl font-bold mb-1">
                    {selectedReport.title}
                  </h2>
                  <div className="flex items-center text-sm text-gray-400">
                    <CalendarIcon className="h-4 w-4 mr-1" />
                    {formatDate(selectedReport.date)}
                  </div>
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={handleExportPDF}
                    disabled={exportLoading}
                    className="bg-black/30 hover:bg-black/40 text-white p-2 rounded-lg flex items-center transition-all duration-300"
                  >
                    {exportLoading ? (
                      <div className="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full"></div>
                    ) : (
                      <DownloadIcon className="h-5 w-5" />
                    )}
                  </button>
                  <button className="bg-black/30 hover:bg-black/40 text-white p-2 rounded-lg flex items-center transition-all duration-300">
                    <ShareIcon className="h-5 w-5" />
                  </button>
                </div>
              </div>
              <div id="report-content">
                <div className="bg-black/20 p-4 rounded-xl mb-6">
                  <h3 className="font-medium mb-2 flex items-center">
                    <BookIcon className="h-5 w-5 mr-2 text-indigo-400" />
                    Résumé
                  </h3>
                  <p className="text-gray-300">{selectedReport.summary}</p>
                </div>
                <h3 className="font-medium mb-3 flex items-center">
                  <CheckCircleIcon className="h-5 w-5 mr-2 text-green-400" />
                  Recommandations
                </h3>
                <div className="space-y-2 mb-6">
                  {selectedReport.recommendations.map(
                    (recommendation, index) => (
                      <div key={index} className="bg-black/20 p-3 rounded-lg">
                        <div className="flex items-start">
                          <span className="w-5 h-5 bg-green-500/20 text-green-400 rounded-full flex items-center justify-center text-xs mr-2 mt-0.5">
                            {index + 1}
                          </span>
                          <p className="text-sm">{recommendation}</p>
                        </div>
                      </div>
                    ),
                  )}
                </div>
                <h3 className="font-medium mb-3">Insights identifiés</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-6">
                  {selectedReport.insights.slice(0, 4).map((insight) => (
                    <div
                      key={insight.id}
                      className={`p-3 rounded-lg ${insight.impact === 'high' ? 'bg-red-900/20 border border-red-500/30' : insight.impact === 'medium' ? 'bg-yellow-900/20 border border-yellow-500/30' : 'bg-green-900/20 border border-green-500/30'}`}
                    >
                      <div className="flex items-center mb-1">
                        <span
                          className={`w-2 h-2 rounded-full mr-2 ${insight.impact === 'high' ? 'bg-red-500' : insight.impact === 'medium' ? 'bg-yellow-500' : 'bg-green-500'}`}
                        ></span>
                        <h4 className="text-sm font-medium">{insight.title}</h4>
                      </div>
                      <p className="text-xs text-gray-300">
                        {insight.description}
                      </p>
                    </div>
                  ))}
                </div>
                {selectedReport.simulationResults && (
                  <div className="bg-black/20 p-4 rounded-xl">
                    <h3 className="font-medium mb-3">Projection financière</h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
                      <div className="bg-black/30 p-3 rounded-lg text-center">
                        <div className="text-xs text-gray-400 mb-1">
                          Patrimoine à 10 ans
                        </div>
                        <div className="text-lg font-bold text-indigo-400">
                          {selectedReport.simulationResults.netWorth[
                            selectedReport.simulationResults.netWorth.length - 1
                          ].toLocaleString()}
                          €
                        </div>
                      </div>
                      <div className="bg-black/30 p-3 rounded-lg text-center">
                        <div className="text-xs text-gray-400 mb-1">
                          Croissance
                        </div>
                        <div className="text-lg font-bold text-green-400">
                          {(
                            (selectedReport.simulationResults.netWorth[
                              selectedReport.simulationResults.netWorth.length -
                                1
                            ] /
                              selectedReport.simulationResults.netWorth[0] -
                              1) *
                            100
                          ).toFixed(0)}
                          %
                        </div>
                      </div>
                      <div className="bg-black/30 p-3 rounded-lg text-center">
                        <div className="text-xs text-gray-400 mb-1">
                          Épargne mensuelle
                        </div>
                        <div className="text-lg font-bold text-blue-400">
                          {(
                            selectedReport.simulationResults.income[0] -
                            selectedReport.simulationResults.expenses[0]
                          ).toLocaleString()}
                          €
                        </div>
                      </div>
                      <div className="bg-black/30 p-3 rounded-lg text-center">
                        <div className="text-xs text-gray-400 mb-1">
                          Taux d'épargne
                        </div>
                        <div className="text-lg font-bold text-yellow-400">
                          {selectedReport.simulationResults.income[0] > 0
                            ? (
                                ((selectedReport.simulationResults.income[0] -
                                  selectedReport.simulationResults
                                    .expenses[0]) /
                                  selectedReport.simulationResults.income[0]) *
                                100
                              ).toFixed(0)
                            : 0}
                          %
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </GlassCard>
          ) : (
            <GlassCard
              className="p-6 flex items-center justify-center h-96"
              animate
            >
              <div className="text-center">
                <FileBarChartIcon className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                <h3 className="text-xl font-medium mb-2">
                  Aucun rapport sélectionné
                </h3>
                <p className="text-gray-400">
                  Sélectionnez un rapport pour afficher son contenu
                </p>
              </div>
            </GlassCard>
          )}
        </div>
      </div>
    </div>
  )
}

```
```components/Settings.tsx
import React, { useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { toast, Toaster } from 'react-hot-toast'
import {
  PaletteIcon,
  GlobeIcon,
  SaveIcon,
  MoonIcon,
  SunIcon,
  BellIcon,
  CheckIcon,
  DownloadIcon,
  LockIcon,
  UnlockIcon,
  RefreshCwIcon,
  TrashIcon,
  AlertCircleIcon,
  EyeIcon,
  EyeOffIcon,
  SettingsIcon,
} from 'lucide-react'
export function Settings() {
  const navigate = useNavigate()
  const { theme, setTheme, themeColors } = useTheme()
  // State for settings
  const [language, setLanguage] = useState('fr')
  const [darkMode, setDarkMode] = useState(theme === 'dark')
  const [notificationsEnabled, setNotificationsEnabled] = useState(true)
  const [dataAutoSave, setDataAutoSave] = useState(true)
  const [currencyFormat, setCurrencyFormat] = useState('EUR')
  const [dateFormat, setDateFormat] = useState('DD/MM/YYYY')
  const [showCents, setShowCents] = useState(false)
  const [privacyMode, setPrivacyMode] = useState(false)
  const [saveSuccess, setSaveSuccess] = useState(false)
  // Handle theme change
  const handleThemeChange = (isDark: boolean) => {
    setDarkMode(isDark)
    setTheme(isDark ? 'dark' : 'light')
  }
  // Handle save settings
  const handleSaveSettings = () => {
    // In a real app, this would save to the backend
    toast.success('Paramètres mis à jour avec succès')
    setSaveSuccess(true)
    setTimeout(() => {
      setSaveSuccess(false)
    }, 3000)
  }
  // Handle data reset
  const handleDataReset = () => {
    toast.error('Cette action nécessite une confirmation supplémentaire')
  }
  // Handle language change
  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setLanguage(e.target.value)
    // In a real app, this would change the app language
    if (e.target.value === 'fr') {
      toast.success('Langue changée en Français')
    } else if (e.target.value === 'en') {
      toast.success('Language changed to English')
    } else if (e.target.value === 'es') {
      toast.success('Idioma cambiado a Español')
    } else if (e.target.value === 'de') {
      toast.success('Sprache auf Deutsch geändert')
    }
  }
  // Get language name
  const getLanguageName = (code: string) => {
    const languages = {
      fr: 'Français',
      en: 'English',
      es: 'Español',
      de: 'Deutsch',
    }
    return languages[code as keyof typeof languages] || code
  }
  return (
    <div className="w-full max-w-4xl mx-auto pb-20">
      <Toaster position="top-right" />
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold">Paramètres</h1>
            <p className={`${themeColors?.textSecondary || 'text-gray-400'}`}>
              Personnalisez votre expérience et gérez vos préférences
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={handleSaveSettings}
              className={`bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white px-4 py-2 rounded-lg flex items-center transition-all duration-300`}
            >
              <SaveIcon className="mr-2 h-4 w-4" />
              Sauvegarder
            </button>
          </div>
        </div>
        {saveSuccess && (
          <div className="bg-green-500/20 border border-green-500/30 text-green-300 px-4 py-2 rounded-lg flex items-center mb-4">
            <CheckIcon className="h-5 w-5 mr-2" />
            Paramètres mis à jour avec succès
          </div>
        )}
      </motion.div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <GlassCard className="p-6 mb-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <GlobeIcon className="h-5 w-5 mr-2 text-blue-400" />
              Langue et région
            </h3>
            <div className="space-y-4">
              <div>
                <label
                  className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                >
                  Langue
                </label>
                <div className="relative">
                  <select
                    value={language}
                    onChange={handleLanguageChange}
                    className="w-full bg-black/20 border border-white/10 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50 appearance-none"
                  >
                    <option value="fr">Français</option>
                    <option value="en">English</option>
                    <option value="es">Español</option>
                    <option value="de">Deutsch</option>
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                    <svg
                      className="fill-current h-4 w-4"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                    >
                      <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                    </svg>
                  </div>
                </div>
                <p className="text-xs mt-1 text-gray-400">
                  Langue actuelle : {getLanguageName(language)}
                </p>
              </div>
              <div>
                <label
                  className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                >
                  Format de devise
                </label>
                <div className="relative">
                  <select
                    value={currencyFormat}
                    onChange={(e) => setCurrencyFormat(e.target.value)}
                    className="w-full bg-black/20 border border-white/10 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50 appearance-none"
                  >
                    <option value="EUR">Euro (€)</option>
                    <option value="USD">US Dollar ($)</option>
                    <option value="GBP">British Pound (£)</option>
                    <option value="CHF">Swiss Franc (CHF)</option>
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                    <svg
                      className="fill-current h-4 w-4"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                    >
                      <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                    </svg>
                  </div>
                </div>
              </div>
              <div>
                <label
                  className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                >
                  Format de date
                </label>
                <div className="relative">
                  <select
                    value={dateFormat}
                    onChange={(e) => setDateFormat(e.target.value)}
                    className="w-full bg-black/20 border border-white/10 rounded-lg py-2 pl-3 pr-10 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50 appearance-none"
                  >
                    <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                    <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                    <option value="YYYY-MM-DD">YYYY-MM-DD</option>
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                    <svg
                      className="fill-current h-4 w-4"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                    >
                      <path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" />
                    </svg>
                  </div>
                </div>
              </div>
              <div>
                <label className="flex items-center justify-between mb-2">
                  <span className="text-sm">Afficher les centimes</span>
                  <div className="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full">
                    <input
                      type="checkbox"
                      id="toggle-cents"
                      className="absolute w-0 h-0 opacity-0"
                      checked={showCents}
                      onChange={() => setShowCents(!showCents)}
                    />
                    <label
                      htmlFor="toggle-cents"
                      className={`block h-6 overflow-hidden rounded-full cursor-pointer ${showCents ? 'bg-indigo-600' : 'bg-gray-600'}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform duration-200 ${showCents ? 'translate-x-6' : 'translate-x-0'}`}
                      ></span>
                    </label>
                  </div>
                </label>
                <p className="text-xs text-gray-400">
                  Exemple: {showCents ? '1 234,56€' : '1 235€'}
                </p>
              </div>
            </div>
          </GlassCard>
          <GlassCard className="p-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <SettingsIcon className="h-5 w-5 mr-2 text-purple-400" />
              Données et confidentialité
            </h3>
            <div className="space-y-4">
              <div>
                <label className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <RefreshCwIcon className="h-5 w-5 mr-2 text-blue-400" />
                    <span>Sauvegarde automatique des données</span>
                  </div>
                  <div className="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full">
                    <input
                      type="checkbox"
                      id="toggle-autosave"
                      className="absolute w-0 h-0 opacity-0"
                      checked={dataAutoSave}
                      onChange={() => setDataAutoSave(!dataAutoSave)}
                    />
                    <label
                      htmlFor="toggle-autosave"
                      className={`block h-6 overflow-hidden rounded-full cursor-pointer ${dataAutoSave ? 'bg-indigo-600' : 'bg-gray-600'}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform duration-200 ${dataAutoSave ? 'translate-x-6' : 'translate-x-0'}`}
                      ></span>
                    </label>
                  </div>
                </label>
                <p className="text-xs text-gray-400 mb-4">
                  Sauvegarder automatiquement vos données financières
                </p>
              </div>
              <div>
                <label className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <EyeOffIcon className="h-5 w-5 mr-2 text-yellow-400" />
                    <span>Mode confidentialité</span>
                  </div>
                  <div className="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full">
                    <input
                      type="checkbox"
                      id="toggle-privacy"
                      className="absolute w-0 h-0 opacity-0"
                      checked={privacyMode}
                      onChange={() => setPrivacyMode(!privacyMode)}
                    />
                    <label
                      htmlFor="toggle-privacy"
                      className={`block h-6 overflow-hidden rounded-full cursor-pointer ${privacyMode ? 'bg-indigo-600' : 'bg-gray-600'}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform duration-200 ${privacyMode ? 'translate-x-6' : 'translate-x-0'}`}
                      ></span>
                    </label>
                  </div>
                </label>
                <p className="text-xs text-gray-400 mb-4">
                  Masquer les montants sensibles sur l'écran
                </p>
              </div>
              <div className="pt-4 border-t border-white/10">
                <h4 className="text-sm font-medium mb-3 flex items-center">
                  <DownloadIcon className="h-4 w-4 mr-2 text-green-400" />
                  Exporter vos données
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <button
                    onClick={() => toast.success('Export CSV en cours...')}
                    className="py-2 px-3 bg-black/20 hover:bg-black/30 rounded-lg text-sm flex items-center justify-center transition-all duration-200"
                  >
                    <DownloadIcon className="h-4 w-4 mr-2" />
                    Exporter en CSV
                  </button>
                  <button
                    onClick={() => toast.success('Export JSON en cours...')}
                    className="py-2 px-3 bg-black/20 hover:bg-black/30 rounded-lg text-sm flex items-center justify-center transition-all duration-200"
                  >
                    <DownloadIcon className="h-4 w-4 mr-2" />
                    Exporter en JSON
                  </button>
                </div>
              </div>
              <div className="pt-4 border-t border-white/10">
                <h4 className="text-sm font-medium mb-3 flex items-center text-red-400">
                  <AlertCircleIcon className="h-4 w-4 mr-2" />
                  Zone de danger
                </h4>
                <button
                  onClick={handleDataReset}
                  className="w-full py-2 bg-red-900/20 hover:bg-red-900/30 text-red-400 rounded-lg text-sm flex items-center justify-center transition-all duration-200"
                >
                  <TrashIcon className="h-4 w-4 mr-2" />
                  Réinitialiser toutes les données
                </button>
                <p className="text-xs text-gray-400 mt-2">
                  Cette action est irréversible et supprimera toutes vos données
                  financières.
                </p>
              </div>
            </div>
          </GlassCard>
        </div>
        <div>
          <GlassCard className="p-6 mb-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <PaletteIcon className="h-5 w-5 mr-2 text-indigo-400" />
              Apparence
            </h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm mb-2">Thème</label>
                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={() => handleThemeChange(false)}
                    className={`p-3 rounded-lg flex flex-col items-center ${!darkMode ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white' : 'bg-black/20 hover:bg-black/30'}`}
                  >
                    <SunIcon className="h-6 w-6 mb-1" />
                    <span className="text-sm">Clair</span>
                  </button>
                  <button
                    onClick={() => handleThemeChange(true)}
                    className={`p-3 rounded-lg flex flex-col items-center ${darkMode ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white' : 'bg-black/20 hover:bg-black/30'}`}
                  >
                    <MoonIcon className="h-6 w-6 mb-1" />
                    <span className="text-sm">Sombre</span>
                  </button>
                </div>
              </div>
              <div>
                <label className="block text-sm mb-2">
                  Palette de couleurs
                </label>
                <div className="grid grid-cols-3 gap-3">
                  <button
                    onClick={() => toast.success('Thème appliqué')}
                    className="p-3 rounded-lg flex flex-col items-center bg-gradient-to-r from-indigo-500 to-purple-600 text-white"
                  >
                    <div className="w-6 h-6 rounded-full bg-white mb-1"></div>
                    <span className="text-xs">Indigo</span>
                  </button>
                  <button
                    onClick={() => toast.success('Fonctionnalité Premium')}
                    className="p-3 rounded-lg flex flex-col items-center bg-black/20 hover:bg-black/30 relative"
                  >
                    <div className="w-6 h-6 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 mb-1"></div>
                    <span className="text-xs">Océan</span>
                    <LockIcon className="h-3 w-3 absolute top-1 right-1 text-yellow-400" />
                  </button>
                  <button
                    onClick={() => toast.success('Fonctionnalité Premium')}
                    className="p-3 rounded-lg flex flex-col items-center bg-black/20 hover:bg-black/30 relative"
                  >
                    <div className="w-6 h-6 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 mb-1"></div>
                    <span className="text-xs">Émeraude</span>
                    <LockIcon className="h-3 w-3 absolute top-1 right-1 text-yellow-400" />
                  </button>
                </div>
              </div>
            </div>
          </GlassCard>
          <GlassCard className="p-6 mb-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <BellIcon className="h-5 w-5 mr-2 text-yellow-400" />
              Notifications
            </h3>
            <div className="space-y-4">
              <div>
                <label className="flex items-center justify-between mb-2">
                  <span>Notifications</span>
                  <div className="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full">
                    <input
                      type="checkbox"
                      id="toggle-notifications"
                      className="absolute w-0 h-0 opacity-0"
                      checked={notificationsEnabled}
                      onChange={() =>
                        setNotificationsEnabled(!notificationsEnabled)
                      }
                    />
                    <label
                      htmlFor="toggle-notifications"
                      className={`block h-6 overflow-hidden rounded-full cursor-pointer ${notificationsEnabled ? 'bg-indigo-600' : 'bg-gray-600'}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform duration-200 ${notificationsEnabled ? 'translate-x-6' : 'translate-x-0'}`}
                      ></span>
                    </label>
                  </div>
                </label>
                <p className="text-xs text-gray-400 mb-4">
                  Activer ou désactiver toutes les notifications
                </p>
              </div>
              <div
                className={`space-y-3 ${!notificationsEnabled ? 'opacity-50' : ''}`}
              >
                <div className="flex items-center justify-between">
                  <span className="text-sm">Rappels d'objectifs</span>
                  <input
                    type="checkbox"
                    checked={notificationsEnabled}
                    disabled={!notificationsEnabled}
                    onChange={() => {}}
                    className="rounded bg-black/20 border-white/10 text-indigo-600 focus:ring-indigo-500"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Mises à jour financières</span>
                  <input
                    type="checkbox"
                    checked={notificationsEnabled}
                    disabled={!notificationsEnabled}
                    onChange={() => {}}
                    className="rounded bg-black/20 border-white/10 text-indigo-600 focus:ring-indigo-500"
                  />
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Conseils personnalisés</span>
                  <input
                    type="checkbox"
                    checked={notificationsEnabled}
                    disabled={!notificationsEnabled}
                    onChange={() => {}}
                    className="rounded bg-black/20 border-white/10 text-indigo-600 focus:ring-indigo-500"
                  />
                </div>
              </div>
            </div>
          </GlassCard>
          <GlassCard className="p-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <LockIcon className="h-5 w-5 mr-2 text-green-400" />
              Version Premium
            </h3>
            <div className="bg-gradient-to-r from-indigo-500/20 to-purple-600/20 border border-indigo-500/30 rounded-lg p-4 mb-4">
              <div className="flex items-center mb-2">
                <UnlockIcon className="h-5 w-5 mr-2 text-yellow-400" />
                <h4 className="font-medium">Version gratuite</h4>
              </div>
              <p className="text-sm text-gray-300 mb-2">
                Vous utilisez actuellement la version gratuite de l'application.
              </p>
              <ul className="text-xs text-gray-400 space-y-1 mb-3">
                <li className="flex items-center">
                  <CheckIcon className="h-3 w-3 mr-1 text-green-400" />
                  Fonctionnalités de base
                </li>
                <li className="flex items-center">
                  <CheckIcon className="h-3 w-3 mr-1 text-green-400" />
                  Nombre limité de simulations
                </li>
                <li className="flex items-center">
                  <CheckIcon className="h-3 w-3 mr-1 text-green-400" />
                  Rapports standards
                </li>
              </ul>
              <button
                onClick={() => toast.success('Fonctionnalité en développement')}
                className="w-full py-2 bg-gradient-to-r from-yellow-500 to-amber-600 text-white rounded-lg text-sm"
              >
                Passer à la version Premium
              </button>
            </div>
            <div className="text-xs text-center text-gray-400">
              La version Premium débloque toutes les fonctionnalités avancées,
              les exportations et les simulations personnalisées.
            </div>
          </GlassCard>
        </div>
      </div>
    </div>
  )
}

```
```services/AIFinanceService.tsx
import React from 'react'
import {
  FinancialItem,
  FinancialInsight,
  SimulationParams,
  SimulationResult,
} from '../types/finance'
// Modèle de scoring IA pour l'analyse financière
interface AIModelParams {
  financialData: any
  emotionalContext?: any
  marketConditions?: any
}
export class AIFinanceService {
  private static instance: AIFinanceService
  private isInitialized: boolean = false
  private modelLoaded: boolean = false
  private lastUpdate: Date = new Date()
  // Singleton pattern
  public static getInstance(): AIFinanceService {
    if (!AIFinanceService.instance) {
      AIFinanceService.instance = new AIFinanceService()
    }
    return AIFinanceService.instance
  }
  // Initialiser le service IA
  public async initialize(): Promise<boolean> {
    if (this.isInitialized) return true
    try {
      // Simulation du chargement d'un modèle IA
      await new Promise((resolve) => setTimeout(resolve, 500))
      this.modelLoaded = true
      this.isInitialized = true
      console.log('Service IA initialisé avec succès')
      return true
    } catch (error) {
      console.error("Erreur lors de l'initialisation du service IA:", error)
      return false
    }
  }
  // Analyser les données financières en temps réel
  public async analyzeFinancialHealth(params: AIModelParams): Promise<{
    score: number
    status: string
    recommendations: string[]
    strengths: string[]
    weaknesses: string[]
  }> {
    if (!this.isInitialized) await this.initialize()
    const { financialData, emotionalContext } = params
    // Calculer le score financier avec un algorithme avancé
    let score = 50 // Score par défaut
    const recommendations: string[] = []
    const strengths: string[] = []
    const weaknesses: string[] = []
    // Calculer les totaux
    const totalIncome = this.calculateTotalValue(financialData.incomes || [])
    const totalExpenses = this.calculateTotalValue(financialData.expenses || [])
    const totalSavings = this.calculateTotalValue(financialData.savings || [])
    const totalInvestments = this.calculateTotalValue(
      financialData.investments || [],
    )
    const totalDebts = this.calculateTotalValue(financialData.debts || [])
    // Calculer le score en fonction de plusieurs facteurs
    const balance = totalIncome - totalExpenses
    const savingsRatio =
      totalIncome > 0 ? (totalSavings / totalIncome) * 100 : 0
    const debtToIncomeRatio =
      totalIncome > 0 ? (totalDebts / totalIncome) * 100 : 0
    // Ajuster le score en fonction des ratios financiers
    if (balance > 0) score += 10
    if (balance < 0) score -= 15
    if (savingsRatio > 20) score += 15
    if (savingsRatio < 10) score -= 10
    if (debtToIncomeRatio < 30) score += 10
    if (debtToIncomeRatio > 50) score -= 15
    // Ajuster le score en fonction du contexte émotionnel
    if (emotionalContext) {
      if (emotionalContext.mood > 7) score -= 5 // Stress élevé
      if (emotionalContext.mood < 4) score += 5 // Faible stress
    }
    // Limiter le score entre 0 et 100
    score = Math.max(0, Math.min(100, score))
    // Définir le statut en fonction du score
    let status = 'Critique'
    if (score >= 80) status = 'Excellente'
    else if (score >= 60) status = 'Bonne'
    else if (score >= 40) status = 'Moyenne'
    else if (score >= 20) status = 'Faible'
    // Générer des recommandations personnalisées
    if (balance < 0) {
      recommendations.push(
        'Réduisez vos dépenses non essentielles pour équilibrer votre budget',
      )
      weaknesses.push('Balance mensuelle négative')
    } else {
      strengths.push('Balance mensuelle positive')
    }
    if (savingsRatio < 15) {
      recommendations.push("Essayez d'épargner au moins 15% de vos revenus")
      weaknesses.push("Taux d'épargne insuffisant")
    } else {
      strengths.push("Bon taux d'épargne")
    }
    if (debtToIncomeRatio > 40) {
      recommendations.push('Concentrez-vous sur le remboursement de vos dettes')
      weaknesses.push('Ratio dette/revenu élevé')
    } else if (totalDebts > 0) {
      strengths.push("Niveau d'endettement maîtrisé")
    }
    if (totalInvestments === 0 && totalIncome > 0) {
      recommendations.push("Envisagez d'investir une partie de votre épargne")
      weaknesses.push("Absence d'investissements")
    } else if (totalInvestments > 0) {
      strengths.push("Présence d'investissements")
    }
    this.lastUpdate = new Date()
    return {
      score,
      status,
      recommendations,
      strengths,
      weaknesses,
    }
  }
  // Générer des insights financiers personnalisés
  public async generateInsights(
    financialData: any,
  ): Promise<FinancialInsight[]> {
    if (!this.isInitialized) await this.initialize()
    const insights: FinancialInsight[] = []
    const totalIncome = this.calculateTotalValue(financialData.incomes || [])
    const totalExpenses = this.calculateTotalValue(financialData.expenses || [])
    // Analyser les dépenses par catégorie
    const expensesByCategory = this.groupByCategory(
      financialData.expenses || [],
    )
    const topExpenses = Object.entries(expensesByCategory)
      .sort((a, b) => (b[1] as number) - (a[1] as number))
      .slice(0, 3)
    // Insight sur le ratio dépenses/revenus
    if (totalIncome > 0) {
      const expenseRatio = (totalExpenses / totalIncome) * 100
      if (expenseRatio > 90) {
        insights.push({
          id: 'expense-ratio-high',
          title: 'Dépenses trop proches des revenus',
          description: `Vos dépenses représentent ${expenseRatio.toFixed(0)}% de vos revenus, ce qui laisse peu de marge pour l'épargne.`,
          category: 'expense',
          impact: 'high',
          action: "Essayez de réduire vos dépenses d'au moins 15%",
          potentialSavings: totalExpenses * 0.15,
        })
      } else if (expenseRatio < 60) {
        insights.push({
          id: 'expense-ratio-good',
          title: 'Excellent ratio dépenses/revenus',
          description: `Vos dépenses représentent seulement ${expenseRatio.toFixed(0)}% de vos revenus, ce qui est très bon.`,
          category: 'expense',
          impact: 'low',
          action: "Envisagez d'investir votre surplus d'épargne",
        })
      }
    }
    // Insight sur les principales dépenses
    if (topExpenses.length > 0) {
      const [topCategory, topAmount] = topExpenses[0]
      const percentage =
        totalExpenses > 0 ? ((topAmount as number) / totalExpenses) * 100 : 0
      if (percentage > 30) {
        insights.push({
          id: 'top-expense-category',
          title: `${topCategory} : poste de dépense majeur`,
          description: `${topCategory} représente ${percentage.toFixed(0)}% de vos dépenses totales.`,
          category: 'expense',
          impact: 'medium',
          action: `Analysez vos dépenses en ${topCategory.toString().toLowerCase()} pour identifier des économies potentielles`,
          potentialSavings: (topAmount as number) * 0.1,
        })
      }
    }
    // Insight sur l'épargne
    const totalSavings = this.calculateTotalValue(financialData.savings || [])
    if (totalIncome > 0 && totalSavings > 0) {
      const savingsRatio = (totalSavings / totalIncome) * 100
      if (savingsRatio < 10) {
        insights.push({
          id: 'savings-ratio-low',
          title: "Taux d'épargne insuffisant",
          description: `Votre taux d'épargne est de ${savingsRatio.toFixed(1)}%, ce qui est inférieur au minimum recommandé de 10%.`,
          category: 'savings',
          impact: 'high',
          action: 'Augmentez votre épargne à au moins 10% de vos revenus',
        })
      } else if (savingsRatio > 25) {
        insights.push({
          id: 'savings-ratio-high',
          title: "Excellent taux d'épargne",
          description: `Votre taux d'épargne est de ${savingsRatio.toFixed(1)}%, ce qui est très bon.`,
          category: 'savings',
          impact: 'low',
          action:
            'Envisagez de diversifier votre épargne dans différents placements',
        })
      }
    }
    // Insight sur les investissements
    const totalInvestments = this.calculateTotalValue(
      financialData.investments || [],
    )
    if (totalSavings > 0 && totalInvestments === 0) {
      insights.push({
        id: 'no-investments',
        title: "Absence d'investissements",
        description:
          "Vous avez de l'épargne mais aucun investissement, ce qui limite votre potentiel de croissance financière.",
        category: 'investment',
        impact: 'medium',
        action:
          "Envisagez d'investir une partie de votre épargne pour générer des rendements",
      })
    }
    // Insight sur les dettes
    const totalDebts = this.calculateTotalValue(financialData.debts || [])
    if (totalDebts > 0 && totalIncome > 0) {
      const debtToIncomeRatio = (totalDebts / totalIncome) * 100
      if (debtToIncomeRatio > 40) {
        insights.push({
          id: 'high-debt-ratio',
          title: "Niveau d'endettement élevé",
          description: `Votre ratio dette/revenu est de ${debtToIncomeRatio.toFixed(0)}%, ce qui est considéré comme élevé.`,
          category: 'debts',
          impact: 'high',
          action:
            "Priorisez le remboursement des dettes à taux d'intérêt élevé",
        })
      }
    }
    this.lastUpdate = new Date()
    return insights
  }
  // Exécuter des simulations financières avancées
  public async runSimulation(
    params: SimulationParams,
  ): Promise<SimulationResult> {
    if (!this.isInitialized) await this.initialize()
    const {
      name,
      incomeGrowth = 2,
      expenseReduction = 1,
      savingsRate = 50,
      investmentReturn = 5,
      inflationRate = 2,
      years = 10,
    } = params
    // Simulation plus réaliste avec calculs avancés
    const initialIncome = 2500
    const initialExpenses = 1800
    const initialSavings = 5000
    const yearsArray: number[] = []
    const incomeArray: number[] = []
    const expensesArray: number[] = []
    const savingsArray: number[] = []
    const netWorthArray: number[] = []
    let currentIncome = initialIncome
    let currentExpenses = initialExpenses
    let currentSavings = initialSavings
    let currentNetWorth = initialSavings
    for (let i = 0; i <= years; i++) {
      yearsArray.push(new Date().getFullYear() + i)
      if (i > 0) {
        // Augmentation des revenus avec croissance composée
        currentIncome *= 1 + incomeGrowth / 100
        // Réduction des dépenses (avec un plancher)
        if (i <= 5) {
          // Limite la réduction aux 5 premières années
          currentExpenses *= 1 - expenseReduction / 100
        } else {
          // Après 5 ans, les dépenses augmentent avec l'inflation
          currentExpenses *= 1 + inflationRate / 100
        }
        // Calcul de l'épargne mensuelle
        const monthlySavings = Math.max(0, currentIncome - currentExpenses)
        // Allocation de l'épargne selon le taux d'épargne
        const newSavings = monthlySavings * (savingsRate / 100) * 12
        const newInvestments = monthlySavings * (1 - savingsRate / 100) * 12
        // Rendement des investissements existants
        const investmentGrowth =
          (currentNetWorth - currentSavings) * (investmentReturn / 100)
        // Mise à jour des totaux
        currentSavings += newSavings
        currentNetWorth += newSavings + newInvestments + investmentGrowth
      }
      incomeArray.push(Math.round(currentIncome))
      expensesArray.push(Math.round(currentExpenses))
      savingsArray.push(Math.round(currentSavings))
      netWorthArray.push(Math.round(currentNetWorth))
    }
    this.lastUpdate = new Date()
    return {
      name,
      years: yearsArray,
      income: incomeArray,
      expenses: expensesArray,
      savings: savingsArray,
      netWorth: netWorthArray,
    }
  }
  // Détecter les frais cachés et optimisations potentielles
  public async detectHiddenFees(financialData: any): Promise<{
    totalAmount: number
    items: Array<{
      category: string
      amount: number
      description: string
    }>
  }> {
    if (!this.isInitialized) await this.initialize()
    const hiddenFees: Array<{
      category: string
      amount: number
      description: string
    }> = []
    let totalAmount = 0
    // Analyser les dépenses récurrentes
    const recurringExpenses = (financialData.expenses || []).filter(
      (expense: FinancialItem) => expense.isRecurring,
    )
    // Détecter les abonnements potentiellement non utilisés
    const subscriptions = recurringExpenses.filter((expense: FinancialItem) => {
      const category = expense.category.toLowerCase()
      return (
        category.includes('abonnement') ||
        category.includes('streaming') ||
        category.includes('service')
      )
    })
    if (subscriptions.length > 2) {
      const subscriptionTotal = this.calculateTotalValue(subscriptions)
      const potentialSaving = subscriptionTotal * 0.3
      hiddenFees.push({
        category: 'Abonnements multiples',
        amount: Math.round(potentialSaving),
        description:
          'Vous avez plusieurs abonnements. Envisagez de regrouper ou annuler ceux que vous utilisez peu.',
      })
      totalAmount += potentialSaving
    }
    // Détecter les frais bancaires potentiellement élevés
    const bankFees = recurringExpenses.filter((expense: FinancialItem) => {
      const category = expense.category.toLowerCase()
      return category.includes('banque') || category.includes('frais')
    })
    if (bankFees.length > 0) {
      const bankFeesTotal = this.calculateTotalValue(bankFees)
      if (bankFeesTotal > 10) {
        hiddenFees.push({
          category: 'Frais bancaires',
          amount: Math.round(bankFeesTotal),
          description:
            "Vos frais bancaires semblent élevés. Comparez les offres d'autres banques ou négociez.",
        })
        totalAmount += bankFeesTotal
      }
    }
    // Simuler la détection d'autres frais cachés
    const totalExpenses = this.calculateTotalValue(financialData.expenses || [])
    if (totalExpenses > 0) {
      // Assurances potentiellement optimisables
      const potentialInsuranceSaving = totalExpenses * 0.02
      hiddenFees.push({
        category: 'Assurances',
        amount: Math.round(potentialInsuranceSaving),
        description:
          "Comparez vos assurances avec d'autres offres pour potentiellement économiser.",
      })
      totalAmount += potentialInsuranceSaving
      // Économies d'énergie potentielles
      const potentialEnergySaving = totalExpenses * 0.015
      hiddenFees.push({
        category: 'Énergie',
        amount: Math.round(potentialEnergySaving),
        description:
          "Vérifiez si vous pouvez réduire vos factures d'énergie avec un autre fournisseur.",
      })
      totalAmount += potentialEnergySaving
    }
    this.lastUpdate = new Date()
    return {
      totalAmount,
      items: hiddenFees,
    }
  }
  // Méthodes utilitaires
  private calculateTotalValue(items: FinancialItem[]): number {
    return items.reduce((sum, item) => {
      const value =
        typeof item.value === 'number'
          ? item.value
          : parseFloat(item.value) || 0
      return sum + value
    }, 0)
  }
  private groupByCategory(items: FinancialItem[]): Record<string, number> {
    return items.reduce(
      (acc, item) => {
        const category = item.category
        const value =
          typeof item.value === 'number'
            ? item.value
            : parseFloat(item.value) || 0
        if (acc[category]) {
          acc[category] += value
        } else {
          acc[category] = value
        }
        return acc
      },
      {} as Record<string, number>,
    )
  }
}
export const aiFinanceService = AIFinanceService.getInstance()

```
```styles/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;
body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #111827;
  color: white;
  min-height: 100vh;
}
#root {
  min-height: 100vh;
}
* {
  box-sizing: border-box;
}
```
```stores/financeStore.tsx
import React from 'react'
import create from 'zustand'
import { persist } from 'zustand/middleware'
import { FinancialData } from '../types/finance'
interface FinanceStore {
  hasCompletedOnboarding: boolean
  setHasCompletedOnboarding: (value: boolean) => void
  questionHistory: string[]
  addQuestionToHistory: (question: string) => void
  clearQuestionHistory: () => void
  financialSnapshots: {
    date: string
    data: FinancialData
  }[]
  saveFinancialSnapshot: (data?: FinancialData) => void
  clearFinancialSnapshots: () => void
  selectedTheme: string
  setSelectedTheme: (theme: string) => void
}
export const useFinanceStore = create<FinanceStore>()(
  persist(
    (set) => ({
      hasCompletedOnboarding: false,
      setHasCompletedOnboarding: (value) =>
        set({
          hasCompletedOnboarding: value,
        }),
      questionHistory: [],
      addQuestionToHistory: (question) =>
        set((state) => {
          // Add question to history if it doesn't already exist
          if (!state.questionHistory.includes(question)) {
            return {
              questionHistory: [question, ...state.questionHistory].slice(
                0,
                10,
              ), // Keep only the last 10 questions
            }
          }
          return state
        }),
      clearQuestionHistory: () =>
        set({
          questionHistory: [],
        }),
      financialSnapshots: [],
      saveFinancialSnapshot: (data) =>
        set((state) => {
          const snapshot = {
            date: new Date().toISOString(),
            data: data || {
              incomes: [],
              expenses: [],
              savings: [],
              investments: [],
              debts: [],
            },
          }
          return {
            financialSnapshots: [snapshot, ...state.financialSnapshots].slice(
              0,
              12,
            ), // Keep only the last 12 snapshots
          }
        }),
      clearFinancialSnapshots: () =>
        set({
          financialSnapshots: [],
        }),
      selectedTheme: 'neon',
      setSelectedTheme: (theme) =>
        set({
          selectedTheme: theme,
        }),
    }),
    {
      name: 'finance-store',
    },
  ),
)

```
```components/Profile.tsx
import React, { useEffect, useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import { toast, Toaster } from 'react-hot-toast'
import {
  UserIcon,
  MailIcon,
  PhoneIcon,
  HomeIcon,
  CreditCardIcon,
  ShieldIcon,
  BellIcon,
  SaveIcon,
  CheckIcon,
  KeyIcon,
  BadgeIcon,
  CalendarIcon,
  PenIcon,
  EyeIcon,
  EyeOffIcon,
  FileIcon,
  DownloadIcon,
  UploadIcon,
  BookmarkIcon,
} from 'lucide-react'
export function Profile() {
  const navigate = useNavigate()
  const { themeColors } = useTheme()
  // Profile state
  const [profileData, setProfileData] = useState({
    name: 'Utilisateur',
    email: 'utilisateur@example.com',
    phone: '+33 6 12 34 56 78',
    address: '123 Rue de Paris, 75001 Paris, France',
    birthdate: '1985-05-15',
    occupation: 'Profession',
  })
  // Security settings state
  const [twoFactorEnabled, setTwoFactorEnabled] = useState(true)
  const [emailNotificationsEnabled, setEmailNotificationsEnabled] =
    useState(true)
  const [passwordVisible, setPasswordVisible] = useState(false)
  // Password change state
  const [passwordData, setPasswordData] = useState({
    current: '',
    new: '',
    confirm: '',
  })
  // Form validation state
  const [formErrors, setFormErrors] = useState({
    name: '',
    email: '',
    phone: '',
    current: '',
    new: '',
    confirm: '',
  })
  // UI state
  const [saveSuccess, setSaveSuccess] = useState(false)
  const [changingPassword, setChangingPassword] = useState(false)
  const [uploadingPhoto, setUploadingPhoto] = useState(false)
  const [photoPreview, setPhotoPreview] = useState<string | null>(null)
  // Activity data
  const [activityData] = useState([
    {
      date: '2023-12-15',
      action: 'Simulation créée',
      details: 'Simulation optimiste',
    },
    {
      date: '2023-12-10',
      action: 'Objectif ajouté',
      details: "Fonds d'urgence",
    },
    {
      date: '2023-12-05',
      action: 'Profil mis à jour',
      details: 'Informations personnelles',
    },
    {
      date: '2023-11-28',
      action: 'Inscription',
      details: 'Bienvenue sur la plateforme',
    },
  ])
  // Handle input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setProfileData((prev) => ({
      ...prev,
      [name]: value,
    }))
    // Clear error when field is edited
    if (formErrors[name as keyof typeof formErrors]) {
      setFormErrors((prev) => ({
        ...prev,
        [name]: '',
      }))
    }
  }
  // Handle password input change
  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setPasswordData((prev) => ({
      ...prev,
      [name]: value,
    }))
    // Clear error when field is edited
    if (formErrors[name as keyof typeof formErrors]) {
      setFormErrors((prev) => ({
        ...prev,
        [name]: '',
      }))
    }
  }
  // Validate form
  const validateForm = () => {
    let isValid = true
    const errors = {
      name: '',
      email: '',
      phone: '',
      current: '',
      new: '',
      confirm: '',
    }
    // Validate name
    if (!profileData.name.trim()) {
      errors.name = 'Le nom est requis'
      isValid = false
    }
    // Validate email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!profileData.email.trim() || !emailRegex.test(profileData.email)) {
      errors.email = 'Email invalide'
      isValid = false
    }
    // Validate phone (simple check)
    if (profileData.phone && !/^[+\d\s()-]{6,20}$/.test(profileData.phone)) {
      errors.phone = 'Numéro de téléphone invalide'
      isValid = false
    }
    setFormErrors(errors)
    return isValid
  }
  // Validate password
  const validatePassword = () => {
    let isValid = true
    const errors = {
      ...formErrors,
    }
    if (!passwordData.current) {
      errors.current = 'Le mot de passe actuel est requis'
      isValid = false
    }
    if (!passwordData.new) {
      errors.new = 'Le nouveau mot de passe est requis'
      isValid = false
    } else if (passwordData.new.length < 8) {
      errors.new = 'Le mot de passe doit contenir au moins 8 caractères'
      isValid = false
    }
    if (passwordData.new !== passwordData.confirm) {
      errors.confirm = 'Les mots de passe ne correspondent pas'
      isValid = false
    }
    setFormErrors(errors)
    return isValid
  }
  // Handle save profile
  const handleSaveProfile = () => {
    if (validateForm()) {
      // In a real app, this would save to the backend
      toast.success('Profil mis à jour avec succès')
      setSaveSuccess(true)
      setTimeout(() => {
        setSaveSuccess(false)
      }, 3000)
    } else {
      toast.error('Veuillez corriger les erreurs dans le formulaire')
    }
  }
  // Handle change password
  const handleChangePassword = () => {
    if (validatePassword()) {
      toast.success('Mot de passe mis à jour avec succès')
      setChangingPassword(false)
      setPasswordData({
        current: '',
        new: '',
        confirm: '',
      })
    } else {
      toast.error('Veuillez corriger les erreurs dans le formulaire')
    }
  }
  // Handle photo upload
  const handlePhotoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setUploadingPhoto(true)
      // Simulate upload delay
      setTimeout(() => {
        const reader = new FileReader()
        reader.onload = (event) => {
          if (event.target?.result) {
            setPhotoPreview(event.target.result as string)
          }
          setUploadingPhoto(false)
          toast.success('Photo de profil mise à jour')
        }
        reader.readAsDataURL(file)
      }, 1000)
    }
  }
  // Format date for display
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return new Intl.DateTimeFormat('fr-FR').format(date)
  }
  return (
    <div className="w-full max-w-4xl mx-auto pb-20">
      <Toaster position="top-right" />
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold">Profil</h1>
            <p className={`${themeColors?.textSecondary || 'text-gray-400'}`}>
              Gérez vos informations personnelles et préférences
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={handleSaveProfile}
              className={`bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white px-4 py-2 rounded-lg flex items-center transition-all duration-300`}
            >
              <SaveIcon className="mr-2 h-4 w-4" />
              Sauvegarder
            </button>
          </div>
        </div>
        {saveSuccess && (
          <div className="bg-green-500/20 border border-green-500/30 text-green-300 px-4 py-2 rounded-lg flex items-center mb-4">
            <CheckIcon className="h-5 w-5 mr-2" />
            Profil mis à jour avec succès
          </div>
        )}
      </motion.div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div>
          <GlassCard className="p-6 mb-6" animate>
            <div className="flex flex-col items-center">
              <div className="relative">
                {uploadingPhoto ? (
                  <div className="w-32 h-32 rounded-full bg-black/30 flex items-center justify-center">
                    <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
                  </div>
                ) : photoPreview ? (
                  <img
                    src={photoPreview}
                    alt="Profile"
                    className="w-32 h-32 rounded-full object-cover"
                  />
                ) : (
                  <div className="w-32 h-32 rounded-full bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center text-4xl font-bold">
                    {profileData.name.charAt(0).toUpperCase()}
                  </div>
                )}
                <div className="absolute bottom-0 right-0">
                  <label className="cursor-pointer w-8 h-8 rounded-full bg-indigo-600 flex items-center justify-center hover:bg-indigo-700 transition-colors">
                    <PenIcon className="h-4 w-4" />
                    <input
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handlePhotoUpload}
                    />
                  </label>
                </div>
              </div>
              <h2 className="text-xl font-semibold mt-4">{profileData.name}</h2>
              <p
                className={`text-sm ${themeColors?.textSecondary || 'text-gray-400'}`}
              >
                Membre depuis 2023
              </p>
              <div className="mt-6 w-full">
                <div className="flex space-x-2">
                  <label className="flex-1 cursor-pointer py-2 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-600 hover:opacity-90 text-sm text-center block">
                    Modifier la photo
                    <input
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handlePhotoUpload}
                    />
                  </label>
                  {photoPreview && (
                    <button
                      onClick={() => setPhotoPreview(null)}
                      className="py-2 px-3 rounded-lg bg-black/30 hover:bg-black/40 text-sm"
                    >
                      Supprimer
                    </button>
                  )}
                </div>
              </div>
            </div>
          </GlassCard>
          <GlassCard className="p-6 mb-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <BadgeIcon className="h-5 w-5 mr-2 text-blue-400" />
              Niveau du compte
            </h3>
            <div className="bg-black/20 p-4 rounded-lg mb-4">
              <div className="flex items-center justify-between mb-2">
                <h4 className="text-sm font-medium">Compte Standard</h4>
                <span className="text-xs bg-indigo-500/20 text-indigo-300 px-2 py-0.5 rounded-full">
                  Actif
                </span>
              </div>
              <div className="w-full bg-black/30 h-2 rounded-full mb-1">
                <div
                  className="h-2 rounded-full bg-indigo-500"
                  style={{
                    width: '30%',
                  }}
                ></div>
              </div>
              <div className="flex justify-between text-xs text-gray-400">
                <span>Standard</span>
                <span>Premium</span>
              </div>
              <button
                onClick={() => toast.success('Fonctionnalité en développement')}
                className="w-full mt-3 py-1.5 rounded-lg bg-gradient-to-r from-yellow-500 to-amber-600 text-white text-sm"
              >
                Passer à Premium
              </button>
            </div>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm">Simulations avancées</span>
                <span className="text-xs bg-gray-500/20 text-gray-300 px-2 py-0.5 rounded-full">
                  Premium
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Exportations PDF</span>
                <span className="text-xs bg-gray-500/20 text-gray-300 px-2 py-0.5 rounded-full">
                  Premium
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Conseils personnalisés</span>
                <span className="text-xs bg-gray-500/20 text-gray-300 px-2 py-0.5 rounded-full">
                  Premium
                </span>
              </div>
            </div>
          </GlassCard>
          <GlassCard className="p-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <CalendarIcon className="h-5 w-5 mr-2 text-green-400" />
              Activité récente
            </h3>
            <div className="space-y-4">
              {activityData.map((activity, index) => (
                <div key={index} className="bg-black/20 p-3 rounded-lg">
                  <div className="flex justify-between mb-1">
                    <span className="text-sm font-medium">
                      {activity.action}
                    </span>
                    <span className="text-xs text-gray-400">
                      {formatDate(activity.date)}
                    </span>
                  </div>
                  <p className="text-xs text-gray-300">{activity.details}</p>
                </div>
              ))}
              <button
                onClick={() => toast.success('Fonctionnalité en développement')}
                className="w-full py-2 bg-black/20 hover:bg-black/30 rounded-lg text-sm transition-all duration-200"
              >
                Voir toute l'activité
              </button>
            </div>
          </GlassCard>
        </div>
        <div className="lg:col-span-2">
          <GlassCard className="p-6 mb-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <UserIcon className="h-5 w-5 mr-2 text-indigo-400" />
              Informations personnelles
            </h3>
            <div className="space-y-4">
              <div>
                <label
                  className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                >
                  Nom complet
                </label>
                <input
                  type="text"
                  name="name"
                  value={profileData.name}
                  onChange={handleInputChange}
                  className={`w-full bg-black/20 border ${formErrors.name ? 'border-red-500' : 'border-white/10'} rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50`}
                />
                {formErrors.name && (
                  <p className="text-xs text-red-500 mt-1">{formErrors.name}</p>
                )}
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                  >
                    Email
                  </label>
                  <div className="flex items-center">
                    <MailIcon className="h-4 w-4 mr-2 text-gray-400" />
                    <input
                      type="email"
                      name="email"
                      value={profileData.email}
                      onChange={handleInputChange}
                      className={`w-full bg-black/20 border ${formErrors.email ? 'border-red-500' : 'border-white/10'} rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50`}
                    />
                  </div>
                  {formErrors.email && (
                    <p className="text-xs text-red-500 mt-1">
                      {formErrors.email}
                    </p>
                  )}
                </div>
                <div>
                  <label
                    className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                  >
                    Téléphone
                  </label>
                  <div className="flex items-center">
                    <PhoneIcon className="h-4 w-4 mr-2 text-gray-400" />
                    <input
                      type="tel"
                      name="phone"
                      value={profileData.phone}
                      onChange={handleInputChange}
                      className={`w-full bg-black/20 border ${formErrors.phone ? 'border-red-500' : 'border-white/10'} rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50`}
                    />
                  </div>
                  {formErrors.phone && (
                    <p className="text-xs text-red-500 mt-1">
                      {formErrors.phone}
                    </p>
                  )}
                </div>
              </div>
              <div>
                <label
                  className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                >
                  Adresse
                </label>
                <div className="flex items-center">
                  <HomeIcon className="h-4 w-4 mr-2 text-gray-400" />
                  <input
                    type="text"
                    name="address"
                    value={profileData.address}
                    onChange={handleInputChange}
                    className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                  >
                    Date de naissance
                  </label>
                  <div className="flex items-center">
                    <CalendarIcon className="h-4 w-4 mr-2 text-gray-400" />
                    <input
                      type="date"
                      name="birthdate"
                      value={profileData.birthdate}
                      onChange={handleInputChange}
                      className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                    />
                  </div>
                </div>
                <div>
                  <label
                    className={`block text-sm ${themeColors?.textSecondary || 'text-gray-400'} mb-1`}
                  >
                    Profession
                  </label>
                  <div className="flex items-center">
                    <BadgeIcon className="h-4 w-4 mr-2 text-gray-400" />
                    <input
                      type="text"
                      name="occupation"
                      value={profileData.occupation}
                      onChange={handleInputChange}
                      className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                    />
                  </div>
                </div>
              </div>
            </div>
          </GlassCard>
          <GlassCard className="p-6 mb-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <ShieldIcon className="h-5 w-5 mr-2 text-green-400" />
              Sécurité et notifications
            </h3>
            <div className="space-y-6">
              <div>
                <label className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <ShieldIcon className="h-5 w-5 mr-2 text-green-400" />
                    <span>Authentification à deux facteurs</span>
                  </div>
                  <div className="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full">
                    <input
                      type="checkbox"
                      id="toggle-2fa"
                      className="absolute w-0 h-0 opacity-0"
                      checked={twoFactorEnabled}
                      onChange={() => setTwoFactorEnabled(!twoFactorEnabled)}
                    />
                    <label
                      htmlFor="toggle-2fa"
                      className={`block h-6 overflow-hidden rounded-full cursor-pointer ${twoFactorEnabled ? 'bg-indigo-600' : 'bg-gray-600'}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform duration-200 ${twoFactorEnabled ? 'translate-x-6' : 'translate-x-0'}`}
                      ></span>
                    </label>
                  </div>
                </label>
                <div className="text-sm text-gray-400 mb-4">
                  Augmentez la sécurité de votre compte avec l'authentification
                  à deux facteurs
                </div>
              </div>
              <div>
                <label className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <BellIcon className="h-5 w-5 mr-2 text-yellow-400" />
                    <span>Notifications par email</span>
                  </div>
                  <div className="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full">
                    <input
                      type="checkbox"
                      id="toggle-email"
                      className="absolute w-0 h-0 opacity-0"
                      checked={emailNotificationsEnabled}
                      onChange={() =>
                        setEmailNotificationsEnabled(!emailNotificationsEnabled)
                      }
                    />
                    <label
                      htmlFor="toggle-email"
                      className={`block h-6 overflow-hidden rounded-full cursor-pointer ${emailNotificationsEnabled ? 'bg-indigo-600' : 'bg-gray-600'}`}
                    >
                      <span
                        className={`block h-6 w-6 rounded-full bg-white transform transition-transform duration-200 ${emailNotificationsEnabled ? 'translate-x-6' : 'translate-x-0'}`}
                      ></span>
                    </label>
                  </div>
                </label>
                <div className="text-sm text-gray-400 mb-4">
                  Recevez des notifications par email sur les mises à jour
                  importantes
                </div>
              </div>
              {!changingPassword ? (
                <div>
                  <button
                    onClick={() => setChangingPassword(true)}
                    className="w-full py-2 bg-black/20 hover:bg-black/30 rounded-lg text-sm transition-all duration-200 flex items-center justify-center"
                  >
                    <KeyIcon className="h-4 w-4 mr-2" />
                    Changer le mot de passe
                  </button>
                </div>
              ) : (
                <div className="bg-black/20 p-4 rounded-lg">
                  <h4 className="text-sm font-medium mb-3 flex items-center">
                    <KeyIcon className="h-4 w-4 mr-2" />
                    Changer le mot de passe
                  </h4>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-xs text-gray-400 mb-1">
                        Mot de passe actuel
                      </label>
                      <div className="relative">
                        <input
                          type={passwordVisible ? 'text' : 'password'}
                          name="current"
                          value={passwordData.current}
                          onChange={handlePasswordChange}
                          className={`w-full bg-black/30 border ${formErrors.current ? 'border-red-500' : 'border-white/10'} rounded-lg py-2 px-3 pr-10 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50`}
                        />
                        <button
                          type="button"
                          onClick={() => setPasswordVisible(!passwordVisible)}
                          className="absolute inset-y-0 right-0 flex items-center px-3"
                        >
                          {passwordVisible ? (
                            <EyeOffIcon className="h-4 w-4 text-gray-400" />
                          ) : (
                            <EyeIcon className="h-4 w-4 text-gray-400" />
                          )}
                        </button>
                      </div>
                      {formErrors.current && (
                        <p className="text-xs text-red-500 mt-1">
                          {formErrors.current}
                        </p>
                      )}
                    </div>
                    <div>
                      <label className="block text-xs text-gray-400 mb-1">
                        Nouveau mot de passe
                      </label>
                      <input
                        type={passwordVisible ? 'text' : 'password'}
                        name="new"
                        value={passwordData.new}
                        onChange={handlePasswordChange}
                        className={`w-full bg-black/30 border ${formErrors.new ? 'border-red-500' : 'border-white/10'} rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50`}
                      />
                      {formErrors.new && (
                        <p className="text-xs text-red-500 mt-1">
                          {formErrors.new}
                        </p>
                      )}
                    </div>
                    <div>
                      <label className="block text-xs text-gray-400 mb-1">
                        Confirmer le mot de passe
                      </label>
                      <input
                        type={passwordVisible ? 'text' : 'password'}
                        name="confirm"
                        value={passwordData.confirm}
                        onChange={handlePasswordChange}
                        className={`w-full bg-black/30 border ${formErrors.confirm ? 'border-red-500' : 'border-white/10'} rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50`}
                      />
                      {formErrors.confirm && (
                        <p className="text-xs text-red-500 mt-1">
                          {formErrors.confirm}
                        </p>
                      )}
                    </div>
                    <div className="flex space-x-2 pt-2">
                      <button
                        onClick={handleChangePassword}
                        className="flex-1 py-2 bg-gradient-to-r from-indigo-500 to-purple-600 hover:opacity-90 rounded-lg text-sm"
                      >
                        Mettre à jour
                      </button>
                      <button
                        onClick={() => {
                          setChangingPassword(false)
                          setPasswordData({
                            current: '',
                            new: '',
                            confirm: '',
                          })
                          setFormErrors({
                            ...formErrors,
                            current: '',
                            new: '',
                            confirm: '',
                          })
                        }}
                        className="py-2 px-4 bg-black/30 hover:bg-black/40 rounded-lg text-sm"
                      >
                        Annuler
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </GlassCard>
          <GlassCard className="p-6" animate>
            <h3 className="font-medium mb-4 flex items-center">
              <FileIcon className="h-5 w-5 mr-2 text-blue-400" />
              Documents et données
            </h3>
            <div className="space-y-4">
              <div className="bg-black/20 p-4 rounded-lg">
                <h4 className="text-sm font-medium mb-3">
                  Exportation des données
                </h4>
                <p className="text-xs text-gray-400 mb-3">
                  Exportez toutes vos données financières et simulations dans
                  différents formats
                </p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <button
                    onClick={() => toast.success('Export CSV en cours...')}
                    className="py-2 px-3 bg-black/30 hover:bg-black/40 rounded-lg text-sm flex items-center justify-center"
                  >
                    <DownloadIcon className="h-4 w-4 mr-2" />
                    Exporter en CSV
                  </button>
                  <button
                    onClick={() => toast.success('Export JSON en cours...')}
                    className="py-2 px-3 bg-black/30 hover:bg-black/40 rounded-lg text-sm flex items-center justify-center"
                  >
                    <DownloadIcon className="h-4 w-4 mr-2" />
                    Exporter en JSON
                  </button>
                </div>
              </div>
              <div className="bg-black/20 p-4 rounded-lg">
                <h4 className="text-sm font-medium mb-3">
                  Importation des données
                </h4>
                <p className="text-xs text-gray-400 mb-3">
                  Importez vos données financières depuis un fichier
                </p>
                <label className="w-full py-2 px-3 bg-black/30 hover:bg-black/40 rounded-lg text-sm flex items-center justify-center cursor-pointer">
                  <UploadIcon className="h-4 w-4 mr-2" />
                  Importer des données
                  <input
                    type="file"
                    className="hidden"
                    accept=".csv,.json"
                    onChange={() =>
                      toast.success('Fonctionnalité en développement')
                    }
                  />
                </label>
              </div>
              <div className="bg-black/20 p-4 rounded-lg">
                <h4 className="text-sm font-medium mb-3 flex items-center">
                  <BookmarkIcon className="h-4 w-4 mr-2 text-yellow-400" />
                  Préférences enregistrées
                </h4>
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Sauvegardes automatiques</span>
                    <span className="text-xs bg-green-500/20 text-green-300 px-2 py-0.5 rounded-full">
                      Activé
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Synchronisation cloud</span>
                    <span className="text-xs bg-yellow-500/20 text-yellow-300 px-2 py-0.5 rounded-full flex items-center">
                      <LockIcon className="h-3 w-3 mr-1" />
                      Premium
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Stockage des données</span>
                    <span className="text-xs">Local</span>
                  </div>
                </div>
              </div>
            </div>
          </GlassCard>
        </div>
      </div>
    </div>
  )
}

```
```components/Library.tsx
import React, { useEffect, useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import {
  SearchIcon,
  BookOpenIcon,
  DownloadIcon,
  ClockIcon,
  StarIcon,
  FilterIcon,
  ChevronRightIcon,
  FileTextIcon,
  BookIcon,
  NewspaperIcon,
  FileIcon,
  ExternalLinkIcon,
  BarChartIcon,
  TrendingUpIcon,
  GlobeIcon,
  CreditCardIcon,
  HomeIcon,
  PiggyBankIcon,
  ShieldIcon,
} from 'lucide-react'
interface Resource {
  id: string
  title: string
  description: string
  category: string
  type: 'article' | 'guide' | 'rapport' | 'outil'
  source: string
  url: string
  image?: string
  date: string
  featured?: boolean
  tags: string[]
  rating: number // 1-5
}
export function Library() {
  const navigate = useNavigate()
  const { themeColors } = useTheme()
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)
  const [selectedType, setSelectedType] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [resources, setResources] = useState<Resource[]>([])
  useEffect(() => {
    // Simulate loading resources data
    const loadResources = async () => {
      setIsLoading(true)
      // Mock resources data with real information and links
      const mockResources: Resource[] = [
        {
          id: '1',
          title: "Guide complet de l'investisseur 2023",
          description:
            'Un guide détaillé pour les investisseurs débutants et intermédiaires avec les stratégies adaptées au contexte économique actuel.',
          category: 'Investissement',
          type: 'guide',
          source: 'AMF',
          url: 'https://www.amf-france.org/fr/actualites-publications/publications/guides/guides-epargnants',
          image:
            'https://images.unsplash.com/photo-1579532537598-459ecdaf39cc?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          date: '2023-11-15',
          featured: true,
          tags: ['investissement', 'bourse', 'actions', 'obligations'],
          rating: 4.8,
        },
        {
          id: '2',
          title: "Rapport sur l'inflation et son impact sur l'épargne",
          description:
            "Analyse approfondie de l'inflation actuelle et des stratégies pour protéger son épargne dans ce contexte.",
          category: 'Économie',
          type: 'rapport',
          source: 'Banque de France',
          url: 'https://www.banque-france.fr/statistiques/inflation',
          image:
            'https://images.unsplash.com/photo-1611324806964-dabc10078834?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          date: '2023-10-20',
          tags: ['inflation', 'épargne', "pouvoir d'achat"],
          rating: 4.6,
        },
        {
          id: '3',
          title: 'Les ETF : comprendre et investir efficacement',
          description:
            "Tout ce que vous devez savoir sur les ETF (fonds indiciels cotés) et comment les intégrer dans votre stratégie d'investissement.",
          category: 'Investissement',
          type: 'article',
          source: 'Boursorama',
          url: 'https://www.boursorama.com/bourse/trackers/definition-trackers-etf',
          date: '2023-09-05',
          tags: ['ETF', 'investissement passif', 'diversification'],
          rating: 4.5,
        },
        {
          id: '4',
          title: "Simulateur d'impôt sur le revenu 2023",
          description:
            'Outil officiel pour estimer votre impôt sur le revenu selon les dernières réglementations fiscales.',
          category: 'Fiscalité',
          type: 'outil',
          source: 'Ministère des Finances',
          url: 'https://www.impots.gouv.fr/simulateur-impot-sur-le-revenu',
          date: '2023-12-01',
          featured: true,
          tags: ['impôts', 'fiscalité', 'simulation'],
          rating: 4.7,
        },
        {
          id: '5',
          title: "Investir dans l'immobilier en 2023 : opportunités et risques",
          description:
            "Analyse du marché immobilier français actuel et des perspectives d'investissement dans ce secteur.",
          category: 'Immobilier',
          type: 'article',
          source: 'SeLoger',
          url: 'https://www.seloger.com/actualites/investissement-locatif/',
          image:
            'https://images.unsplash.com/photo-1560518883-ce09059eeffa?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          date: '2023-11-10',
          tags: ['immobilier', 'investissement locatif', 'SCPI'],
          rating: 4.4,
        },
        {
          id: '6',
          title: 'Guide des placements à revenu fixe',
          description:
            "Comprendre les différents types de placements à revenu fixe et leur place dans votre allocation d'actifs.",
          category: 'Investissement',
          type: 'guide',
          source: 'La Finance Pour Tous',
          url: 'https://www.lafinancepourtous.com/decryptages/marches-financiers/produits-financiers/obligations/',
          date: '2023-08-15',
          tags: ['obligations', 'revenu fixe', "taux d'intérêt"],
          rating: 4.3,
        },
        {
          id: '7',
          title:
            "La finance comportementale : comprendre vos biais d'investissement",
          description:
            'Comment les biais psychologiques influencent nos décisions financières et comment les surmonter.',
          category: 'Psychologie',
          type: 'article',
          source: 'Café de la Bourse',
          url: 'https://www.cafedelabourse.com/archive/article/finance-comportementale',
          date: '2023-10-05',
          tags: ['psychologie', 'biais cognitifs', 'prise de décision'],
          rating: 4.9,
        },
        {
          id: '8',
          title: 'Rapport sur les crypto-actifs et la régulation',
          description:
            "État des lieux de la régulation des crypto-actifs en France et en Europe et perspectives d'évolution.",
          category: 'Cryptomonnaies',
          type: 'rapport',
          source: 'AMF',
          url: 'https://www.amf-france.org/fr/actualites-publications/publications/rapports-etudes-et-analyses/crypto-actifs',
          date: '2023-11-30',
          tags: ['crypto', 'blockchain', 'régulation', 'MiCA'],
          rating: 4.6,
        },
        {
          id: '9',
          title: 'Assurance-vie : guide complet et comparatif 2023',
          description:
            "Tout savoir sur l'assurance-vie, ses avantages fiscaux et les meilleures offres du marché.",
          category: 'Assurance',
          type: 'guide',
          source: 'Moneyvox',
          url: 'https://www.moneyvox.fr/assurance-vie/',
          image:
            'https://images.unsplash.com/photo-1563237023-b1e970526dcb?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          date: '2023-12-05',
          featured: true,
          tags: ['assurance-vie', 'épargne', 'fiscalité'],
          rating: 4.7,
        },
        {
          id: '10',
          title: 'Les fondamentaux de la gestion budgétaire',
          description:
            'Méthodes et outils pour établir et suivre un budget personnel ou familial efficace.',
          category: 'Budgétisation',
          type: 'guide',
          source: 'Institut National de la Consommation',
          url: 'https://www.inc-conso.fr/content/budget-familial',
          date: '2023-07-10',
          tags: ['budget', 'épargne', 'dépenses'],
          rating: 4.5,
        },
        {
          id: '11',
          title: 'Analyse des marchés boursiers : tendances 2023-2024',
          description:
            'Perspectives et analyses des marchés financiers mondiaux pour les prochains trimestres.',
          category: 'Marchés financiers',
          type: 'rapport',
          source: 'Les Échos',
          url: 'https://investir.lesechos.fr/marches/',
          date: '2023-12-01',
          tags: ['bourse', 'actions', 'prévisions'],
          rating: 4.4,
        },
        {
          id: '12',
          title: 'Calculateur de rentabilité immobilière',
          description:
            "Outil pour évaluer la rentabilité d'un investissement immobilier locatif.",
          category: 'Immobilier',
          type: 'outil',
          source: 'PAP',
          url: 'https://www.pap.fr/investisseur/calculette-rentabilite',
          date: '2023-09-20',
          tags: ['immobilier', 'rentabilité', 'investissement'],
          rating: 4.8,
        },
        {
          id: '13',
          title: 'La retraite par capitalisation : options et stratégies',
          description:
            "Guide sur les différents dispositifs d'épargne retraite disponibles en France après la réforme.",
          category: 'Retraite',
          type: 'guide',
          source: 'La Retraite en Clair',
          url: 'https://www.la-retraite-en-clair.fr/parcours-professionnel-regimes-retraite/epargne-retraite-complementaire/epargne-retraite',
          date: '2023-10-15',
          tags: ['retraite', 'PER', 'épargne long terme'],
          rating: 4.6,
        },
        {
          id: '14',
          title: 'Protection contre les arnaques financières',
          description:
            'Comment identifier et se protéger contre les fraudes et arnaques financières de plus en plus sophistiquées.',
          category: 'Sécurité',
          type: 'article',
          source: 'ACPR',
          url: 'https://acpr.banque-france.fr/proteger-la-clientele/comment-se-proteger-contre-les-arnaques',
          date: '2023-11-25',
          tags: ['arnaques', 'fraude', 'cybersécurité'],
          rating: 4.9,
        },
        {
          id: '15',
          title: 'Comparateur de frais bancaires',
          description:
            'Outil pour comparer les tarifs des services bancaires des principales banques françaises.',
          category: 'Banque',
          type: 'outil',
          source: 'Moneyvox',
          url: 'https://www.moneyvox.fr/banque/comparatif/',
          date: '2023-12-10',
          tags: ['banque', 'frais', 'comparaison'],
          rating: 4.7,
        },
      ]
      setResources(mockResources)
      setIsLoading(false)
    }
    loadResources()
  }, [])
  // Filter resources based on search term, category, and type
  const filteredResources = resources.filter((resource) => {
    const matchesSearch =
      resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      resource.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      resource.tags.some((tag) =>
        tag.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    const matchesCategory = selectedCategory
      ? resource.category === selectedCategory
      : true
    const matchesType = selectedType ? resource.type === selectedType : true
    return matchesSearch && matchesCategory && matchesType
  })
  // Get unique categories
  const categories = Array.from(
    new Set(resources.map((resource) => resource.category)),
  )
  // Get unique types
  const types = ['article', 'guide', 'rapport', 'outil']
  // Handle resource click
  const handleResourceClick = (resource: Resource) => {
    // Open the resource URL in a new tab
    window.open(resource.url, '_blank', 'noopener,noreferrer')
  }
  // Get icon for resource type
  const getResourceTypeIcon = (type: string) => {
    switch (type) {
      case 'article':
        return <NewspaperIcon size={16} />
      case 'guide':
        return <BookIcon size={16} />
      case 'rapport':
        return <FileTextIcon size={16} />
      case 'outil':
        return <BarChartIcon size={16} />
      default:
        return <FileIcon size={16} />
    }
  }
  // Get icon for resource category
  const getResourceCategoryIcon = (category: string) => {
    switch (category) {
      case 'Investissement':
        return <TrendingUpIcon size={16} className="text-green-400" />
      case 'Économie':
        return <GlobeIcon size={16} className="text-blue-400" />
      case 'Fiscalité':
        return <FileTextIcon size={16} className="text-yellow-400" />
      case 'Immobilier':
        return <HomeIcon size={16} className="text-orange-400" />
      case 'Banque':
        return <CreditCardIcon size={16} className="text-indigo-400" />
      case 'Assurance':
        return <ShieldIcon size={16} className="text-purple-400" />
      case 'Retraite':
        return <PiggyBankIcon size={16} className="text-pink-400" />
      case 'Cryptomonnaies':
        return <BarChartIcon size={16} className="text-cyan-400" />
      default:
        return <BookOpenIcon size={16} className="text-gray-400" />
    }
  }
  return (
    <div className="w-full max-w-6xl mx-auto pb-20">
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex flex-col md:flex-row md:items-center justify-between mb-4 gap-4">
          <div>
            <h1 className="text-3xl font-bold">Bibliothèque financière</h1>
            <p className={`${themeColors?.textSecondary || 'text-gray-400'}`}>
              Découvrez notre collection complète de ressources financières à
              jour
            </p>
          </div>
        </div>
        {/* Search and filters */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="md:col-span-2">
            <div className="relative">
              <SearchIcon
                className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                size={18}
              />
              <input
                type="text"
                placeholder="Rechercher des ressources..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full bg-black/20 border border-white/10 rounded-lg py-2 pl-10 pr-4 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
              />
            </div>
          </div>
          <div>
            <select
              value={selectedCategory || ''}
              onChange={(e) => setSelectedCategory(e.target.value || null)}
              className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
            >
              <option value="">Toutes les catégories</option>
              {categories.map((category, index) => (
                <option key={index} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
          <div>
            <select
              value={selectedType || ''}
              onChange={(e) => setSelectedType(e.target.value || null)}
              className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
            >
              <option value="">Tous les types</option>
              {types.map((type, index) => (
                <option key={index} value={type}>
                  {type.charAt(0).toUpperCase() + type.slice(1)}
                </option>
              ))}
            </select>
          </div>
        </div>
      </motion.div>
      {/* Featured resources */}
      {!isLoading && filteredResources.some((r) => r.featured) && (
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4">Ressources en vedette</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {filteredResources
              .filter((r) => r.featured)
              .slice(0, 3)
              .map((resource) => (
                <GlassCard
                  key={resource.id}
                  className="overflow-hidden flex flex-col"
                  animate
                  hover
                >
                  {resource.image && (
                    <div
                      className="h-40 bg-cover bg-center relative"
                      style={{
                        backgroundImage: `url(${resource.image})`,
                      }}
                    >
                      <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                      <div className="absolute bottom-0 left-0 right-0 p-3">
                        <div className="flex justify-between items-center">
                          <span className="flex items-center text-xs bg-black/50 backdrop-blur-sm px-2 py-1 rounded-full">
                            {getResourceCategoryIcon(resource.category)}
                            <span className="ml-1">{resource.category}</span>
                          </span>
                          <span className="flex items-center text-xs text-white">
                            <StarIcon
                              size={12}
                              className="text-yellow-400 mr-1"
                            />
                            {resource.rating}
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                  <div className="p-4 flex-1 flex flex-col">
                    <div className="flex items-start justify-between mb-2">
                      <span className="flex items-center text-xs bg-indigo-500/20 text-indigo-300 px-2 py-1 rounded">
                        {getResourceTypeIcon(resource.type)}
                        <span className="ml-1">
                          {resource.type.charAt(0).toUpperCase() +
                            resource.type.slice(1)}
                        </span>
                      </span>
                      <span className="text-xs text-gray-400">
                        {resource.date}
                      </span>
                    </div>
                    <h3 className="font-medium text-lg mb-2">
                      {resource.title}
                    </h3>
                    <p className="text-sm text-gray-300 mb-4 flex-1">
                      {resource.description}
                    </p>
                    <div className="mt-auto">
                      <div className="flex flex-wrap gap-2 mb-3">
                        {resource.tags.slice(0, 3).map((tag, idx) => (
                          <span
                            key={idx}
                            className="text-xs bg-black/20 px-2 py-1 rounded-full"
                          >
                            #{tag}
                          </span>
                        ))}
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-gray-400">
                          Source: {resource.source}
                        </span>
                        <button
                          onClick={() => handleResourceClick(resource)}
                          className={`py-1.5 px-3 rounded bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white text-sm flex items-center`}
                        >
                          <ExternalLinkIcon size={14} className="mr-1.5" />
                          Consulter
                        </button>
                      </div>
                    </div>
                  </div>
                </GlassCard>
              ))}
          </div>
        </div>
      )}
      {/* All resources */}
      {isLoading ? (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
        </div>
      ) : (
        <>
          <h2 className="text-xl font-semibold mb-4">Toutes les ressources</h2>
          {filteredResources.length > 0 ? (
            <div className="grid grid-cols-1 gap-4">
              {filteredResources.map((resource) => (
                <GlassCard
                  key={resource.id}
                  className="p-4 hover:bg-black/20 transition-colors"
                  animate
                  hover
                >
                  <div className="flex flex-col md:flex-row gap-4">
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center">
                          <span className="flex items-center mr-3">
                            {getResourceCategoryIcon(resource.category)}
                            <span className="ml-1 text-sm">
                              {resource.category}
                            </span>
                          </span>
                          <span className="flex items-center text-xs bg-indigo-500/20 text-indigo-300 px-2 py-1 rounded">
                            {getResourceTypeIcon(resource.type)}
                            <span className="ml-1">
                              {resource.type.charAt(0).toUpperCase() +
                                resource.type.slice(1)}
                            </span>
                          </span>
                        </div>
                        <span className="text-xs text-gray-400">
                          {resource.date}
                        </span>
                      </div>
                      <h3 className="font-medium text-lg mb-1">
                        {resource.title}
                      </h3>
                      <p className="text-sm text-gray-300 mb-3">
                        {resource.description}
                      </p>
                      <div className="flex flex-wrap gap-2 mb-3">
                        {resource.tags.map((tag, idx) => (
                          <span
                            key={idx}
                            className="text-xs bg-black/20 px-2 py-1 rounded-full"
                          >
                            #{tag}
                          </span>
                        ))}
                      </div>
                    </div>
                    <div className="flex flex-col justify-between items-end">
                      <div className="flex items-center mb-4">
                        <StarIcon size={14} className="text-yellow-400 mr-1" />
                        <span className="text-sm">{resource.rating}</span>
                      </div>
                      <div className="flex flex-col items-end gap-2">
                        <span className="text-xs text-gray-400">
                          Source: {resource.source}
                        </span>
                        <button
                          onClick={() => handleResourceClick(resource)}
                          className={`py-1.5 px-3 rounded bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white text-sm flex items-center`}
                        >
                          <ExternalLinkIcon size={14} className="mr-1.5" />
                          Consulter
                        </button>
                      </div>
                    </div>
                  </div>
                </GlassCard>
              ))}
            </div>
          ) : (
            <GlassCard className="p-8 text-center">
              <BookOpenIcon size={48} className="mx-auto mb-4 text-gray-500" />
              <h3 className="text-xl font-medium mb-2">
                Aucune ressource trouvée
              </h3>
              <p className="text-gray-400 mb-4">
                Aucune ressource ne correspond à vos critères de recherche.
              </p>
              <button
                onClick={() => {
                  setSearchTerm('')
                  setSelectedCategory(null)
                  setSelectedType(null)
                }}
                className={`py-2 px-4 rounded bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white`}
              >
                Réinitialiser les filtres
              </button>
            </GlassCard>
          )}
        </>
      )}
      {/* Newsletter subscription */}
      <div className="mt-12">
        <GlassCard className="p-6" animate>
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="mb-4 md:mb-0 md:mr-6">
              <h3 className="text-xl font-semibold mb-2">Restez informé</h3>
              <p className="text-gray-300">
                Abonnez-vous pour recevoir les dernières ressources financières
                et analyses directement dans votre boîte mail.
              </p>
            </div>
            <div className="w-full md:w-auto">
              <div className="flex">
                <input
                  type="email"
                  placeholder="Votre adresse email"
                  className="flex-1 bg-black/20 border border-white/10 rounded-l-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
                />
                <button
                  className={`py-2 px-4 rounded-r-lg bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white`}
                >
                  S'abonner
                </button>
              </div>
              <p className="text-xs text-gray-400 mt-2">
                Nous respectons votre vie privée. Désabonnez-vous à tout moment.
              </p>
            </div>
          </div>
        </GlassCard>
      </div>
    </div>
  )
}

```
```components/Lessons.tsx
import React, { useEffect, useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import {
  SearchIcon,
  GraduationCapIcon,
  BookOpenIcon,
  ClockIcon,
  StarIcon,
  FilterIcon,
  ChevronRightIcon,
  CheckCircleIcon,
  PlayCircleIcon,
  DownloadIcon,
  ExternalLinkIcon,
} from 'lucide-react'
interface Lesson {
  id: string
  title: string
  description: string
  category: string
  level: 'débutant' | 'intermédiaire' | 'avancé'
  duration: number // minutes
  image: string
  url: string
  completed?: boolean
  progress?: number // 0-100
  lastUpdated: string
  source: string
  rating: number // 1-5
}
export function Lessons() {
  const navigate = useNavigate()
  const { themeColors } = useTheme()
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)
  const [selectedLevel, setSelectedLevel] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [lessons, setLessons] = useState<Lesson[]>([])
  useEffect(() => {
    // Simulate loading lessons data
    const loadLessons = async () => {
      setIsLoading(true)
      // Mock lessons data with real information and links
      const mockLessons: Lesson[] = [
        {
          id: '1',
          title: 'Comprendre les marchés financiers en 2023',
          description:
            'Une introduction complète aux marchés financiers, avec les dernières tendances et évolutions post-pandémie.',
          category: 'Investissement',
          level: 'débutant',
          duration: 45,
          image:
            'https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.amf-france.org/fr/espace-epargnants/comprendre-les-marches-financiers',
          completed: false,
          progress: 0,
          lastUpdated: '2023-10-15',
          source: 'AMF (Autorité des Marchés Financiers)',
          rating: 4.7,
        },
        {
          id: '2',
          title: "Stratégies d'épargne efficaces pour 2023",
          description:
            "Découvrez les meilleures stratégies d'épargne adaptées au contexte économique actuel et aux taux d'intérêt.",
          category: 'Épargne',
          level: 'débutant',
          duration: 30,
          image:
            'https://images.unsplash.com/photo-1579621970588-a35d0e7ab9b6?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.lafinancepourtous.com/pratique/epargne/',
          completed: true,
          progress: 100,
          lastUpdated: '2023-09-05',
          source: 'La Finance Pour Tous',
          rating: 4.5,
        },
        {
          id: '3',
          title: 'Analyse fondamentale des actions',
          description:
            "Apprenez à analyser les entreprises cotées en bourse en utilisant les méthodes d'analyse fondamentale.",
          category: 'Investissement',
          level: 'intermédiaire',
          duration: 60,
          image:
            'https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.boursorama.com/bourse/apprendre/analyse-fondamentale/',
          completed: false,
          progress: 45,
          lastUpdated: '2023-11-20',
          source: 'Boursorama',
          rating: 4.8,
        },
        {
          id: '4',
          title: 'Optimisation fiscale légale pour particuliers',
          description:
            'Comment réduire légalement votre imposition grâce aux dispositifs fiscaux en vigueur en France.',
          category: 'Fiscalité',
          level: 'intermédiaire',
          duration: 55,
          image:
            'https://images.unsplash.com/photo-1554224155-6726b3ff858f?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.economie.gouv.fr/particuliers/impot-revenu-reduction-credit-impot',
          completed: false,
          progress: 0,
          lastUpdated: '2023-12-01',
          source: "Ministère de l'Économie",
          rating: 4.6,
        },
        {
          id: '5',
          title: 'Investissement immobilier locatif',
          description:
            "Guide complet pour investir dans l'immobilier locatif : sélection, financement, gestion et fiscalité.",
          category: 'Immobilier',
          level: 'avancé',
          duration: 75,
          image:
            'https://images.unsplash.com/photo-1560518883-ce09059eeffa?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.anil.org/votre-projet/vous-achetez-vous-construisez/investissement-locatif/',
          completed: false,
          progress: 20,
          lastUpdated: '2023-11-10',
          source: 'ANIL',
          rating: 4.9,
        },
        {
          id: '6',
          title: 'Cryptomonnaies et blockchain expliquées',
          description:
            'Comprendre les fondamentaux des cryptomonnaies, de la blockchain et leur impact sur la finance moderne.',
          category: 'Cryptomonnaies',
          level: 'intermédiaire',
          duration: 50,
          image:
            'https://images.unsplash.com/photo-1621761191319-c6fb62004040?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.amf-france.org/fr/espace-epargnants/comprendre-les-produits-financiers/actifs-numeriques-crypto-actifs',
          completed: false,
          progress: 0,
          lastUpdated: '2023-12-05',
          source: 'AMF',
          rating: 4.7,
        },
        {
          id: '7',
          title: 'Planification de la retraite',
          description:
            'Comment préparer efficacement sa retraite avec les dernières réformes et dispositifs disponibles.',
          category: 'Retraite',
          level: 'débutant',
          duration: 40,
          image:
            'https://images.unsplash.com/photo-1574482620703-28f9b77330d3?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.la-retraite-en-clair.fr/',
          completed: false,
          progress: 0,
          lastUpdated: '2023-10-20',
          source: 'La Retraite en Clair',
          rating: 4.5,
        },
        {
          id: '8',
          title: "Gestion des risques d'investissement",
          description:
            'Techniques avancées pour identifier, mesurer et gérer les risques dans vos investissements.',
          category: 'Investissement',
          level: 'avancé',
          duration: 65,
          image:
            'https://images.unsplash.com/photo-1633158829875-e5316a358c6c?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.amf-france.org/fr/espace-epargnants/savoir-bien-investir/cadrer-son-projet/connaitre-les-risques',
          completed: false,
          progress: 0,
          lastUpdated: '2023-11-25',
          source: 'AMF',
          rating: 4.8,
        },
        {
          id: '9',
          title: 'ESG et investissement responsable',
          description:
            "Comment intégrer les critères environnementaux, sociaux et de gouvernance dans vos décisions d'investissement.",
          category: 'Investissement durable',
          level: 'intermédiaire',
          duration: 45,
          image:
            'https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
          url: 'https://www.frenchsif.org/isr-esg/',
          completed: false,
          progress: 0,
          lastUpdated: '2023-12-10',
          source: "Forum pour l'Investissement Responsable",
          rating: 4.6,
        },
      ]
      setLessons(mockLessons)
      setIsLoading(false)
    }
    loadLessons()
  }, [])
  // Filter lessons based on search term, category, and level
  const filteredLessons = lessons.filter((lesson) => {
    const matchesSearch =
      lesson.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lesson.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = selectedCategory
      ? lesson.category === selectedCategory
      : true
    const matchesLevel = selectedLevel ? lesson.level === selectedLevel : true
    return matchesSearch && matchesCategory && matchesLevel
  })
  // Get unique categories
  const categories = Array.from(
    new Set(lessons.map((lesson) => lesson.category)),
  )
  // Get unique levels
  const levels = ['débutant', 'intermédiaire', 'avancé']
  // Handle lesson click
  const handleLessonClick = (lesson: Lesson) => {
    // Open the lesson URL in a new tab
    window.open(lesson.url, '_blank', 'noopener,noreferrer')
  }
  return (
    <div className="w-full max-w-6xl mx-auto pb-20">
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex flex-col md:flex-row md:items-center justify-between mb-4 gap-4">
          <div>
            <h1 className="text-3xl font-bold">Leçons financières</h1>
            <p className={`${themeColors?.textSecondary || 'text-gray-400'}`}>
              Développez vos connaissances avec nos leçons à jour et complètes
            </p>
          </div>
        </div>
        {/* Search and filters */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="md:col-span-2">
            <div className="relative">
              <SearchIcon
                className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                size={18}
              />
              <input
                type="text"
                placeholder="Rechercher des leçons..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full bg-black/20 border border-white/10 rounded-lg py-2 pl-10 pr-4 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
              />
            </div>
          </div>
          <div>
            <select
              value={selectedCategory || ''}
              onChange={(e) => setSelectedCategory(e.target.value || null)}
              className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
            >
              <option value="">Toutes les catégories</option>
              {categories.map((category, index) => (
                <option key={index} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
          <div>
            <select
              value={selectedLevel || ''}
              onChange={(e) => setSelectedLevel(e.target.value || null)}
              className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
            >
              <option value="">Tous les niveaux</option>
              {levels.map((level, index) => (
                <option key={index} value={level}>
                  {level.charAt(0).toUpperCase() + level.slice(1)}
                </option>
              ))}
            </select>
          </div>
        </div>
      </motion.div>
      {/* Lessons grid */}
      {isLoading ? (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin h-8 w-8 border-4 border-indigo-500 border-t-transparent rounded-full"></div>
        </div>
      ) : (
        <>
          {filteredLessons.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredLessons.map((lesson) => (
                <GlassCard
                  key={lesson.id}
                  className="flex flex-col overflow-hidden"
                  animate
                  hover
                >
                  <div
                    className="h-40 bg-cover bg-center relative"
                    style={{
                      backgroundImage: `url(${lesson.image})`,
                    }}
                  >
                    <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                    <div className="absolute bottom-0 left-0 right-0 p-3">
                      <div className="flex justify-between items-center">
                        <span
                          className={`text-xs px-2 py-1 rounded-full ${lesson.level === 'débutant' ? 'bg-green-500/20 text-green-300' : lesson.level === 'intermédiaire' ? 'bg-yellow-500/20 text-yellow-300' : 'bg-red-500/20 text-red-300'}`}
                        >
                          {lesson.level.charAt(0).toUpperCase() +
                            lesson.level.slice(1)}
                        </span>
                        <span className="flex items-center text-xs text-white">
                          <ClockIcon size={12} className="mr-1" />
                          {lesson.duration} min
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="p-4 flex-1 flex flex-col">
                    <div className="flex items-start justify-between mb-2">
                      <span className="text-xs bg-indigo-500/20 text-indigo-300 px-2 py-1 rounded">
                        {lesson.category}
                      </span>
                      <div className="flex items-center">
                        <StarIcon size={12} className="text-yellow-400" />
                        <span className="text-xs ml-1">
                          {lesson.rating.toFixed(1)}
                        </span>
                      </div>
                    </div>
                    <h3 className="font-medium text-lg mb-2">{lesson.title}</h3>
                    <p className="text-sm text-gray-300 mb-4 flex-1">
                      {lesson.description}
                    </p>
                    <div className="mt-auto">
                      {lesson.progress > 0 && (
                        <div className="mb-3">
                          <div className="flex justify-between text-xs mb-1">
                            <span>Progression</span>
                            <span>{lesson.progress}%</span>
                          </div>
                          <div className="h-1.5 bg-black/30 rounded-full overflow-hidden">
                            <div
                              className="h-full bg-gradient-to-r from-indigo-500 to-purple-600"
                              style={{
                                width: `${lesson.progress}%`,
                              }}
                            ></div>
                          </div>
                        </div>
                      )}
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-gray-400">
                          Mis à jour le {lesson.lastUpdated}
                        </span>
                        <span className="text-xs text-gray-400">
                          {lesson.source}
                        </span>
                      </div>
                      <div className="flex justify-between items-center mt-3">
                        {lesson.completed ? (
                          <span className="flex items-center text-xs text-green-400">
                            <CheckCircleIcon size={14} className="mr-1" />
                            Complété
                          </span>
                        ) : (
                          <span className="text-xs text-gray-400">
                            {lesson.progress > 0 ? 'Continuer' : 'Non commencé'}
                          </span>
                        )}
                        <button
                          onClick={() => handleLessonClick(lesson)}
                          className={`py-1.5 px-3 rounded bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white text-sm flex items-center`}
                        >
                          <ExternalLinkIcon size={14} className="mr-1.5" />
                          Accéder
                        </button>
                      </div>
                    </div>
                  </div>
                </GlassCard>
              ))}
            </div>
          ) : (
            <GlassCard className="p-8 text-center">
              <BookOpenIcon size={48} className="mx-auto mb-4 text-gray-500" />
              <h3 className="text-xl font-medium mb-2">Aucune leçon trouvée</h3>
              <p className="text-gray-400 mb-4">
                Aucune leçon ne correspond à vos critères de recherche.
              </p>
              <button
                onClick={() => {
                  setSearchTerm('')
                  setSelectedCategory(null)
                  setSelectedLevel(null)
                }}
                className={`py-2 px-4 rounded bg-gradient-to-r ${themeColors?.primary || 'from-indigo-500 to-purple-600'} hover:opacity-90 text-white`}
              >
                Réinitialiser les filtres
              </button>
            </GlassCard>
          )}
        </>
      )}
      {/* Featured resources section */}
      <div className="mt-12">
        <h2 className="text-2xl font-bold mb-6">Ressources recommandées</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <GlassCard className="p-6" animate>
            <h3 className="font-medium mb-3 flex items-center">
              <BookOpenIcon className="h-5 w-5 mr-2 text-blue-400" />
              Publications officielles
            </h3>
            <div className="space-y-4">
              <div
                className="bg-black/20 p-3 rounded-lg hover:bg-black/30 transition-colors cursor-pointer"
                onClick={() =>
                  window.open(
                    'https://www.amf-france.org/fr/actualites-publications/publications',
                    '_blank',
                  )
                }
              >
                <h4 className="text-sm font-medium mb-1 flex items-center">
                  AMF - Publications et guides
                  <ExternalLinkIcon size={14} className="ml-1.5" />
                </h4>
                <p className="text-xs text-gray-400">
                  Guides et documents officiels de l'Autorité des Marchés
                  Financiers
                </p>
              </div>
              <div
                className="bg-black/20 p-3 rounded-lg hover:bg-black/30 transition-colors cursor-pointer"
                onClick={() =>
                  window.open(
                    'https://www.banque-france.fr/publications',
                    '_blank',
                  )
                }
              >
                <h4 className="text-sm font-medium mb-1 flex items-center">
                  Banque de France - Publications
                  <ExternalLinkIcon size={14} className="ml-1.5" />
                </h4>
                <p className="text-xs text-gray-400">
                  Rapports, études et analyses économiques de la Banque de
                  France
                </p>
              </div>
              <div
                className="bg-black/20 p-3 rounded-lg hover:bg-black/30 transition-colors cursor-pointer"
                onClick={() =>
                  window.open(
                    'https://www.economie.gouv.fr/particuliers',
                    '_blank',
                  )
                }
              >
                <h4 className="text-sm font-medium mb-1 flex items-center">
                  Ministère de l'Économie - Espace particuliers
                  <ExternalLinkIcon size={14} className="ml-1.5" />
                </h4>
                <p className="text-xs text-gray-400">
                  Informations officielles sur la fiscalité et les finances
                  personnelles
                </p>
              </div>
            </div>
          </GlassCard>
          <GlassCard className="p-6" animate>
            <h3 className="font-medium mb-3 flex items-center">
              <PlayCircleIcon className="h-5 w-5 mr-2 text-red-400" />
              Webinaires et formations en ligne
            </h3>
            <div className="space-y-4">
              <div
                className="bg-black/20 p-3 rounded-lg hover:bg-black/30 transition-colors cursor-pointer"
                onClick={() =>
                  window.open(
                    'https://www.lafinancepourtous.com/outils/agenda/',
                    '_blank',
                  )
                }
              >
                <h4 className="text-sm font-medium mb-1 flex items-center">
                  La Finance Pour Tous - Webinaires
                  <ExternalLinkIcon size={14} className="ml-1.5" />
                </h4>
                <p className="text-xs text-gray-400">
                  Calendrier des webinaires gratuits sur l'éducation financière
                </p>
              </div>
              <div
                className="bg-black/20 p-3 rounded-lg hover:bg-black/30 transition-colors cursor-pointer"
                onClick={() =>
                  window.open(
                    'https://www.amf-france.org/fr/espace-epargnants/lamf-et-vous/conferences-videos',
                    '_blank',
                  )
                }
              >
                <h4 className="text-sm font-medium mb-1 flex items-center">
                  AMF - Conférences vidéo
                  <ExternalLinkIcon size={14} className="ml-1.5" />
                </h4>
                <p className="text-xs text-gray-400">
                  Vidéos et conférences sur les marchés financiers et
                  l'investissement
                </p>
              </div>
              <div
                className="bg-black/20 p-3 rounded-lg hover:bg-black/30 transition-colors cursor-pointer"
                onClick={() =>
                  window.open(
                    'https://www.youtube.com/c/HeudeNicolas',
                    '_blank',
                  )
                }
              >
                <h4 className="text-sm font-medium mb-1 flex items-center">
                  Chaîne YouTube - Heu?reka
                  <ExternalLinkIcon size={14} className="ml-1.5" />
                </h4>
                <p className="text-xs text-gray-400">
                  Vidéos pédagogiques sur l'économie et la finance (par Nicolas
                  Heude)
                </p>
              </div>
            </div>
          </GlassCard>
        </div>
      </div>
    </div>
  )
}

```
```components/Feedback.tsx
import React, { useState } from 'react'
import { GlassCard } from './ui/GlassCard'
import { motion } from 'framer-motion'
import { useTheme } from '../context/ThemeContext'
import {
  MessageSquareIcon,
  StarIcon,
  SendIcon,
  CheckIcon,
  ThumbsUpIcon,
  ThumbsDownIcon,
  SmileIcon,
  FrownIcon,
  MehIcon,
} from 'lucide-react'
export function Feedback() {
  const { themeColors } = useTheme()
  const [feedbackType, setFeedbackType] = useState('general')
  const [satisfaction, setSatisfaction] = useState(0)
  const [feedbackText, setFeedbackText] = useState('')
  const [submitted, setSubmitted] = useState(false)
  const [currentSurvey, setCurrentSurvey] = useState(0)
  const feedbackTypes = [
    {
      id: 'general',
      name: 'Général',
    },
    {
      id: 'feature',
      name: 'Fonctionnalité',
    },
    {
      id: 'bug',
      name: 'Bug',
    },
    {
      id: 'suggestion',
      name: 'Suggestion',
    },
  ]
  const microsurveys = [
    {
      id: 1,
      question: "Comment trouvez-vous l'interface utilisateur de Rivela?",
      options: [
        'Très intuitive',
        'Facile à utiliser',
        'Parfois confuse',
        'Difficile à naviguer',
      ],
    },
    {
      id: 2,
      question: 'Quelles fonctionnalités aimeriez-vous voir ajoutées?',
      options: [
        'Plus de graphiques',
        'Conseils financiers personnalisés',
        'Intégration avec des banques',
        'Planification de retraite avancée',
      ],
    },
    {
      id: 3,
      question: "À quelle fréquence utilisez-vous l'application?",
      options: [
        'Quotidiennement',
        'Quelques fois par semaine',
        'Quelques fois par mois',
        'Rarement',
      ],
    },
  ]
  const handleSubmit = (e) => {
    e.preventDefault()
    // In a real app, you would send the feedback to your server
    setSubmitted(true)
    setTimeout(() => {
      setSubmitted(false)
      setFeedbackText('')
      setSatisfaction(0)
    }, 3000)
  }
  const handleSurveyResponse = (response) => {
    // In a real app, you would send the survey response to your server
    if (currentSurvey < microsurveys.length - 1) {
      setCurrentSurvey(currentSurvey + 1)
    } else {
      // Reset to first survey after completing all
      setCurrentSurvey(0)
    }
  }
  return (
    <div className="w-full max-w-4xl mx-auto pb-20">
      <motion.div
        className="mb-6"
        initial={{
          opacity: 0,
          y: -20,
        }}
        animate={{
          opacity: 1,
          y: 0,
        }}
        transition={{
          duration: 0.5,
        }}
      >
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold">Feedback</h1>
            <p className={`${themeColors.textSecondary}`}>
              Aidez-nous à améliorer Rivela avec vos commentaires
            </p>
          </div>
        </div>
      </motion.div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Feedback form */}
        <GlassCard className="p-6" animate>
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <MessageSquareIcon className="h-5 w-5 mr-2 text-indigo-400" />
            Donnez votre avis
          </h2>
          {submitted ? (
            <div className="bg-green-500/20 border border-green-500/30 text-green-300 p-4 rounded-lg flex items-center justify-center flex-col h-64">
              <CheckIcon className="h-12 w-12 mb-2" />
              <p className="text-lg font-medium">Merci pour votre feedback!</p>
              <p className="text-sm">Votre avis est important pour nous.</p>
            </div>
          ) : (
            <form onSubmit={handleSubmit}>
              <div className="mb-4">
                <label className="block text-sm mb-2">Type de feedback</label>
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                  {feedbackTypes.map((type) => (
                    <button
                      key={type.id}
                      type="button"
                      onClick={() => setFeedbackType(type.id)}
                      className={`py-2 px-3 text-sm rounded-lg transition-all ${feedbackType === type.id ? `bg-gradient-to-r ${themeColors.primary} text-white` : 'bg-black/20 hover:bg-black/30'}`}
                    >
                      {type.name}
                    </button>
                  ))}
                </div>
              </div>
              <div className="mb-4">
                <label className="block text-sm mb-2">
                  Niveau de satisfaction
                </label>
                <div className="flex justify-between">
                  {[1, 2, 3, 4, 5].map((rating) => (
                    <button
                      key={rating}
                      type="button"
                      onClick={() => setSatisfaction(rating)}
                      className={`p-2 rounded-full transition-all ${satisfaction === rating ? 'bg-indigo-500 text-white' : 'bg-black/20 hover:bg-black/30'}`}
                    >
                      <StarIcon className="h-6 w-6" />
                    </button>
                  ))}
                </div>
                <div className="flex justify-between text-xs mt-1 text-gray-400">
                  <span>Pas satisfait</span>
                  <span>Très satisfait</span>
                </div>
              </div>
              <div className="mb-4">
                <label className="block text-sm mb-2">Votre message</label>
                <textarea
                  value={feedbackText}
                  onChange={(e) => setFeedbackText(e.target.value)}
                  placeholder="Partagez vos commentaires, suggestions ou signalement de bugs..."
                  className="w-full bg-black/20 border border-white/10 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-1 focus:ring-indigo-500/50 min-h-[120px]"
                ></textarea>
              </div>
              <button
                type="submit"
                className={`w-full py-2 rounded-lg bg-gradient-to-r ${themeColors.primary} hover:opacity-90 text-white flex items-center justify-center`}
              >
                <SendIcon className="h-4 w-4 mr-2" />
                Envoyer le feedback
              </button>
            </form>
          )}
        </GlassCard>
        {/* Microsurvey */}
        <div className="space-y-6">
          <GlassCard className="p-6" animate>
            <h2 className="text-xl font-semibold mb-4">Micro-sondage</h2>
            <div className="bg-black/20 rounded-lg p-4">
              <h3 className="font-medium mb-4">
                {microsurveys[currentSurvey].question}
              </h3>
              <div className="space-y-2">
                {microsurveys[currentSurvey].options.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => handleSurveyResponse(option)}
                    className="w-full text-left p-3 rounded-lg bg-black/20 hover:bg-black/30 transition-all"
                  >
                    {option}
                  </button>
                ))}
              </div>
              <div className="mt-4 text-xs text-gray-400 flex justify-between">
                <span>
                  Question {currentSurvey + 1} sur {microsurveys.length}
                </span>
                <button
                  onClick={() =>
                    setCurrentSurvey((currentSurvey + 1) % microsurveys.length)
                  }
                  className="text-indigo-400 hover:text-indigo-300"
                >
                  Passer
                </button>
              </div>
            </div>
          </GlassCard>
          {/* Quick feedback */}
          <GlassCard className="p-6" animate>
            <h2 className="text-xl font-semibold mb-4">Feedback rapide</h2>
            <p className={`text-sm ${themeColors.textSecondary} mb-4`}>
              Comment évaluez-vous votre expérience avec Rivela aujourd'hui?
            </p>
            <div className="flex justify-center space-x-6">
              <button className="flex flex-col items-center p-3 rounded-lg bg-black/20 hover:bg-green-900/20 hover:text-green-400 transition-all">
                <SmileIcon className="h-8 w-8 mb-1" />
                <span className="text-sm">Bien</span>
              </button>
              <button className="flex flex-col items-center p-3 rounded-lg bg-black/20 hover:bg-yellow-900/20 hover:text-yellow-400 transition-all">
                <MehIcon className="h-8 w-8 mb-1" />
                <span className="text-sm">Moyen</span>
              </button>
              <button className="flex flex-col items-center p-3 rounded-lg bg-black/20 hover:bg-red-900/20 hover:text-red-400 transition-all">
                <FrownIcon className="h-8 w-8 mb-1" />
                <span className="text-sm">Mauvais</span>
              </button>
            </div>
          </GlassCard>
        </div>
      </div>
    </div>
  )
}

```
